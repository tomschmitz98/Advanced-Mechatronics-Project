
Adv-Mech-Project-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005eac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  0800607c  0800607c  0001607c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800631c  0800631c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800631c  0800631c  0001631c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006324  08006324  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006324  08006324  00016324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006328  08006328  00016328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800632c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d0  2000006c  08006398  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000073c  08006398  0002073c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011431  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003275  00000000  00000000  00031510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a0  00000000  00000000  00034788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ec3  00000000  00000000  00035b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024087  00000000  00000000  000369eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001399b  00000000  00000000  0005aa72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d085a  00000000  00000000  0006e40d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005bb0  00000000  00000000  0013ec68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00144818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006064 	.word	0x08006064

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08006064 	.word	0x08006064

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <generate_mask>:
#define SCB_MMAR 13
#define SCB_BFAR 14
#define SCB_AFSR 15

static uint32_t generate_mask(uint32_t interrupt, uint32_t *reg)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	uint32_t x = interrupt >> 5;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	095b      	lsrs	r3, r3, #5
 80005ba:	60fb      	str	r3, [r7, #12]
	if (x >= NUM_NORM_INT_REGS || interrupt > MAX_INT_ID)
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	2b07      	cmp	r3, #7
 80005c0:	d802      	bhi.n	80005c8 <generate_mask+0x1c>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2bef      	cmp	r3, #239	; 0xef
 80005c6:	d904      	bls.n	80005d2 <generate_mask+0x26>
	{
		*reg = 0;
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
		return 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	e008      	b.n	80005e4 <generate_mask+0x38>
	}
	*reg = x;
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	68fa      	ldr	r2, [r7, #12]
 80005d6:	601a      	str	r2, [r3, #0]

	return (1UL << (interrupt & 0x1F));
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f003 031f 	and.w	r3, r3, #31
 80005de:	2201      	movs	r2, #1
 80005e0:	fa02 f303 	lsl.w	r3, r2, r3
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <nvic_set_enable>:

static void nvic_set_enable(uint32_t interrupt)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	uint32_t mask, x;
	mask = generate_mask(interrupt, &x);
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	4619      	mov	r1, r3
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f7ff ffd4 	bl	80005ac <generate_mask>
 8000604:	60f8      	str	r0, [r7, #12]
	NVIC_BASE(NVIC_ISER, x) = mask;
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800060e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000612:	68fa      	ldr	r2, [r7, #12]
 8000614:	601a      	str	r2, [r3, #0]
	mask = NVIC_BASE(NVIC_ISER, x);
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800061e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	60fb      	str	r3, [r7, #12]
}
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <nvic_clear_enable>:

static void nvic_clear_enable(uint32_t interrupt)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	uint32_t mask, x;
	mask = generate_mask(interrupt, &x);
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	4619      	mov	r1, r3
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f7ff ffb4 	bl	80005ac <generate_mask>
 8000644:	60f8      	str	r0, [r7, #12]
	NVIC_BASE(NVIC_ICER, x) = mask;
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	009a      	lsls	r2, r3, #2
 800064a:	4b04      	ldr	r3, [pc, #16]	; (800065c <nvic_clear_enable+0x2c>)
 800064c:	4413      	add	r3, r2
 800064e:	68fa      	ldr	r2, [r7, #12]
 8000650:	601a      	str	r2, [r3, #0]
}
 8000652:	bf00      	nop
 8000654:	3710      	adds	r7, #16
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	e000e180 	.word	0xe000e180

08000660 <nvic_clear_pending>:
	mask = generate_mask(interrupt, &x);
	NVIC_BASE(NVIC_ISPR, x) = mask;
}

static void nvic_clear_pending(uint32_t interrupt)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	uint32_t mask, x;
	mask = generate_mask(interrupt, &x);
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	4619      	mov	r1, r3
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f7ff ff9c 	bl	80005ac <generate_mask>
 8000674:	60f8      	str	r0, [r7, #12]
	NVIC_BASE(NVIC_ICPR, x) = mask;
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	009a      	lsls	r2, r3, #2
 800067a:	4b04      	ldr	r3, [pc, #16]	; (800068c <nvic_clear_pending+0x2c>)
 800067c:	4413      	add	r3, r2
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	601a      	str	r2, [r3, #0]
}
 8000682:	bf00      	nop
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	e000e280 	.word	0xe000e280

08000690 <nvic_set_priority>:
	status = NVIC_BASE(NVIC_IABR, x);
	return (status & mask) != 0;
}

static void nvic_set_priority(uint32_t interrupt, uint8_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b087      	sub	sp, #28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	460b      	mov	r3, r1
 800069a:	70fb      	strb	r3, [r7, #3]
	uint32_t x = interrupt >> 2, priority_u32 = (uint32_t)priority, mask = 0xFF, shift;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	089b      	lsrs	r3, r3, #2
 80006a0:	617b      	str	r3, [r7, #20]
 80006a2:	78fb      	ldrb	r3, [r7, #3]
 80006a4:	613b      	str	r3, [r7, #16]
 80006a6:	23ff      	movs	r3, #255	; 0xff
 80006a8:	60fb      	str	r3, [r7, #12]

	if (x >= NUM_PRIORITY_REGS || interrupt > MAX_INT_ID)
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	2b3b      	cmp	r3, #59	; 0x3b
 80006ae:	d837      	bhi.n	8000720 <nvic_set_priority+0x90>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2bef      	cmp	r3, #239	; 0xef
 80006b4:	d834      	bhi.n	8000720 <nvic_set_priority+0x90>
	{
		return;
	}

	shift = (interrupt - (x << 2)) << 3;
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	00db      	lsls	r3, r3, #3
 80006c0:	60bb      	str	r3, [r7, #8]
	NVIC_BASE(NVIC_IPR, x) &= ~(mask << shift);
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80006ca:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80006ce:	6819      	ldr	r1, [r3, #0]
 80006d0:	68fa      	ldr	r2, [r7, #12]
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	fa02 f303 	lsl.w	r3, r2, r3
 80006d8:	43da      	mvns	r2, r3
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80006e2:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80006e6:	400a      	ands	r2, r1
 80006e8:	601a      	str	r2, [r3, #0]
	NVIC_BASE(NVIC_IPR, x) |= (priority_u32 << shift);
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80006f2:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80006f6:	6819      	ldr	r1, [r3, #0]
 80006f8:	693a      	ldr	r2, [r7, #16]
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	409a      	lsls	r2, r3
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000706:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800070a:	430a      	orrs	r2, r1
 800070c:	601a      	str	r2, [r3, #0]
	priority = NVIC_BASE(NVIC_IPR, x);
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000716:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	70fb      	strb	r3, [r7, #3]
 800071e:	e000      	b.n	8000722 <nvic_set_priority+0x92>
		return;
 8000720:	bf00      	nop
}
 8000722:	371c      	adds	r7, #28
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <disable_global_irq>:
{
	__asm volatile ("nop");
}

void disable_global_irq(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
	__asm volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
	__disable_irq();
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr

0800073e <enable_global_irq>:

void enable_global_irq(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
	__asm volatile ("cpsie i" : : : "memory");
 8000742:	b662      	cpsie	i
}
 8000744:	bf00      	nop
	__enable_irq();
}
 8000746:	bf00      	nop
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <configure_interrupt>:

void configure_interrupt(irq_info_t config)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	80b8      	strh	r0, [r7, #4]
	nvic_clear_enable((uint32_t)config.interrupt_id);
 8000758:	793b      	ldrb	r3, [r7, #4]
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff68 	bl	8000630 <nvic_clear_enable>
	nvic_clear_pending((uint32_t)config.interrupt_id);
 8000760:	793b      	ldrb	r3, [r7, #4]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff7c 	bl	8000660 <nvic_clear_pending>
	nvic_set_priority((uint32_t)config.interrupt_id, config.priority);
 8000768:	793b      	ldrb	r3, [r7, #4]
 800076a:	461a      	mov	r2, r3
 800076c:	797b      	ldrb	r3, [r7, #5]
 800076e:	4619      	mov	r1, r3
 8000770:	4610      	mov	r0, r2
 8000772:	f7ff ff8d 	bl	8000690 <nvic_set_priority>
	nvic_set_enable((uint32_t)config.interrupt_id);
 8000776:	793b      	ldrb	r3, [r7, #4]
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ff39 	bl	80005f0 <nvic_set_enable>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <disable_irq>:
{
	nvic_set_enable((uint32_t)irq.interrupt_id);
}

void disable_irq(irq_info_t irq)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	80b8      	strh	r0, [r7, #4]
	nvic_clear_enable((uint32_t)irq.interrupt_id);
 800078e:	793b      	ldrb	r3, [r7, #4]
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ff4d 	bl	8000630 <nvic_clear_enable>
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <reset_system>:
{
	nvic_generate_software_interrupt(irq.interrupt_id);
}

void reset_system(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
	__asm volatile ("dsb 0xF":::"memory");
 80007a4:	f3bf 8f4f 	dsb	sy
}
 80007a8:	bf00      	nop
	__DSB();
	SCB_BASE(SCB_AIRCR) = (uint32_t)(VECTKEY | (SCB_BASE(SCB_AIRCR) & PRIORITY_MASK) | BIT2);
 80007aa:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <reset_system+0x28>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80007b2:	4905      	ldr	r1, [pc, #20]	; (80007c8 <reset_system+0x28>)
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <reset_system+0x2c>)
 80007b6:	4313      	orrs	r3, r2
 80007b8:	600b      	str	r3, [r1, #0]
	__asm volatile ("dsb 0xF":::"memory");
 80007ba:	f3bf 8f4f 	dsb	sy
}
 80007be:	bf00      	nop
	__asm volatile ("nop");
 80007c0:	bf00      	nop
}
 80007c2:	bf00      	nop
	__DSB();

	// Wait for reset
	for (;;)
	{
		__NOP();
 80007c4:	e7fc      	b.n	80007c0 <reset_system+0x20>
 80007c6:	bf00      	nop
 80007c8:	e000ed0c 	.word	0xe000ed0c
 80007cc:	05fa0004 	.word	0x05fa0004

080007d0 <set_exti_int_mask>:
#define EXTI_FTSR 3
#define EXTI_SWIER 4
#define EXTI_PR 5

static void set_exti_int_mask(uint32_t mask)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	mask &= EXTI_VALID_MASK;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80007de:	607b      	str	r3, [r7, #4]
	EXTI_BASE(EXTI_IMR) |= mask;
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <set_exti_int_mask+0x28>)
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	4904      	ldr	r1, [pc, #16]	; (80007f8 <set_exti_int_mask+0x28>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	600b      	str	r3, [r1, #0]
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	40013c00 	.word	0x40013c00

080007fc <clear_exti_int_mask>:

static void clear_exti_int_mask(uint32_t mask)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	mask &= EXTI_VALID_MASK;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800080a:	607b      	str	r3, [r7, #4]
	EXTI_BASE(EXTI_IMR) &= ~mask;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <clear_exti_int_mask+0x2c>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	43db      	mvns	r3, r3
 8000814:	4904      	ldr	r1, [pc, #16]	; (8000828 <clear_exti_int_mask+0x2c>)
 8000816:	4013      	ands	r3, r2
 8000818:	600b      	str	r3, [r1, #0]
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	40013c00 	.word	0x40013c00

0800082c <set_exti_event_mask>:
{
	return EXTI_BASE(EXTI_IMR);
}

static void set_exti_event_mask(uint32_t mask)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	mask &= EXTI_VALID_MASK;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800083a:	607b      	str	r3, [r7, #4]
	EXTI_BASE(EXTI_EMR) |= mask;
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <set_exti_event_mask+0x28>)
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	4904      	ldr	r1, [pc, #16]	; (8000854 <set_exti_event_mask+0x28>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4313      	orrs	r3, r2
 8000846:	600b      	str	r3, [r1, #0]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	40013c04 	.word	0x40013c04

08000858 <clear_exti_event_mask>:

static void clear_exti_event_mask(uint32_t mask)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	mask &= EXTI_VALID_MASK;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8000866:	607b      	str	r3, [r7, #4]
	EXTI_BASE(EXTI_EMR) &= ~mask;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <clear_exti_event_mask+0x2c>)
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	43db      	mvns	r3, r3
 8000870:	4904      	ldr	r1, [pc, #16]	; (8000884 <clear_exti_event_mask+0x2c>)
 8000872:	4013      	ands	r3, r2
 8000874:	600b      	str	r3, [r1, #0]
}
 8000876:	bf00      	nop
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	40013c04 	.word	0x40013c04

08000888 <set_exti_rising_edge>:
{
	return EXTI_BASE(EXTI_EMR);
}

static void set_exti_rising_edge(uint32_t mask)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	mask &= EXTI_EDGE_REG_MASK;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000896:	f423 0308 	bic.w	r3, r3, #8912896	; 0x880000
 800089a:	607b      	str	r3, [r7, #4]
	EXTI_BASE(EXTI_RTSR) |= mask;
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <set_exti_rising_edge+0x2c>)
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	4904      	ldr	r1, [pc, #16]	; (80008b4 <set_exti_rising_edge+0x2c>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	600b      	str	r3, [r1, #0]
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	40013c08 	.word	0x40013c08

080008b8 <clear_exti_rising_edge>:

static void clear_exti_rising_edge(uint32_t mask)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	mask &= EXTI_EDGE_REG_MASK;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80008c6:	f423 0308 	bic.w	r3, r3, #8912896	; 0x880000
 80008ca:	607b      	str	r3, [r7, #4]
	EXTI_BASE(EXTI_RTSR) &= ~mask;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <clear_exti_rising_edge+0x30>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	43db      	mvns	r3, r3
 80008d4:	4904      	ldr	r1, [pc, #16]	; (80008e8 <clear_exti_rising_edge+0x30>)
 80008d6:	4013      	ands	r3, r2
 80008d8:	600b      	str	r3, [r1, #0]
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40013c08 	.word	0x40013c08

080008ec <set_exti_falling_edge>:
{
	return EXTI_BASE(EXTI_RTSR);
}

static void set_exti_falling_edge(uint32_t mask)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	mask &= EXTI_EDGE_REG_MASK;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80008fa:	f423 0308 	bic.w	r3, r3, #8912896	; 0x880000
 80008fe:	607b      	str	r3, [r7, #4]
	EXTI_BASE(EXTI_FTSR) |= mask;
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <set_exti_falling_edge+0x2c>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	4904      	ldr	r1, [pc, #16]	; (8000918 <set_exti_falling_edge+0x2c>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4313      	orrs	r3, r2
 800090a:	600b      	str	r3, [r1, #0]
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	40013c0c 	.word	0x40013c0c

0800091c <clear_exti_falling_edge>:

static void clear_exti_falling_edge(uint32_t mask)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	mask &= EXTI_EDGE_REG_MASK;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800092a:	f423 0308 	bic.w	r3, r3, #8912896	; 0x880000
 800092e:	607b      	str	r3, [r7, #4]
	EXTI_BASE(EXTI_FTSR) &= ~mask;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <clear_exti_falling_edge+0x30>)
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	43db      	mvns	r3, r3
 8000938:	4904      	ldr	r1, [pc, #16]	; (800094c <clear_exti_falling_edge+0x30>)
 800093a:	4013      	ands	r3, r2
 800093c:	600b      	str	r3, [r1, #0]
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40013c0c 	.word	0x40013c0c

08000950 <clear_exti_pending>:
{
	return EXTI_BASE(EXTI_PR);
}

static void clear_exti_pending(uint32_t mask)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	mask &= EXTI_VALID_MASK;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800095e:	607b      	str	r3, [r7, #4]
	EXTI_BASE(EXTI_PR) = mask;
 8000960:	4a04      	ldr	r2, [pc, #16]	; (8000974 <clear_exti_pending+0x24>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6013      	str	r3, [r2, #0]
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40013c14 	.word	0x40013c14

08000978 <configure_exti_channel>:

static void configure_exti_channel(bool unmask, void (*callback_unmask)(uint32_t), void (*callback_mask)(uint32_t), uint32_t mask)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	60b9      	str	r1, [r7, #8]
 8000980:	607a      	str	r2, [r7, #4]
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	4603      	mov	r3, r0
 8000986:	73fb      	strb	r3, [r7, #15]
	if (unmask)
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d003      	beq.n	8000996 <configure_exti_channel+0x1e>
	{
		callback_unmask(mask);
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	6838      	ldr	r0, [r7, #0]
 8000992:	4798      	blx	r3
	}
	else
	{
		callback_mask(mask);
	}
}
 8000994:	e002      	b.n	800099c <configure_exti_channel+0x24>
		callback_mask(mask);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6838      	ldr	r0, [r7, #0]
 800099a:	4798      	blx	r3
}
 800099c:	bf00      	nop
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <config_gpio_exti>:

static void config_gpio_exti(exti_config_t config)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	463b      	mov	r3, r7
 80009ac:	e883 0003 	stmia.w	r3, {r0, r1}
	uint32_t mask = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
	start_sysconfig();
 80009b4:	f001 fe18 	bl	80025e8 <start_sysconfig>
	configure_exti_line(config.exti_gpio);
 80009b8:	6838      	ldr	r0, [r7, #0]
 80009ba:	f001 fe1e 	bl	80025fa <configure_exti_line>
	SET_BIT(mask, config.exti_gpio.pin);
 80009be:	783b      	ldrb	r3, [r7, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	2301      	movs	r3, #1
 80009c4:	4093      	lsls	r3, r2
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	60fb      	str	r3, [r7, #12]

	configure_exti_channel(config.unmask_int, set_exti_int_mask, clear_exti_int_mask, mask);
 80009cc:	7938      	ldrb	r0, [r7, #4]
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	4a0c      	ldr	r2, [pc, #48]	; (8000a04 <config_gpio_exti+0x60>)
 80009d2:	490d      	ldr	r1, [pc, #52]	; (8000a08 <config_gpio_exti+0x64>)
 80009d4:	f7ff ffd0 	bl	8000978 <configure_exti_channel>
	configure_exti_channel(config.unmask_event, set_exti_event_mask, clear_exti_event_mask, mask);
 80009d8:	7978      	ldrb	r0, [r7, #5]
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	4a0b      	ldr	r2, [pc, #44]	; (8000a0c <config_gpio_exti+0x68>)
 80009de:	490c      	ldr	r1, [pc, #48]	; (8000a10 <config_gpio_exti+0x6c>)
 80009e0:	f7ff ffca 	bl	8000978 <configure_exti_channel>
	configure_exti_channel(config.rising_edge, set_exti_rising_edge, clear_exti_rising_edge, mask);
 80009e4:	79b8      	ldrb	r0, [r7, #6]
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	4a0a      	ldr	r2, [pc, #40]	; (8000a14 <config_gpio_exti+0x70>)
 80009ea:	490b      	ldr	r1, [pc, #44]	; (8000a18 <config_gpio_exti+0x74>)
 80009ec:	f7ff ffc4 	bl	8000978 <configure_exti_channel>
	configure_exti_channel(config.falling_edge, set_exti_falling_edge, clear_exti_falling_edge, mask);
 80009f0:	79f8      	ldrb	r0, [r7, #7]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	4a09      	ldr	r2, [pc, #36]	; (8000a1c <config_gpio_exti+0x78>)
 80009f6:	490a      	ldr	r1, [pc, #40]	; (8000a20 <config_gpio_exti+0x7c>)
 80009f8:	f7ff ffbe 	bl	8000978 <configure_exti_channel>
}
 80009fc:	bf00      	nop
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	080007fd 	.word	0x080007fd
 8000a08:	080007d1 	.word	0x080007d1
 8000a0c:	08000859 	.word	0x08000859
 8000a10:	0800082d 	.word	0x0800082d
 8000a14:	080008b9 	.word	0x080008b9
 8000a18:	08000889 	.word	0x08000889
 8000a1c:	0800091d 	.word	0x0800091d
 8000a20:	080008ed 	.word	0x080008ed

08000a24 <config_special_exti>:

static void config_special_exti(exti_config_t config)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint32_t mask = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]

	SET_BIT(mask, config.exti_line);
 8000a34:	783b      	ldrb	r3, [r7, #0]
 8000a36:	461a      	mov	r2, r3
 8000a38:	2301      	movs	r3, #1
 8000a3a:	4093      	lsls	r3, r2
 8000a3c:	68fa      	ldr	r2, [r7, #12]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	60fb      	str	r3, [r7, #12]

	configure_exti_channel(config.unmask_int, set_exti_int_mask, clear_exti_int_mask, mask);
 8000a42:	7938      	ldrb	r0, [r7, #4]
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	4a0d      	ldr	r2, [pc, #52]	; (8000a7c <config_special_exti+0x58>)
 8000a48:	490d      	ldr	r1, [pc, #52]	; (8000a80 <config_special_exti+0x5c>)
 8000a4a:	f7ff ff95 	bl	8000978 <configure_exti_channel>
	configure_exti_channel(config.unmask_event, set_exti_event_mask, clear_exti_event_mask, mask);
 8000a4e:	7978      	ldrb	r0, [r7, #5]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	4a0c      	ldr	r2, [pc, #48]	; (8000a84 <config_special_exti+0x60>)
 8000a54:	490c      	ldr	r1, [pc, #48]	; (8000a88 <config_special_exti+0x64>)
 8000a56:	f7ff ff8f 	bl	8000978 <configure_exti_channel>
	configure_exti_channel(config.rising_edge, set_exti_rising_edge, clear_exti_rising_edge, mask);
 8000a5a:	79b8      	ldrb	r0, [r7, #6]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	4a0b      	ldr	r2, [pc, #44]	; (8000a8c <config_special_exti+0x68>)
 8000a60:	490b      	ldr	r1, [pc, #44]	; (8000a90 <config_special_exti+0x6c>)
 8000a62:	f7ff ff89 	bl	8000978 <configure_exti_channel>
	configure_exti_channel(config.falling_edge, set_exti_falling_edge, clear_exti_falling_edge, mask);
 8000a66:	79f8      	ldrb	r0, [r7, #7]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <config_special_exti+0x70>)
 8000a6c:	490a      	ldr	r1, [pc, #40]	; (8000a98 <config_special_exti+0x74>)
 8000a6e:	f7ff ff83 	bl	8000978 <configure_exti_channel>
}
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	080007fd 	.word	0x080007fd
 8000a80:	080007d1 	.word	0x080007d1
 8000a84:	08000859 	.word	0x08000859
 8000a88:	0800082d 	.word	0x0800082d
 8000a8c:	080008b9 	.word	0x080008b9
 8000a90:	08000889 	.word	0x08000889
 8000a94:	0800091d 	.word	0x0800091d
 8000a98:	080008ed 	.word	0x080008ed

08000a9c <config_exti>:

void config_exti(exti_config_t config)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	e883 0003 	stmia.w	r3, {r0, r1}
	if (config.exti_line >= PINS_PER_BANK)
 8000aa8:	783b      	ldrb	r3, [r7, #0]
 8000aaa:	2b0f      	cmp	r3, #15
 8000aac:	d905      	bls.n	8000aba <config_exti+0x1e>
	{
		config_special_exti(config);
 8000aae:	463b      	mov	r3, r7
 8000ab0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ab4:	f7ff ffb6 	bl	8000a24 <config_special_exti>
	}
	else
	{
		config_gpio_exti(config);
	}
}
 8000ab8:	e004      	b.n	8000ac4 <config_exti+0x28>
		config_gpio_exti(config);
 8000aba:	463b      	mov	r3, r7
 8000abc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ac0:	f7ff ff70 	bl	80009a4 <config_gpio_exti>
}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <generate_channel_mask>:
	SET_BIT(mask, channel);
	clear_exti_pending(mask);
}

static uint32_t generate_channel_mask(uint8_t channel)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	uint32_t mask = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
	if (channel < EXTI_CHANNELS)
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	2b16      	cmp	r3, #22
 8000ade:	d806      	bhi.n	8000aee <generate_channel_mask+0x22>
	{
		SET_BIT(mask, channel);
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	60fb      	str	r3, [r7, #12]
	}
	return mask;
 8000aee:	68fb      	ldr	r3, [r7, #12]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <acknowledge_multiple_exti_events>:

void acknowledge_multiple_exti_events(uint8_t channel0, uint8_t channel1, uint8_t channel2, uint8_t channel3, uint8_t channel4, uint8_t channel5)
{
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4604      	mov	r4, r0
 8000b04:	4608      	mov	r0, r1
 8000b06:	4611      	mov	r1, r2
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4623      	mov	r3, r4
 8000b0c:	71fb      	strb	r3, [r7, #7]
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71bb      	strb	r3, [r7, #6]
 8000b12:	460b      	mov	r3, r1
 8000b14:	717b      	strb	r3, [r7, #5]
 8000b16:	4613      	mov	r3, r2
 8000b18:	713b      	strb	r3, [r7, #4]
	uint32_t mask = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]

	mask |= generate_channel_mask(channel0);
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ffd3 	bl	8000acc <generate_channel_mask>
 8000b26:	4602      	mov	r2, r0
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	60fb      	str	r3, [r7, #12]
	mask |= generate_channel_mask(channel1);
 8000b2e:	79bb      	ldrb	r3, [r7, #6]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ffcb 	bl	8000acc <generate_channel_mask>
 8000b36:	4602      	mov	r2, r0
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	60fb      	str	r3, [r7, #12]
	mask |= generate_channel_mask(channel2);
 8000b3e:	797b      	ldrb	r3, [r7, #5]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ffc3 	bl	8000acc <generate_channel_mask>
 8000b46:	4602      	mov	r2, r0
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]
	mask |= generate_channel_mask(channel3);
 8000b4e:	793b      	ldrb	r3, [r7, #4]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ffbb 	bl	8000acc <generate_channel_mask>
 8000b56:	4602      	mov	r2, r0
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]
	mask |= generate_channel_mask(channel4);
 8000b5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff ffb2 	bl	8000acc <generate_channel_mask>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	60fb      	str	r3, [r7, #12]
	mask |= generate_channel_mask(channel5);
 8000b70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ffa9 	bl	8000acc <generate_channel_mask>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]

	clear_exti_pending(mask);
 8000b82:	68f8      	ldr	r0, [r7, #12]
 8000b84:	f7ff fee4 	bl	8000950 <clear_exti_pending>
}
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd90      	pop	{r4, r7, pc}

08000b90 <controlReg1_clkdiv>:
#define GEN_TIMER_SR_RESERVED BITF | BITE | BITD | BIT8 | BIT7 | BIT5
#define GEN_TIMER_EGR_RESERVED BITF | BITE | BITD | BITC | BITB | BITA | BIT9 | BIT8 | BIT7 | BIT5

// Control reg 1
static void controlReg1_clkdiv(general_timers_32bit_t timer, general_timer_clkdiv_t div)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	460a      	mov	r2, r1
 8000b9a:	80fb      	strh	r3, [r7, #6]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	717b      	strb	r3, [r7, #5]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_CR1) &= ~(BIT9 | BIT8);
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000bb2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000bb6:	601a      	str	r2, [r3, #0]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_CR1) |= ((uint32_t)div) << 8;
 8000bb8:	88fb      	ldrh	r3, [r7, #6]
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000bc0:	6819      	ldr	r1, [r3, #0]
 8000bc2:	797b      	ldrb	r3, [r7, #5]
 8000bc4:	021a      	lsls	r2, r3, #8
 8000bc6:	88fb      	ldrh	r3, [r7, #6]
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	601a      	str	r2, [r3, #0]
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <controlReg1_autoreload>:

static void controlReg1_autoreload(general_timers_32bit_t timer, bool enable)
{
 8000bde:	b480      	push	{r7}
 8000be0:	b083      	sub	sp, #12
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	460a      	mov	r2, r1
 8000be8:	80fb      	strh	r3, [r7, #6]
 8000bea:	4613      	mov	r3, r2
 8000bec:	717b      	strb	r3, [r7, #5]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_CR1) &= ~BIT7;
 8000bee:	88fb      	ldrh	r3, [r7, #6]
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	88fb      	ldrh	r3, [r7, #6]
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c04:	601a      	str	r2, [r3, #0]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_CR1) |= ((uint32_t)enable) << 7;
 8000c06:	88fb      	ldrh	r3, [r7, #6]
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c0e:	6819      	ldr	r1, [r3, #0]
 8000c10:	797b      	ldrb	r3, [r7, #5]
 8000c12:	01da      	lsls	r2, r3, #7
 8000c14:	88fb      	ldrh	r3, [r7, #6]
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	601a      	str	r2, [r3, #0]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <controlReg1_centerAligned>:

static void controlReg1_centerAligned(general_timers_32bit_t timer, uint8_t mode)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	460a      	mov	r2, r1
 8000c36:	80fb      	strh	r3, [r7, #6]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	717b      	strb	r3, [r7, #5]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_CR1) &= ~(BIT6 | BIT5);
 8000c3c:	88fb      	ldrh	r3, [r7, #6]
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	88fb      	ldrh	r3, [r7, #6]
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000c52:	601a      	str	r2, [r3, #0]
	mode &= (BIT1 | BIT0);
 8000c54:	797b      	ldrb	r3, [r7, #5]
 8000c56:	f003 0303 	and.w	r3, r3, #3
 8000c5a:	717b      	strb	r3, [r7, #5]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_CR1) |= ((uint32_t)mode) << 5;
 8000c5c:	88fb      	ldrh	r3, [r7, #6]
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c64:	6819      	ldr	r1, [r3, #0]
 8000c66:	797b      	ldrb	r3, [r7, #5]
 8000c68:	015a      	lsls	r2, r3, #5
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c72:	430a      	orrs	r2, r1
 8000c74:	601a      	str	r2, [r3, #0]
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <controlReg1_direction>:

static void controlReg1_direction(general_timers_32bit_t timer, bool dir)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	460a      	mov	r2, r1
 8000c8c:	80fb      	strh	r3, [r7, #6]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	717b      	strb	r3, [r7, #5]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_CR1) &= ~BIT4;
 8000c92:	88fb      	ldrh	r3, [r7, #6]
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	88fb      	ldrh	r3, [r7, #6]
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ca4:	f022 0210 	bic.w	r2, r2, #16
 8000ca8:	601a      	str	r2, [r3, #0]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_CR1) |= ((uint32_t)dir) << 4;
 8000caa:	88fb      	ldrh	r3, [r7, #6]
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000cb2:	6819      	ldr	r1, [r3, #0]
 8000cb4:	797b      	ldrb	r3, [r7, #5]
 8000cb6:	011a      	lsls	r2, r3, #4
 8000cb8:	88fb      	ldrh	r3, [r7, #6]
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	601a      	str	r2, [r3, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <controlReg1_one_pulse>:

static void controlReg1_one_pulse(general_timers_32bit_t timer, bool one_pulse)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	460a      	mov	r2, r1
 8000cda:	80fb      	strh	r3, [r7, #6]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	717b      	strb	r3, [r7, #5]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_CR1) &= ~BIT3;
 8000ce0:	88fb      	ldrh	r3, [r7, #6]
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	88fb      	ldrh	r3, [r7, #6]
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000cf2:	f022 0208 	bic.w	r2, r2, #8
 8000cf6:	601a      	str	r2, [r3, #0]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_CR1) |= ((uint32_t)one_pulse) << 3;
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d00:	6819      	ldr	r1, [r3, #0]
 8000d02:	797b      	ldrb	r3, [r7, #5]
 8000d04:	00da      	lsls	r2, r3, #3
 8000d06:	88fb      	ldrh	r3, [r7, #6]
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	601a      	str	r2, [r3, #0]
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <controlReg1_update_request_source>:

static void controlReg1_update_request_source(general_timers_32bit_t timer, bool update_request_source)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	4603      	mov	r3, r0
 8000d26:	460a      	mov	r2, r1
 8000d28:	80fb      	strh	r3, [r7, #6]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	717b      	strb	r3, [r7, #5]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_CR1) &= ~BIT2;
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	88fb      	ldrh	r3, [r7, #6]
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d40:	f022 0204 	bic.w	r2, r2, #4
 8000d44:	601a      	str	r2, [r3, #0]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_CR1) |= ((uint32_t)update_request_source) << 2;
 8000d46:	88fb      	ldrh	r3, [r7, #6]
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d4e:	6819      	ldr	r1, [r3, #0]
 8000d50:	797b      	ldrb	r3, [r7, #5]
 8000d52:	009a      	lsls	r2, r3, #2
 8000d54:	88fb      	ldrh	r3, [r7, #6]
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	601a      	str	r2, [r3, #0]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <controlReg1_update_disable>:

static void controlReg1_update_disable(general_timers_32bit_t timer, bool disable)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	460a      	mov	r2, r1
 8000d76:	80fb      	strh	r3, [r7, #6]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	717b      	strb	r3, [r7, #5]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_CR1) &= ~BIT1;
 8000d7c:	88fb      	ldrh	r3, [r7, #6]
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	88fb      	ldrh	r3, [r7, #6]
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d8e:	f022 0202 	bic.w	r2, r2, #2
 8000d92:	601a      	str	r2, [r3, #0]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_CR1) |= ((uint32_t)disable) << 1;
 8000d94:	88fb      	ldrh	r3, [r7, #6]
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d9c:	6819      	ldr	r1, [r3, #0]
 8000d9e:	797b      	ldrb	r3, [r7, #5]
 8000da0:	005a      	lsls	r2, r3, #1
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000daa:	430a      	orrs	r2, r1
 8000dac:	601a      	str	r2, [r3, #0]
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <enableTimer>:

void enableTimer(general_timers_32bit_t timer)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	80fb      	strh	r3, [r7, #6]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_CR1) |= BIT0;
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	88fb      	ldrh	r3, [r7, #6]
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000dd6:	f042 0201 	orr.w	r2, r2, #1
 8000dda:	601a      	str	r2, [r3, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <disableTimer>:

void disableTimer(general_timers_32bit_t timer)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	80fb      	strh	r3, [r7, #6]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_CR1) &= ~BIT0;
 8000df2:	88fb      	ldrh	r3, [r7, #6]
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e04:	f022 0201 	bic.w	r2, r2, #1
 8000e08:	601a      	str	r2, [r3, #0]
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <controlReg2_selection>:

// Control reg 2
static void controlReg2_selection(general_timers_32bit_t timer, bool xor)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	460a      	mov	r2, r1
 8000e20:	80fb      	strh	r3, [r7, #6]
 8000e22:	4613      	mov	r3, r2
 8000e24:	717b      	strb	r3, [r7, #5]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_CR2) &= ~BIT7;
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	3301      	adds	r3, #1
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e40:	601a      	str	r2, [r3, #0]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_CR2) |= ((uint32_t)xor) << 7;
 8000e42:	88fb      	ldrh	r3, [r7, #6]
 8000e44:	3301      	adds	r3, #1
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e4c:	6819      	ldr	r1, [r3, #0]
 8000e4e:	797b      	ldrb	r3, [r7, #5]
 8000e50:	01da      	lsls	r2, r3, #7
 8000e52:	88fb      	ldrh	r3, [r7, #6]
 8000e54:	3301      	adds	r3, #1
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	601a      	str	r2, [r3, #0]
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <controlReg2_master_mode_selection>:

static void controlReg2_master_mode_selection(general_timers_32bit_t timer, uint8_t mode)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	460a      	mov	r2, r1
 8000e76:	80fb      	strh	r3, [r7, #6]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	717b      	strb	r3, [r7, #5]
	mode &= (BIT2 | BIT1 | BIT0);
 8000e7c:	797b      	ldrb	r3, [r7, #5]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	717b      	strb	r3, [r7, #5]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_CR2) &= ~(BIT6 | BIT5 | BIT4);
 8000e84:	88fb      	ldrh	r3, [r7, #6]
 8000e86:	3301      	adds	r3, #1
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	88fb      	ldrh	r3, [r7, #6]
 8000e92:	3301      	adds	r3, #1
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e9a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000e9e:	601a      	str	r2, [r3, #0]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_CR2) |= ((uint32_t)mode) << 4;
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000eaa:	6819      	ldr	r1, [r3, #0]
 8000eac:	797b      	ldrb	r3, [r7, #5]
 8000eae:	011a      	lsls	r2, r3, #4
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	601a      	str	r2, [r3, #0]
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <controlReg2_capture_compare_dma_select>:

static void controlReg2_capture_compare_dma_select(general_timers_32bit_t timer, bool update)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	460a      	mov	r2, r1
 8000ed4:	80fb      	strh	r3, [r7, #6]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	717b      	strb	r3, [r7, #5]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_CR2) &= ~BIT3;
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	3301      	adds	r3, #1
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ef0:	f022 0208 	bic.w	r2, r2, #8
 8000ef4:	601a      	str	r2, [r3, #0]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_CR2) |= ((uint32_t)update) << 3;
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f00:	6819      	ldr	r1, [r3, #0]
 8000f02:	797b      	ldrb	r3, [r7, #5]
 8000f04:	00da      	lsls	r2, r3, #3
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f10:	430a      	orrs	r2, r1
 8000f12:	601a      	str	r2, [r3, #0]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <configureSlave>:

// slave mode control
static void configureSlave(general_timers_32bit_t timer, timer_slave_attr_t slaveAttr)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	e883 0006 	stmia.w	r3, {r1, r2}
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	81fb      	strh	r3, [r7, #14]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_SMCR) = 0;
 8000f30:	89fb      	ldrh	r3, [r7, #14]
 8000f32:	3302      	adds	r3, #2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_SMCR) |= ((uint32_t)slaveAttr.ETP) << 15;
 8000f3e:	89fb      	ldrh	r3, [r7, #14]
 8000f40:	3302      	adds	r3, #2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f48:	6819      	ldr	r1, [r3, #0]
 8000f4a:	793b      	ldrb	r3, [r7, #4]
 8000f4c:	03da      	lsls	r2, r3, #15
 8000f4e:	89fb      	ldrh	r3, [r7, #14]
 8000f50:	3302      	adds	r3, #2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	601a      	str	r2, [r3, #0]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_SMCR) |= ((uint32_t)slaveAttr.ECE) << 14;
 8000f5c:	89fb      	ldrh	r3, [r7, #14]
 8000f5e:	3302      	adds	r3, #2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f66:	6819      	ldr	r1, [r3, #0]
 8000f68:	797b      	ldrb	r3, [r7, #5]
 8000f6a:	039a      	lsls	r2, r3, #14
 8000f6c:	89fb      	ldrh	r3, [r7, #14]
 8000f6e:	3302      	adds	r3, #2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f76:	430a      	orrs	r2, r1
 8000f78:	601a      	str	r2, [r3, #0]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_SMCR) |= (((uint32_t)slaveAttr.ETPS) & (BIT1 | BIT0)) << 12;
 8000f7a:	89fb      	ldrh	r3, [r7, #14]
 8000f7c:	3302      	adds	r3, #2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f84:	6819      	ldr	r1, [r3, #0]
 8000f86:	79bb      	ldrb	r3, [r7, #6]
 8000f88:	031b      	lsls	r3, r3, #12
 8000f8a:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 8000f8e:	89fb      	ldrh	r3, [r7, #14]
 8000f90:	3302      	adds	r3, #2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	601a      	str	r2, [r3, #0]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_SMCR) |= (((uint32_t)slaveAttr.ETF) & (BIT3 | BIT2 | BIT1 | BIT0)) << 8;
 8000f9c:	89fb      	ldrh	r3, [r7, #14]
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000fa6:	6819      	ldr	r1, [r3, #0]
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8000fb0:	89fb      	ldrh	r3, [r7, #14]
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	601a      	str	r2, [r3, #0]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_SMCR) |= ((uint32_t)slaveAttr.MSM) << 7;
 8000fbe:	89fb      	ldrh	r3, [r7, #14]
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000fc8:	6819      	ldr	r1, [r3, #0]
 8000fca:	7a3b      	ldrb	r3, [r7, #8]
 8000fcc:	01da      	lsls	r2, r3, #7
 8000fce:	89fb      	ldrh	r3, [r7, #14]
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	601a      	str	r2, [r3, #0]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_SMCR) |= (((uint32_t)slaveAttr.TS) & (BIT2 | BIT1 | BIT0)) << 4;
 8000fdc:	89fb      	ldrh	r3, [r7, #14]
 8000fde:	3302      	adds	r3, #2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000fe6:	6819      	ldr	r1, [r3, #0]
 8000fe8:	7a7b      	ldrb	r3, [r7, #9]
 8000fea:	011b      	lsls	r3, r3, #4
 8000fec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8000ff0:	89fb      	ldrh	r3, [r7, #14]
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	601a      	str	r2, [r3, #0]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_SMCR) |= (((uint32_t)slaveAttr.SMS) & (BIT2 | BIT1 | BIT0));
 8000ffe:	89fb      	ldrh	r3, [r7, #14]
 8001000:	3302      	adds	r3, #2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001008:	6819      	ldr	r1, [r3, #0]
 800100a:	7abb      	ldrb	r3, [r7, #10]
 800100c:	f003 0207 	and.w	r2, r3, #7
 8001010:	89fb      	ldrh	r3, [r7, #14]
 8001012:	3302      	adds	r3, #2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800101a:	430a      	orrs	r2, r1
 800101c:	601a      	str	r2, [r3, #0]
}
 800101e:	bf00      	nop
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <enableTimerInterrupts>:

// Interrupt enable register
static void enableTimerInterrupts(general_timers_32bit_t timer, uint16_t mask)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	460a      	mov	r2, r1
 8001034:	80fb      	strh	r3, [r7, #6]
 8001036:	4613      	mov	r3, r2
 8001038:	80bb      	strh	r3, [r7, #4]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_DIER) &= GEN_TIMER_INTE_RESERVED;
 800103a:	88fb      	ldrh	r3, [r7, #6]
 800103c:	3303      	adds	r3, #3
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001044:	6819      	ldr	r1, [r3, #0]
 8001046:	88fb      	ldrh	r3, [r7, #6]
 8001048:	3303      	adds	r3, #3
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8001050:	f24a 03a0 	movw	r3, #41120	; 0xa0a0
 8001054:	400b      	ands	r3, r1
 8001056:	6013      	str	r3, [r2, #0]
	mask &= ~GEN_TIMER_INTE_RESERVED;
 8001058:	88bb      	ldrh	r3, [r7, #4]
 800105a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800105e:	80bb      	strh	r3, [r7, #4]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_DIER) |= (uint32_t)mask;
 8001060:	88fb      	ldrh	r3, [r7, #6]
 8001062:	3303      	adds	r3, #3
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800106a:	6819      	ldr	r1, [r3, #0]
 800106c:	88ba      	ldrh	r2, [r7, #4]
 800106e:	88fb      	ldrh	r3, [r7, #6]
 8001070:	3303      	adds	r3, #3
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001078:	430a      	orrs	r2, r1
 800107a:	601a      	str	r2, [r3, #0]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <checkTimerStatus>:

// Interrupt status register
bool checkTimerStatus(general_timers_32bit_t timer, uint16_t mask)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	460a      	mov	r2, r1
 8001092:	80fb      	strh	r3, [r7, #6]
 8001094:	4613      	mov	r3, r2
 8001096:	80bb      	strh	r3, [r7, #4]
	uint16_t status;
	mask &= ~GEN_TIMER_SR_RESERVED;
 8001098:	88bb      	ldrh	r3, [r7, #4]
 800109a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800109e:	80bb      	strh	r3, [r7, #4]
	status = TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_SR) & mask;
 80010a0:	88fb      	ldrh	r3, [r7, #6]
 80010a2:	3304      	adds	r3, #4
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	88bb      	ldrh	r3, [r7, #4]
 80010b0:	4013      	ands	r3, r2
 80010b2:	81fb      	strh	r3, [r7, #14]
	mask = ~mask;
 80010b4:	88bb      	ldrh	r3, [r7, #4]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	80bb      	strh	r3, [r7, #4]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_SR) = mask;
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	3304      	adds	r3, #4
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80010c4:	88ba      	ldrh	r2, [r7, #4]
 80010c6:	601a      	str	r2, [r3, #0]
	return status != 0;
 80010c8:	89fb      	ldrh	r3, [r7, #14]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	bf14      	ite	ne
 80010ce:	2301      	movne	r3, #1
 80010d0:	2300      	moveq	r3, #0
 80010d2:	b2db      	uxtb	r3, r3
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <configureCaptureCompareModeAsOutput>:
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_EGR) |= mask;
}

// Capture/compare mode registers
static void configureCaptureCompareModeAsOutput(general_timers_32bit_t timer, outputCompareMode_t compareAttr, uint8_t channel)
{
 80010e0:	b490      	push	{r4, r7}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4604      	mov	r4, r0
 80010e8:	4638      	mov	r0, r7
 80010ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80010ee:	4623      	mov	r3, r4
 80010f0:	81fb      	strh	r3, [r7, #14]
	uint32_t reg = (channel < 3) ? TIMER32BIT_CCMR1 : TIMER32BIT_CCMR2;
 80010f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d801      	bhi.n	80010fe <configureCaptureCompareModeAsOutput+0x1e>
 80010fa:	2306      	movs	r3, #6
 80010fc:	e000      	b.n	8001100 <configureCaptureCompareModeAsOutput+0x20>
 80010fe:	2307      	movs	r3, #7
 8001100:	617b      	str	r3, [r7, #20]
	uint32_t shift = (channel & BIT0) ? 0 : 8;
 8001102:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <configureCaptureCompareModeAsOutput+0x32>
 800110e:	2300      	movs	r3, #0
 8001110:	e000      	b.n	8001114 <configureCaptureCompareModeAsOutput+0x34>
 8001112:	2308      	movs	r3, #8
 8001114:	613b      	str	r3, [r7, #16]
	TIMER_BASE_32BIT((uint32_t)timer, reg) &= ~(0xFF << shift);
 8001116:	89fa      	ldrh	r2, [r7, #14]
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	4413      	add	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	21ff      	movs	r1, #255	; 0xff
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	fa01 f303 	lsl.w	r3, r1, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	4618      	mov	r0, r3
 8001130:	89f9      	ldrh	r1, [r7, #14]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	440b      	add	r3, r1
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800113c:	4002      	ands	r2, r0
 800113e:	601a      	str	r2, [r3, #0]
	TIMER_BASE_32BIT((uint32_t)timer, reg) |= ((uint32_t)compareAttr.outputCaptureClearEnable) << (7 + shift);
 8001140:	89fa      	ldrh	r2, [r7, #14]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	4413      	add	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800114c:	6819      	ldr	r1, [r3, #0]
 800114e:	783b      	ldrb	r3, [r7, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	3307      	adds	r3, #7
 8001156:	409a      	lsls	r2, r3
 8001158:	89f8      	ldrh	r0, [r7, #14]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	4403      	add	r3, r0
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001164:	430a      	orrs	r2, r1
 8001166:	601a      	str	r2, [r3, #0]
	TIMER_BASE_32BIT((uint32_t)timer, reg) |= (((uint32_t)compareAttr.outputCompareMode) & (BIT2 | BIT1 | BIT0)) << (4 + shift);
 8001168:	89fa      	ldrh	r2, [r7, #14]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	4413      	add	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001174:	6819      	ldr	r1, [r3, #0]
 8001176:	787b      	ldrb	r3, [r7, #1]
 8001178:	f003 0207 	and.w	r2, r3, #7
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	3304      	adds	r3, #4
 8001180:	409a      	lsls	r2, r3
 8001182:	89f8      	ldrh	r0, [r7, #14]
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	4403      	add	r3, r0
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800118e:	430a      	orrs	r2, r1
 8001190:	601a      	str	r2, [r3, #0]
	TIMER_BASE_32BIT((uint32_t)timer, reg) |= ((uint32_t)compareAttr.outputComparePreloadEnable) << (3 + shift);
 8001192:	89fa      	ldrh	r2, [r7, #14]
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	4413      	add	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800119e:	6819      	ldr	r1, [r3, #0]
 80011a0:	78bb      	ldrb	r3, [r7, #2]
 80011a2:	461a      	mov	r2, r3
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	3303      	adds	r3, #3
 80011a8:	409a      	lsls	r2, r3
 80011aa:	89f8      	ldrh	r0, [r7, #14]
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	4403      	add	r3, r0
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011b6:	430a      	orrs	r2, r1
 80011b8:	601a      	str	r2, [r3, #0]
	TIMER_BASE_32BIT((uint32_t)timer, reg) |= ((uint32_t)compareAttr.outputCompareFastEnable) << (2 + shift);
 80011ba:	89fa      	ldrh	r2, [r7, #14]
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	4413      	add	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011c6:	6819      	ldr	r1, [r3, #0]
 80011c8:	78fb      	ldrb	r3, [r7, #3]
 80011ca:	461a      	mov	r2, r3
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	3302      	adds	r3, #2
 80011d0:	409a      	lsls	r2, r3
 80011d2:	89f8      	ldrh	r0, [r7, #14]
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	4403      	add	r3, r0
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011de:	430a      	orrs	r2, r1
 80011e0:	601a      	str	r2, [r3, #0]
	TIMER_BASE_32BIT((uint32_t)timer, reg) |= (((uint32_t)compareAttr.captureCompareSelection) & (BIT1 | BIT0)) << shift;
 80011e2:	89fa      	ldrh	r2, [r7, #14]
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	4413      	add	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011ee:	6819      	ldr	r1, [r3, #0]
 80011f0:	793b      	ldrb	r3, [r7, #4]
 80011f2:	f003 0203 	and.w	r2, r3, #3
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	409a      	lsls	r2, r3
 80011fa:	89f8      	ldrh	r0, [r7, #14]
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	4403      	add	r3, r0
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001206:	430a      	orrs	r2, r1
 8001208:	601a      	str	r2, [r3, #0]
}
 800120a:	bf00      	nop
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bc90      	pop	{r4, r7}
 8001212:	4770      	bx	lr

08001214 <configureCaptureCompareModeAsInput>:

static void configureCaptureCompareModeAsInput(general_timers_32bit_t timer, inputCaptureMode_t captureAttr, uint8_t channel)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	80fb      	strh	r3, [r7, #6]
 8001220:	4613      	mov	r3, r2
 8001222:	717b      	strb	r3, [r7, #5]
	uint32_t reg = (channel < 3) ? TIMER32BIT_CCMR1 : TIMER32BIT_CCMR2;
 8001224:	797b      	ldrb	r3, [r7, #5]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d801      	bhi.n	800122e <configureCaptureCompareModeAsInput+0x1a>
 800122a:	2306      	movs	r3, #6
 800122c:	e000      	b.n	8001230 <configureCaptureCompareModeAsInput+0x1c>
 800122e:	2307      	movs	r3, #7
 8001230:	60fb      	str	r3, [r7, #12]
	uint32_t shift = (channel & BIT0) ? 0 : 8;
 8001232:	797b      	ldrb	r3, [r7, #5]
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <configureCaptureCompareModeAsInput+0x2c>
 800123c:	2300      	movs	r3, #0
 800123e:	e000      	b.n	8001242 <configureCaptureCompareModeAsInput+0x2e>
 8001240:	2308      	movs	r3, #8
 8001242:	60bb      	str	r3, [r7, #8]
	TIMER_BASE_32BIT((uint32_t)timer, reg) &= ~(0xFF << shift);
 8001244:	88fa      	ldrh	r2, [r7, #6]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4413      	add	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	21ff      	movs	r1, #255	; 0xff
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	4618      	mov	r0, r3
 800125e:	88f9      	ldrh	r1, [r7, #6]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	440b      	add	r3, r1
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800126a:	4002      	ands	r2, r0
 800126c:	601a      	str	r2, [r3, #0]
	TIMER_BASE_32BIT((uint32_t)timer, reg) |= (((uint32_t)captureAttr.inputCaptureFilter) & (BIT3 | BIT2 | BIT1 | BIT0)) << (4 + shift);
 800126e:	88fa      	ldrh	r2, [r7, #6]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800127a:	6819      	ldr	r1, [r3, #0]
 800127c:	783b      	ldrb	r3, [r7, #0]
 800127e:	f003 020f 	and.w	r2, r3, #15
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	3304      	adds	r3, #4
 8001286:	409a      	lsls	r2, r3
 8001288:	88f8      	ldrh	r0, [r7, #6]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4403      	add	r3, r0
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001294:	430a      	orrs	r2, r1
 8001296:	601a      	str	r2, [r3, #0]
	TIMER_BASE_32BIT((uint32_t)timer, reg) |= (((uint32_t)captureAttr.inputCapturePrescaler) & (BIT1 | BIT0)) << (2 + shift);
 8001298:	88fa      	ldrh	r2, [r7, #6]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4413      	add	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012a4:	6819      	ldr	r1, [r3, #0]
 80012a6:	787b      	ldrb	r3, [r7, #1]
 80012a8:	f003 0203 	and.w	r2, r3, #3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	3302      	adds	r3, #2
 80012b0:	409a      	lsls	r2, r3
 80012b2:	88f8      	ldrh	r0, [r7, #6]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4403      	add	r3, r0
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012be:	430a      	orrs	r2, r1
 80012c0:	601a      	str	r2, [r3, #0]
	TIMER_BASE_32BIT((uint32_t)timer, reg) |= (((uint32_t)captureAttr.captureCompareSelection) & (BIT1 | BIT0)) << shift;
 80012c2:	88fa      	ldrh	r2, [r7, #6]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012ce:	6819      	ldr	r1, [r3, #0]
 80012d0:	78bb      	ldrb	r3, [r7, #2]
 80012d2:	f003 0203 	and.w	r2, r3, #3
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	409a      	lsls	r2, r3
 80012da:	88f8      	ldrh	r0, [r7, #6]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4403      	add	r3, r0
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012e6:	430a      	orrs	r2, r1
 80012e8:	601a      	str	r2, [r3, #0]
}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <configureCapturePolarity>:
	uint32_t mask = BIT0 << ((channel - 1) << 2);
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_CCER) &= ~mask;
}

static void configureCapturePolarity(general_timers_32bit_t timer, uint8_t channel, uint8_t polarity)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	80fb      	strh	r3, [r7, #6]
 8001302:	460b      	mov	r3, r1
 8001304:	717b      	strb	r3, [r7, #5]
 8001306:	4613      	mov	r3, r2
 8001308:	713b      	strb	r3, [r7, #4]
	// Look at bits in CCMR
	uint32_t mask = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]

	switch(polarity)
 800130e:	793b      	ldrb	r3, [r7, #4]
 8001310:	2b02      	cmp	r3, #2
 8001312:	d008      	beq.n	8001326 <configureCapturePolarity+0x2e>
 8001314:	2b02      	cmp	r3, #2
 8001316:	dc09      	bgt.n	800132c <configureCapturePolarity+0x34>
 8001318:	2b00      	cmp	r3, #0
 800131a:	d00d      	beq.n	8001338 <configureCapturePolarity+0x40>
 800131c:	2b01      	cmp	r3, #1
 800131e:	d105      	bne.n	800132c <configureCapturePolarity+0x34>
	{
	case CAPTURE_NONINVERTING_RISING:
		break;
	case CAPTURE_INVERTING_FALLING: mask = BIT1;
 8001320:	2302      	movs	r3, #2
 8001322:	60fb      	str	r3, [r7, #12]
		break;
 8001324:	e009      	b.n	800133a <configureCapturePolarity+0x42>
	case CAPTURE_INVERTING_BOTH_EDGES: mask = BIT1 | BIT3;
 8001326:	230a      	movs	r3, #10
 8001328:	60fb      	str	r3, [r7, #12]
		break;
 800132a:	e006      	b.n	800133a <configureCapturePolarity+0x42>
	default:
		assert(0);
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <configureCapturePolarity+0xa0>)
 800132e:	4a1b      	ldr	r2, [pc, #108]	; (800139c <configureCapturePolarity+0xa4>)
 8001330:	21cb      	movs	r1, #203	; 0xcb
 8001332:	481b      	ldr	r0, [pc, #108]	; (80013a0 <configureCapturePolarity+0xa8>)
 8001334:	f003 fe8e 	bl	8005054 <__assert_func>
		break;
 8001338:	bf00      	nop
	}

	mask <<= (channel - 1) << 2;
 800133a:	797b      	ldrb	r3, [r7, #5]
 800133c:	3b01      	subs	r3, #1
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	60fb      	str	r3, [r7, #12]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_CCER) &= ~((BIT1 | BIT3) << (channel - 1) << 2);
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	3308      	adds	r3, #8
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	797b      	ldrb	r3, [r7, #5]
 8001356:	3b01      	subs	r3, #1
 8001358:	210a      	movs	r1, #10
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	43db      	mvns	r3, r3
 8001362:	4619      	mov	r1, r3
 8001364:	88fb      	ldrh	r3, [r7, #6]
 8001366:	3308      	adds	r3, #8
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800136e:	400a      	ands	r2, r1
 8001370:	601a      	str	r2, [r3, #0]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_CCER) |= mask;
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	3308      	adds	r3, #8
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800137c:	6819      	ldr	r1, [r3, #0]
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	3308      	adds	r3, #8
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	430a      	orrs	r2, r1
 800138c:	601a      	str	r2, [r3, #0]
}
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	0800607c 	.word	0x0800607c
 800139c:	080061ac 	.word	0x080061ac
 80013a0:	08006080 	.word	0x08006080

080013a4 <configureComparePolarity>:

static void configureComparePolarity(general_timers_32bit_t timer, uint8_t channel, uint8_t polarity)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	80fb      	strh	r3, [r7, #6]
 80013ae:	460b      	mov	r3, r1
 80013b0:	717b      	strb	r3, [r7, #5]
 80013b2:	4613      	mov	r3, r2
 80013b4:	713b      	strb	r3, [r7, #4]
	// Look at bits in CCMR
	uint32_t mask = (polarity & 0x1 << 1) << ((channel - 1) << 2);
 80013b6:	793b      	ldrb	r3, [r7, #4]
 80013b8:	f003 0202 	and.w	r2, r3, #2
 80013bc:	797b      	ldrb	r3, [r7, #5]
 80013be:	3b01      	subs	r3, #1
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	60fb      	str	r3, [r7, #12]

	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_CCER) &= ~((BIT1 | BIT3) << (channel - 1) << 2);
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	3308      	adds	r3, #8
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	797b      	ldrb	r3, [r7, #5]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	210a      	movs	r1, #10
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	43db      	mvns	r3, r3
 80013e2:	4619      	mov	r1, r3
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	3308      	adds	r3, #8
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80013ee:	400a      	ands	r2, r1
 80013f0:	601a      	str	r2, [r3, #0]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_CCER) |= mask;
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	3308      	adds	r3, #8
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80013fc:	6819      	ldr	r1, [r3, #0]
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	3308      	adds	r3, #8
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001408:	68fa      	ldr	r2, [r7, #12]
 800140a:	430a      	orrs	r2, r1
 800140c:	601a      	str	r2, [r3, #0]
}
 800140e:	bf00      	nop
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <setPrescalar>:
{
	return (uint16_t)TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_CNT);
}

static void setPrescalar(general_timers_32bit_t timer, uint16_t value)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	460a      	mov	r2, r1
 8001424:	80fb      	strh	r3, [r7, #6]
 8001426:	4613      	mov	r3, r2
 8001428:	80bb      	strh	r3, [r7, #4]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_PSC) = (uint32_t)value;
 800142a:	88fb      	ldrh	r3, [r7, #6]
 800142c:	330a      	adds	r3, #10
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001434:	88ba      	ldrh	r2, [r7, #4]
 8001436:	601a      	str	r2, [r3, #0]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <setAutoReload>:

static void setAutoReload(general_timers_32bit_t timer, uint16_t value)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	460a      	mov	r2, r1
 800144e:	80fb      	strh	r3, [r7, #6]
 8001450:	4613      	mov	r3, r2
 8001452:	80bb      	strh	r3, [r7, #4]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_ARR) = (uint32_t)value;
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	330b      	adds	r3, #11
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800145e:	88ba      	ldrh	r2, [r7, #4]
 8001460:	601a      	str	r2, [r3, #0]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <setCompare>:

static void setCompare(general_timers_32bit_t timer, uint8_t channel, uint32_t value)
{
 800146e:	b480      	push	{r7}
 8001470:	b085      	sub	sp, #20
 8001472:	af00      	add	r7, sp, #0
 8001474:	4603      	mov	r3, r0
 8001476:	603a      	str	r2, [r7, #0]
 8001478:	80fb      	strh	r3, [r7, #6]
 800147a:	460b      	mov	r3, r1
 800147c:	717b      	strb	r3, [r7, #5]
	uint32_t reg = TIMER32BIT_CCR1 + (uint32_t)channel - 1;
 800147e:	797b      	ldrb	r3, [r7, #5]
 8001480:	330c      	adds	r3, #12
 8001482:	60fb      	str	r3, [r7, #12]

	if (!(timer == TIMER2 || timer == TIMER5))
 8001484:	88fb      	ldrh	r3, [r7, #6]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d006      	beq.n	8001498 <setCompare+0x2a>
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001490:	d002      	beq.n	8001498 <setCompare+0x2a>
	{
		value &= 0xFFFF;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	b29b      	uxth	r3, r3
 8001496:	603b      	str	r3, [r7, #0]
	}

	TIMER_BASE_32BIT((uint32_t)timer, reg) = value;
 8001498:	88fa      	ldrh	r2, [r7, #6]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4413      	add	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	601a      	str	r2, [r3, #0]
}
 80014a8:	bf00      	nop
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <configureDMAcontrol>:
	uint32_t reg = TIMER32BIT_CCR1 + (uint32_t)channel - 1;
	return TIMER_BASE_32BIT((uint32_t)timer, reg);
}

static void configureDMAcontrol(general_timers_32bit_t timer, general_timer_attr_t attr)
{
 80014b4:	b084      	sub	sp, #16
 80014b6:	b590      	push	{r4, r7, lr}
 80014b8:	b085      	sub	sp, #20
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	4604      	mov	r4, r0
 80014be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80014c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80014c6:	4623      	mov	r3, r4
 80014c8:	80fb      	strh	r3, [r7, #6]
	uint32_t dbl, dba;
	dbl = (uint32_t)attr.dmaBurstLength;
 80014ca:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80014ce:	60fb      	str	r3, [r7, #12]
	dbl &= 0x1F;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 031f 	and.w	r3, r3, #31
 80014d6:	60fb      	str	r3, [r7, #12]
	assert(dbl < 18);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2b11      	cmp	r3, #17
 80014dc:	d906      	bls.n	80014ec <configureDMAcontrol+0x38>
 80014de:	4b21      	ldr	r3, [pc, #132]	; (8001564 <configureDMAcontrol+0xb0>)
 80014e0:	4a21      	ldr	r2, [pc, #132]	; (8001568 <configureDMAcontrol+0xb4>)
 80014e2:	f240 1109 	movw	r1, #265	; 0x109
 80014e6:	4821      	ldr	r0, [pc, #132]	; (800156c <configureDMAcontrol+0xb8>)
 80014e8:	f003 fdb4 	bl	8005054 <__assert_func>

	dba = (uint32_t)attr.dmaBaseAddr;
 80014ec:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80014f0:	60bb      	str	r3, [r7, #8]
	dba &= 0x1F;
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	f003 031f 	and.w	r3, r3, #31
 80014f8:	60bb      	str	r3, [r7, #8]

	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_DCR) &= ~(BITC | BITB | BITA | BIT9 | BIT8 | BIT4 | BIT3 | BIT2 | BIT1 | BIT0);
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	3312      	adds	r3, #18
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	88fa      	ldrh	r2, [r7, #6]
 8001508:	3212      	adds	r2, #18
 800150a:	0092      	lsls	r2, r2, #2
 800150c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001510:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001514:	f023 031f 	bic.w	r3, r3, #31
 8001518:	6013      	str	r3, [r2, #0]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_DCR) |= dba;
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	3312      	adds	r3, #18
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001524:	6819      	ldr	r1, [r3, #0]
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	3312      	adds	r3, #18
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001530:	68ba      	ldr	r2, [r7, #8]
 8001532:	430a      	orrs	r2, r1
 8001534:	601a      	str	r2, [r3, #0]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_DCR) |= dbl << 8;
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	3312      	adds	r3, #18
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001540:	6819      	ldr	r1, [r3, #0]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	021a      	lsls	r2, r3, #8
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	3312      	adds	r3, #18
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001550:	430a      	orrs	r2, r1
 8001552:	601a      	str	r2, [r3, #0]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800155e:	b004      	add	sp, #16
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	080060a0 	.word	0x080060a0
 8001568:	080061c8 	.word	0x080061c8
 800156c:	08006080 	.word	0x08006080

08001570 <configureDMAfullTransferAddress>:

static void configureDMAfullTransferAddress(general_timers_32bit_t timer, uint16_t addr)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	460a      	mov	r2, r1
 800157a:	80fb      	strh	r3, [r7, #6]
 800157c:	4613      	mov	r3, r2
 800157e:	80bb      	strh	r3, [r7, #4]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_DMAR) = (uint32_t)addr;
 8001580:	88fb      	ldrh	r3, [r7, #6]
 8001582:	3313      	adds	r3, #19
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800158a:	88ba      	ldrh	r2, [r7, #4]
 800158c:	601a      	str	r2, [r3, #0]
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <configureTimerOption>:

static void configureTimerOption(general_timers_32bit_t timer, uint8_t timerOption)
{
 800159a:	b480      	push	{r7}
 800159c:	b085      	sub	sp, #20
 800159e:	af00      	add	r7, sp, #0
 80015a0:	4603      	mov	r3, r0
 80015a2:	460a      	mov	r2, r1
 80015a4:	80fb      	strh	r3, [r7, #6]
 80015a6:	4613      	mov	r3, r2
 80015a8:	717b      	strb	r3, [r7, #5]
	uint32_t config = timerOption & (BIT1 | BIT0);
 80015aa:	797b      	ldrb	r3, [r7, #5]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	60fb      	str	r3, [r7, #12]
#if defined ( __GNUC__ )
#pragma GCC diagnostic push
// This error is ignored because not all the cases need to be handled here...
#pragma GCC diagnostic ignored "-Wswitch-enum"
#endif
	switch(timer)
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <configureTimerOption+0x26>
 80015b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80015bc:	d004      	beq.n	80015c8 <configureTimerOption+0x2e>
		break;
	case TIMER5:
		config <<= 6;
		break;
	default:
		return;
 80015be:	e00e      	b.n	80015de <configureTimerOption+0x44>
		config <<= 10;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	029b      	lsls	r3, r3, #10
 80015c4:	60fb      	str	r3, [r7, #12]
		break;
 80015c6:	e003      	b.n	80015d0 <configureTimerOption+0x36>
		config <<= 6;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	019b      	lsls	r3, r3, #6
 80015cc:	60fb      	str	r3, [r7, #12]
		break;
 80015ce:	bf00      	nop
	}
#if defined ( __GNUC__ )
#pragma GCC diagnostic pop
#endif

	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_OR) = config;
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	3314      	adds	r3, #20
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	601a      	str	r2, [r3, #0]
}
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <configureCaptureCompare>:

static void configureCaptureCompare(general_timers_32bit_t timer, general_timer_attr_t attr)
{
 80015e8:	b084      	sub	sp, #16
 80015ea:	b590      	push	{r4, r7, lr}
 80015ec:	b085      	sub	sp, #20
 80015ee:	af02      	add	r7, sp, #8
 80015f0:	4604      	mov	r4, r0
 80015f2:	f107 001c 	add.w	r0, r7, #28
 80015f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80015fa:	4623      	mov	r3, r4
 80015fc:	80fb      	strh	r3, [r7, #6]
	// Configure channel 1
	if (attr.ccMode1 == CAPTURE_MODE)
 80015fe:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00d      	beq.n	8001622 <configureCaptureCompare+0x3a>
	{
		configureCaptureCompareModeAsInput(timer, attr.capture1, 1);
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	2201      	movs	r2, #1
 800160a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fe01 	bl	8001214 <configureCaptureCompareModeAsInput>
		configureCapturePolarity(timer, 1, attr.captureCompareOutputPolarity1);
 8001612:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	2101      	movs	r1, #1
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fe6c 	bl	80012f8 <configureCapturePolarity>
 8001620:	e014      	b.n	800164c <configureCaptureCompare+0x64>
	}
	else
	{
		configureCaptureCompareModeAsOutput(timer, attr.compare1, 1);
 8001622:	88f8      	ldrh	r0, [r7, #6]
 8001624:	2301      	movs	r3, #1
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800162c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800162e:	f7ff fd57 	bl	80010e0 <configureCaptureCompareModeAsOutput>
		configureComparePolarity(timer, 1, attr.captureCompareOutputPolarity1);
 8001632:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001636:	88fb      	ldrh	r3, [r7, #6]
 8001638:	2101      	movs	r1, #1
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff feb2 	bl	80013a4 <configureComparePolarity>
		setCompare(timer, 1, attr.compare1.compareValue);
 8001640:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001642:	88fb      	ldrh	r3, [r7, #6]
 8001644:	2101      	movs	r1, #1
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ff11 	bl	800146e <setCompare>
	}

	// Configure channel 2
	if (attr.ccMode2 == CAPTURE_MODE)
 800164c:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001650:	2b00      	cmp	r3, #0
 8001652:	d00d      	beq.n	8001670 <configureCaptureCompare+0x88>
	{
		configureCaptureCompareModeAsInput(timer, attr.capture2, 2);
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	2202      	movs	r2, #2
 8001658:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fdda 	bl	8001214 <configureCaptureCompareModeAsInput>
		configureCapturePolarity(timer, 2, attr.captureCompareOutputPolarity2);
 8001660:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8001664:	88fb      	ldrh	r3, [r7, #6]
 8001666:	2102      	movs	r1, #2
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fe45 	bl	80012f8 <configureCapturePolarity>
 800166e:	e014      	b.n	800169a <configureCaptureCompare+0xb2>
	}
	else
	{
		configureCaptureCompareModeAsOutput(timer, attr.compare2, 2);
 8001670:	88f8      	ldrh	r0, [r7, #6]
 8001672:	2302      	movs	r3, #2
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800167a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800167c:	f7ff fd30 	bl	80010e0 <configureCaptureCompareModeAsOutput>
		configureComparePolarity(timer, 2, attr.captureCompareOutputPolarity2);
 8001680:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8001684:	88fb      	ldrh	r3, [r7, #6]
 8001686:	2102      	movs	r1, #2
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fe8b 	bl	80013a4 <configureComparePolarity>
		setCompare(timer, 2, attr.compare2.compareValue);
 800168e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	2102      	movs	r1, #2
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff feea 	bl	800146e <setCompare>
	}

	// Configure channel 3
	if (attr.ccMode3 == CAPTURE_MODE)
 800169a:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00d      	beq.n	80016be <configureCaptureCompare+0xd6>
	{
		configureCaptureCompareModeAsInput(timer, attr.capture3, 3);
 80016a2:	88fb      	ldrh	r3, [r7, #6]
 80016a4:	2203      	movs	r2, #3
 80016a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fdb3 	bl	8001214 <configureCaptureCompareModeAsInput>
		configureCapturePolarity(timer, 3, attr.captureCompareOutputPolarity3);
 80016ae:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 80016b2:	88fb      	ldrh	r3, [r7, #6]
 80016b4:	2103      	movs	r1, #3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fe1e 	bl	80012f8 <configureCapturePolarity>
 80016bc:	e014      	b.n	80016e8 <configureCaptureCompare+0x100>
	}
	else
	{
		configureCaptureCompareModeAsOutput(timer, attr.compare3, 3);
 80016be:	88f8      	ldrh	r0, [r7, #6]
 80016c0:	2303      	movs	r3, #3
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016ca:	f7ff fd09 	bl	80010e0 <configureCaptureCompareModeAsOutput>
		configureComparePolarity(timer, 3, attr.captureCompareOutputPolarity3);
 80016ce:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	2103      	movs	r1, #3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fe64 	bl	80013a4 <configureComparePolarity>
		setCompare(timer, 3, attr.compare3.compareValue);
 80016dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80016de:	88fb      	ldrh	r3, [r7, #6]
 80016e0:	2103      	movs	r1, #3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fec3 	bl	800146e <setCompare>
	}

	// Configure channel 4
	if (attr.ccMode4 == CAPTURE_MODE)
 80016e8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00d      	beq.n	800170c <configureCaptureCompare+0x124>
	{
		configureCaptureCompareModeAsInput(timer, attr.capture4, 4);
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	2204      	movs	r2, #4
 80016f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fd8c 	bl	8001214 <configureCaptureCompareModeAsInput>
		configureCapturePolarity(timer, 4, attr.captureCompareOutputPolarity4);
 80016fc:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	2104      	movs	r1, #4
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fdf7 	bl	80012f8 <configureCapturePolarity>
	{
		configureCaptureCompareModeAsOutput(timer, attr.compare4, 4);
		configureComparePolarity(timer, 4, attr.captureCompareOutputPolarity4);
		setCompare(timer, 4, attr.compare4.compareValue);
	}
}
 800170a:	e014      	b.n	8001736 <configureCaptureCompare+0x14e>
		configureCaptureCompareModeAsOutput(timer, attr.compare4, 4);
 800170c:	88f8      	ldrh	r0, [r7, #6]
 800170e:	2304      	movs	r3, #4
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001716:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001718:	f7ff fce2 	bl	80010e0 <configureCaptureCompareModeAsOutput>
		configureComparePolarity(timer, 4, attr.captureCompareOutputPolarity4);
 800171c:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8001720:	88fb      	ldrh	r3, [r7, #6]
 8001722:	2104      	movs	r1, #4
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fe3d 	bl	80013a4 <configureComparePolarity>
		setCompare(timer, 4, attr.compare4.compareValue);
 800172a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800172c:	88fb      	ldrh	r3, [r7, #6]
 800172e:	2104      	movs	r1, #4
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fe9c 	bl	800146e <setCompare>
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001740:	b004      	add	sp, #16
 8001742:	4770      	bx	lr

08001744 <enableClock>:

static void enableClock(general_timers_32bit_t timer)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	80fb      	strh	r3, [r7, #6]
	switch(timer)
 800174e:	88fb      	ldrh	r3, [r7, #6]
 8001750:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001754:	d01d      	beq.n	8001792 <enableClock+0x4e>
 8001756:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800175a:	dc1f      	bgt.n	800179c <enableClock+0x58>
 800175c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001760:	d012      	beq.n	8001788 <enableClock+0x44>
 8001762:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001766:	dc19      	bgt.n	800179c <enableClock+0x58>
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <enableClock+0x30>
 800176c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001770:	d005      	beq.n	800177e <enableClock+0x3a>
 8001772:	e013      	b.n	800179c <enableClock+0x58>
	{
	case TIMER2: enable_peripheral_clock(TIM2_EN);
 8001774:	2101      	movs	r1, #1
 8001776:	2003      	movs	r0, #3
 8001778:	f000 fd98 	bl	80022ac <enable_peripheral_clock>
		break;
 800177c:	e015      	b.n	80017aa <enableClock+0x66>
	case TIMER3: enable_peripheral_clock(TIM3_EN);
 800177e:	2102      	movs	r1, #2
 8001780:	2003      	movs	r0, #3
 8001782:	f000 fd93 	bl	80022ac <enable_peripheral_clock>
		break;
 8001786:	e010      	b.n	80017aa <enableClock+0x66>
	case TIMER4: enable_peripheral_clock(TIM4_EN);
 8001788:	2104      	movs	r1, #4
 800178a:	2003      	movs	r0, #3
 800178c:	f000 fd8e 	bl	80022ac <enable_peripheral_clock>
		break;
 8001790:	e00b      	b.n	80017aa <enableClock+0x66>
	case TIMER5: enable_peripheral_clock(TIM5_EN);
 8001792:	2108      	movs	r1, #8
 8001794:	2003      	movs	r0, #3
 8001796:	f000 fd89 	bl	80022ac <enable_peripheral_clock>
		break;
 800179a:	e006      	b.n	80017aa <enableClock+0x66>
	default:
		assert(0);
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <enableClock+0x70>)
 800179e:	4a06      	ldr	r2, [pc, #24]	; (80017b8 <enableClock+0x74>)
 80017a0:	f240 1177 	movw	r1, #375	; 0x177
 80017a4:	4805      	ldr	r0, [pc, #20]	; (80017bc <enableClock+0x78>)
 80017a6:	f003 fc55 	bl	8005054 <__assert_func>
	}
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	0800607c 	.word	0x0800607c
 80017b8:	080061dc 	.word	0x080061dc
 80017bc:	08006080 	.word	0x08006080

080017c0 <configureGeneralTimer>:

void configureGeneralTimer(general_timers_32bit_t timer, general_timer_attr_t attr)
{
 80017c0:	b084      	sub	sp, #16
 80017c2:	b590      	push	{r4, r7, lr}
 80017c4:	b097      	sub	sp, #92	; 0x5c
 80017c6:	af14      	add	r7, sp, #80	; 0x50
 80017c8:	4604      	mov	r4, r0
 80017ca:	f107 001c 	add.w	r0, r7, #28
 80017ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80017d2:	4623      	mov	r3, r4
 80017d4:	80fb      	strh	r3, [r7, #6]
	// Enable peripheral clock
	enableClock(timer);
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ffb3 	bl	8001744 <enableClock>

	disableTimer(timer);
 80017de:	88fb      	ldrh	r3, [r7, #6]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fb01 	bl	8000de8 <disableTimer>

	// Clear the event flag
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_SR) = 0;
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	3304      	adds	r3, #4
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]

	// Control reg 1
	controlReg1_clkdiv(timer, attr.clkDiv);
 80017f4:	7f3a      	ldrb	r2, [r7, #28]
 80017f6:	88fb      	ldrh	r3, [r7, #6]
 80017f8:	4611      	mov	r1, r2
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff f9c8 	bl	8000b90 <controlReg1_clkdiv>
	controlReg1_autoreload(timer, attr.autoReload);
 8001800:	7f7a      	ldrb	r2, [r7, #29]
 8001802:	88fb      	ldrh	r3, [r7, #6]
 8001804:	4611      	mov	r1, r2
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff f9e9 	bl	8000bde <controlReg1_autoreload>
	controlReg1_centerAligned(timer, attr.centerAligned);
 800180c:	7fba      	ldrb	r2, [r7, #30]
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fa0a 	bl	8000c2c <controlReg1_centerAligned>
	controlReg1_direction(timer, attr.direction);
 8001818:	7ffa      	ldrb	r2, [r7, #31]
 800181a:	88fb      	ldrh	r3, [r7, #6]
 800181c:	4611      	mov	r1, r2
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fa2f 	bl	8000c82 <controlReg1_direction>
	controlReg1_one_pulse(timer, attr.onePulse);
 8001824:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	4611      	mov	r1, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fa4f 	bl	8000cd0 <controlReg1_one_pulse>
	controlReg1_update_request_source(timer, attr.updateRequestSource);
 8001832:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	4611      	mov	r1, r2
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fa6f 	bl	8000d1e <controlReg1_update_request_source>
	controlReg1_update_disable(timer, attr.updateDisable);
 8001840:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fa8f 	bl	8000d6c <controlReg1_update_disable>

	// Control reg 2
	controlReg2_selection(timer, attr.timerInput1);
 800184e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	4611      	mov	r1, r2
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fadd 	bl	8000e16 <controlReg2_selection>
	controlReg2_master_mode_selection(timer, attr.masterMode);
 800185c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001860:	88fb      	ldrh	r3, [r7, #6]
 8001862:	4611      	mov	r1, r2
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fb01 	bl	8000e6c <controlReg2_master_mode_selection>
	controlReg2_capture_compare_dma_select(timer, attr.captureDMA);
 800186a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	4611      	mov	r1, r2
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fb29 	bl	8000eca <controlReg2_capture_compare_dma_select>

	// Slave/Master Reg
	configureSlave(timer, attr.slaveAttr);
 8001878:	88f8      	ldrh	r0, [r7, #6]
 800187a:	f8d7 3026 	ldr.w	r3, [r7, #38]	; 0x26
 800187e:	4619      	mov	r1, r3
 8001880:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001882:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001886:	0412      	lsls	r2, r2, #16
 8001888:	431a      	orrs	r2, r3
 800188a:	2300      	movs	r3, #0
 800188c:	f362 0317 	bfi	r3, r2, #0, #24
 8001890:	461a      	mov	r2, r3
 8001892:	f7ff fb45 	bl	8000f20 <configureSlave>

	// IER
	enableTimerInterrupts(timer, attr.interruptEnableMask);
 8001896:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001898:	88fb      	ldrh	r3, [r7, #6]
 800189a:	4611      	mov	r1, r2
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fbc4 	bl	800102a <enableTimerInterrupts>

	// Configure DMA
	configureDMAcontrol(timer, attr);
 80018a2:	88fc      	ldrh	r4, [r7, #6]
 80018a4:	4668      	mov	r0, sp
 80018a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018aa:	2250      	movs	r2, #80	; 0x50
 80018ac:	4619      	mov	r1, r3
 80018ae:	f003 fe72 	bl	8005596 <memcpy>
 80018b2:	f107 031c 	add.w	r3, r7, #28
 80018b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018b8:	4620      	mov	r0, r4
 80018ba:	f7ff fdfb 	bl	80014b4 <configureDMAcontrol>
	configureDMAfullTransferAddress(timer, attr.dmaBurstAddr);
 80018be:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80018c2:	88fb      	ldrh	r3, [r7, #6]
 80018c4:	4611      	mov	r1, r2
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff fe52 	bl	8001570 <configureDMAfullTransferAddress>
	configureTimerOption(timer, attr.timerOption);
 80018cc:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 80018d0:	88fb      	ldrh	r3, [r7, #6]
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fe60 	bl	800159a <configureTimerOption>

	// Configure Prescalar
	setPrescalar(timer, attr.prescaler);
 80018da:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 80018de:	88fb      	ldrh	r3, [r7, #6]
 80018e0:	4611      	mov	r1, r2
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fd99 	bl	800141a <setPrescalar>

	// Configure autoreload
	setAutoReload(timer, attr.auto_reload_value);
 80018e8:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 80018ec:	88fb      	ldrh	r3, [r7, #6]
 80018ee:	4611      	mov	r1, r2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fda7 	bl	8001444 <setAutoReload>

	// Capture/compare
	configureCaptureCompare(timer, attr);
 80018f6:	88fc      	ldrh	r4, [r7, #6]
 80018f8:	4668      	mov	r0, sp
 80018fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018fe:	2250      	movs	r2, #80	; 0x50
 8001900:	4619      	mov	r1, r3
 8001902:	f003 fe48 	bl	8005596 <memcpy>
 8001906:	f107 031c 	add.w	r3, r7, #28
 800190a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800190c:	4620      	mov	r0, r4
 800190e:	f7ff fe6b 	bl	80015e8 <configureCaptureCompare>

	// Configure initial count
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_CNT) = (uint32_t)attr.initialCount;
 8001912:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	3309      	adds	r3, #9
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001920:	601a      	str	r2, [r3, #0]

	if (attr.enableAfterConfig)
 8001922:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <configureGeneralTimer+0x172>
	{
		enableTimer(timer);
 800192a:	88fb      	ldrh	r3, [r7, #6]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fa44 	bl	8000dba <enableTimer>
	}
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800193c:	b004      	add	sp, #16
 800193e:	4770      	bx	lr

08001940 <clearTimerStatusRegister>:

	return readCapture(timer, channel);
}

void clearTimerStatusRegister(general_timers_32bit_t timer)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	80fb      	strh	r3, [r7, #6]
	TIMER_BASE_32BIT((uint32_t)timer, TIMER32BIT_SR) = 0;
 800194a:	88fb      	ldrh	r3, [r7, #6]
 800194c:	3304      	adds	r3, #4
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <set_mode>:


/* function definitions */

static void set_mode(uint32_t bank, uint32_t pin, uint32_t mode)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
	GPIO_BASE(bank, GPIO_MODER) &= ~(GPIO_MODE_MASK << (2 * pin));
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001978:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	2103      	movs	r1, #3
 8001984:	fa01 f303 	lsl.w	r3, r1, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	4619      	mov	r1, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001994:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001998:	400a      	ands	r2, r1
 800199a:	601a      	str	r2, [r3, #0]
	GPIO_BASE(bank, GPIO_MODER) |= (mode & GPIO_MODE_MASK) << (2 * pin);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80019a4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80019a8:	6819      	ldr	r1, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f003 0203 	and.w	r2, r3, #3
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	409a      	lsls	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80019be:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80019c2:	430a      	orrs	r2, r1
 80019c4:	601a      	str	r2, [r3, #0]
}
 80019c6:	bf00      	nop
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <set_output_type>:

static void set_output_type(uint32_t bank, uint32_t pin, uint32_t type)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b085      	sub	sp, #20
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
	GPIO_BASE(bank, GPIO_OTYPER) &= ~(0x1 << pin);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	3301      	adds	r3, #1
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80019e8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	2101      	movs	r1, #1
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	fa01 f303 	lsl.w	r3, r1, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	4619      	mov	r1, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	3301      	adds	r3, #1
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a04:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001a08:	400a      	ands	r2, r1
 8001a0a:	601a      	str	r2, [r3, #0]
	GPIO_BASE(bank, GPIO_OTYPER) |= type << pin;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a16:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001a1a:	6819      	ldr	r1, [r3, #0]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	409a      	lsls	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	3301      	adds	r3, #1
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a2c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001a30:	430a      	orrs	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]
}
 8001a34:	bf00      	nop
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <set_speed>:

static void set_speed(uint32_t bank, uint32_t pin, uint32_t speed)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
	GPIO_BASE(bank, GPIO_OSPEEDR) &= ~(GPIO_SPEED_MASK << (2 * pin));
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	3302      	adds	r3, #2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a56:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	2103      	movs	r1, #3
 8001a62:	fa01 f303 	lsl.w	r3, r1, r3
 8001a66:	43db      	mvns	r3, r3
 8001a68:	4619      	mov	r1, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a74:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001a78:	400a      	ands	r2, r1
 8001a7a:	601a      	str	r2, [r3, #0]
	GPIO_BASE(bank, GPIO_OSPEEDR) |= speed << (2 * pin);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	3302      	adds	r3, #2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a86:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001a8a:	6819      	ldr	r1, [r3, #0]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	409a      	lsls	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	3302      	adds	r3, #2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a9e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	601a      	str	r2, [r3, #0]
}
 8001aa6:	bf00      	nop
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <set_resistor>:

static void set_resistor(uint32_t bank, uint32_t pin, uint32_t resistor)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b085      	sub	sp, #20
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	60f8      	str	r0, [r7, #12]
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
	GPIO_BASE(bank, GPIO_PUPDR) &= ~(GPIO_RESISTOR_MASK << (2 * pin));
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	3303      	adds	r3, #3
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ac8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	2103      	movs	r1, #3
 8001ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	4619      	mov	r1, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	3303      	adds	r3, #3
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ae6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001aea:	400a      	ands	r2, r1
 8001aec:	601a      	str	r2, [r3, #0]
	GPIO_BASE(bank, GPIO_PUPDR) |= resistor << (2 * pin);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	3303      	adds	r3, #3
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001af8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001afc:	6819      	ldr	r1, [r3, #0]
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	409a      	lsls	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	3303      	adds	r3, #3
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b10:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001b14:	430a      	orrs	r2, r1
 8001b16:	601a      	str	r2, [r3, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <set_alt_function>:

static void set_alt_function(uint32_t bank, uint32_t pin, uint32_t altFunc)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b087      	sub	sp, #28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
	uint32_t Reg = (pin < 8) ? GPIO_AFRL : GPIO_AFRH;
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2b07      	cmp	r3, #7
 8001b34:	d801      	bhi.n	8001b3a <set_alt_function+0x16>
 8001b36:	2308      	movs	r3, #8
 8001b38:	e000      	b.n	8001b3c <set_alt_function+0x18>
 8001b3a:	2309      	movs	r3, #9
 8001b3c:	617b      	str	r3, [r7, #20]
	GPIO_BASE(bank, Reg) &= ~(GPIO_ALT_FUNCTION_MASK << (pin << 2));
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	4413      	add	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b4a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	210f      	movs	r1, #15
 8001b56:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	68f9      	ldr	r1, [r7, #12]
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	440b      	add	r3, r1
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b6a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001b6e:	4002      	ands	r2, r0
 8001b70:	601a      	str	r2, [r3, #0]
	GPIO_BASE(bank, Reg) |= (altFunc & GPIO_ALT_FUNCTION_MASK) << (pin << 2);
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	4413      	add	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b7e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001b82:	6819      	ldr	r1, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f003 020f 	and.w	r2, r3, #15
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	409a      	lsls	r2, r3
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	4403      	add	r3, r0
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b9c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	601a      	str	r2, [r3, #0]
}
 8001ba4:	bf00      	nop
 8001ba6:	371c      	adds	r7, #28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <init_gpio>:

void init_gpio(gpio_config_t config)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	enable_gpio_clock(config.gpio_bank);
 8001bbc:	893b      	ldrh	r3, [r7, #8]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 fb5a 	bl	8002278 <enable_gpio_clock>
	set_mode((uint32_t)config.gpio_bank, (uint32_t)config.pin_number, (uint32_t)config.mode);
 8001bc4:	893b      	ldrh	r3, [r7, #8]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	793b      	ldrb	r3, [r7, #4]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	7abb      	ldrb	r3, [r7, #10]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	f7ff fec8 	bl	8001964 <set_mode>
	set_output_type((uint32_t)config.gpio_bank, (uint32_t)config.pin_number, (uint32_t)config.output_type);
 8001bd4:	893b      	ldrh	r3, [r7, #8]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	793b      	ldrb	r3, [r7, #4]
 8001bda:	4619      	mov	r1, r3
 8001bdc:	7afb      	ldrb	r3, [r7, #11]
 8001bde:	461a      	mov	r2, r3
 8001be0:	f7ff fef7 	bl	80019d2 <set_output_type>
	set_speed((uint32_t)config.gpio_bank, (uint32_t)config.pin_number, (uint32_t)config.speed);
 8001be4:	893b      	ldrh	r3, [r7, #8]
 8001be6:	4618      	mov	r0, r3
 8001be8:	793b      	ldrb	r3, [r7, #4]
 8001bea:	4619      	mov	r1, r3
 8001bec:	7b3b      	ldrb	r3, [r7, #12]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	f7ff ff26 	bl	8001a40 <set_speed>
	set_resistor((uint32_t)config.gpio_bank, (uint32_t)config.pin_number, (uint32_t)config.resistor);
 8001bf4:	893b      	ldrh	r3, [r7, #8]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	793b      	ldrb	r3, [r7, #4]
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	7b7b      	ldrb	r3, [r7, #13]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	f7ff ff57 	bl	8001ab2 <set_resistor>
	set_alt_function((uint32_t)config.gpio_bank, (uint32_t)config.pin_number, (uint32_t)config.alternate_function);
 8001c04:	893b      	ldrh	r3, [r7, #8]
 8001c06:	4618      	mov	r0, r3
 8001c08:	793b      	ldrb	r3, [r7, #4]
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	797b      	ldrb	r3, [r7, #5]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	f7ff ff88 	bl	8001b24 <set_alt_function>

	if (config.mode == output)
 8001c14:	7abb      	ldrb	r3, [r7, #10]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d105      	bne.n	8001c26 <init_gpio+0x76>
	{
		clearPin(config.gpio_bank, config.pin_number);
 8001c1a:	893b      	ldrh	r3, [r7, #8]
 8001c1c:	793a      	ldrb	r2, [r7, #4]
 8001c1e:	4611      	mov	r1, r2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 f833 	bl	8001c8c <clearPin>
	}

	if (config.intialOutValue)
 8001c26:	79bb      	ldrb	r3, [r7, #6]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <init_gpio+0x88>
	{
		setPin(config.gpio_bank, config.pin_number);
 8001c2c:	893b      	ldrh	r3, [r7, #8]
 8001c2e:	793a      	ldrb	r2, [r7, #4]
 8001c30:	4611      	mov	r1, r2
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 f804 	bl	8001c40 <setPin>
	}
}
 8001c38:	bf00      	nop
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <setPin>:
{
	return GPIO_BASE((uint32_t)bank, GPIO_IDR) & GPIO_BANK_MASK;
}

void setPin(gpio_bank_t bank, uint8_t pin)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	460a      	mov	r2, r1
 8001c4a:	80fb      	strh	r3, [r7, #6]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	717b      	strb	r3, [r7, #5]
	GPIO_BASE((uint32_t)bank, GPIO_ODR) |= 1 << (pin & GPIO_PIN_MASK);
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	3305      	adds	r3, #5
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c5a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	797b      	ldrb	r3, [r7, #5]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	2101      	movs	r1, #1
 8001c68:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
 8001c70:	3305      	adds	r3, #5
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c78:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	601a      	str	r2, [r3, #0]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <clearPin>:

void clearPin(gpio_bank_t bank, uint8_t pin)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	460a      	mov	r2, r1
 8001c96:	80fb      	strh	r3, [r7, #6]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	717b      	strb	r3, [r7, #5]
	GPIO_BASE((uint32_t)bank, GPIO_ODR) &= ~(1 << (pin & GPIO_PIN_MASK));
 8001c9c:	88fb      	ldrh	r3, [r7, #6]
 8001c9e:	3305      	adds	r3, #5
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ca6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	797b      	ldrb	r3, [r7, #5]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	4619      	mov	r1, r3
 8001cbc:	88fb      	ldrh	r3, [r7, #6]
 8001cbe:	3305      	adds	r3, #5
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001cc6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001cca:	400a      	ands	r2, r1
 8001ccc:	601a      	str	r2, [r3, #0]
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <initialize_ir_sensors>:
};

static bool ir_readings[NUM_IR_SENSORS] = { 0 };

void initialize_ir_sensors(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
	init_gpio(ir0);
 8001ce0:	4b03      	ldr	r3, [pc, #12]	; (8001cf0 <initialize_ir_sensors+0x14>)
 8001ce2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ce6:	f7ff ff63 	bl	8001bb0 <init_gpio>
	/*init_gpio(ir1);
	init_gpio(ir2);
	init_gpio(ir3);
	init_gpio(ir4); */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	080061e8 	.word	0x080061e8

08001cf4 <init>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);

void init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
	  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  HAL_Init();
 8001cf8:	f000 fd6a 	bl	80027d0 <HAL_Init>

	  /* Configure the system clock */
	  SystemClock_Config();
 8001cfc:	f000 f830 	bl	8001d60 <SystemClock_Config>

	  /* Initialize all configured peripherals */
	  MX_GPIO_Init();
 8001d00:	f000 f898 	bl	8001e34 <MX_GPIO_Init>
	  MX_USART3_UART_Init();
 8001d04:	f000 f956 	bl	8001fb4 <MX_USART3_UART_Init>
	  MX_USB_OTG_FS_PCD_Init();
 8001d08:	f000 f97e 	bl	8002008 <MX_USB_OTG_FS_PCD_Init>

	  init_gpio(led0_configs);
 8001d0c:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <init+0x54>)
 8001d0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d12:	f7ff ff4d 	bl	8001bb0 <init_gpio>

	  if (check_clock_flag(SOFTWARE_RESET))
 8001d16:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001d1a:	f000 fb2b 	bl	8002374 <check_clock_flag>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d006      	beq.n	8001d32 <init+0x3e>
	{
			clear_clock_flags();
 8001d24:	f000 fb3c 	bl	80023a0 <clear_clock_flags>
			setPin(bank_b, 14);
 8001d28:	210e      	movs	r1, #14
 8001d2a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001d2e:	f7ff ff87 	bl	8001c40 <setPin>
		}
		clear_clock_flags();
 8001d32:	f000 fb35 	bl	80023a0 <clear_clock_flags>

		initialize_ir_sensors();
 8001d36:	f7ff ffd1 	bl	8001cdc <initialize_ir_sensors>
		config_reaction();
 8001d3a:	f000 f8f5 	bl	8001f28 <config_reaction>

		init_heartbeat();
 8001d3e:	f000 fce1 	bl	8002704 <init_heartbeat>
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	080061f4 	.word	0x080061f4

08001d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
	init();
 8001d50:	f7ff ffd0 	bl	8001cf4 <init>

	while (1)
	{
	  printf("Hello World!\r\n");
 8001d54:	4801      	ldr	r0, [pc, #4]	; (8001d5c <main+0x10>)
 8001d56:	f003 fac3 	bl	80052e0 <puts>
 8001d5a:	e7fb      	b.n	8001d54 <main+0x8>
 8001d5c:	080060ac 	.word	0x080060ac

08001d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b094      	sub	sp, #80	; 0x50
 8001d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d66:	f107 031c 	add.w	r3, r7, #28
 8001d6a:	2234      	movs	r2, #52	; 0x34
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f003 fb96 	bl	80054a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d74:	f107 0308 	add.w	r3, r7, #8
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d84:	2300      	movs	r3, #0
 8001d86:	607b      	str	r3, [r7, #4]
 8001d88:	4b28      	ldr	r3, [pc, #160]	; (8001e2c <SystemClock_Config+0xcc>)
 8001d8a:	4a28      	ldr	r2, [pc, #160]	; (8001e2c <SystemClock_Config+0xcc>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d90:	4b26      	ldr	r3, [pc, #152]	; (8001e2c <SystemClock_Config+0xcc>)
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d98:	607b      	str	r3, [r7, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	4b23      	ldr	r3, [pc, #140]	; (8001e30 <SystemClock_Config+0xd0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a22      	ldr	r2, [pc, #136]	; (8001e30 <SystemClock_Config+0xd0>)
 8001da6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <SystemClock_Config+0xd0>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001db4:	603b      	str	r3, [r7, #0]
 8001db6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001db8:	2301      	movs	r3, #1
 8001dba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001dbc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001dc0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001dcc:	2304      	movs	r3, #4
 8001dce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001dd0:	23a8      	movs	r3, #168	; 0xa8
 8001dd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001dd8:	2307      	movs	r3, #7
 8001dda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001de0:	f107 031c 	add.w	r3, r7, #28
 8001de4:	4618      	mov	r0, r3
 8001de6:	f001 ffd9 	bl	8003d9c <HAL_RCC_OscConfig>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001df0:	f000 f894 	bl	8001f1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001df4:	230f      	movs	r3, #15
 8001df6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e00:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e0a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e0c:	f107 0308 	add.w	r3, r7, #8
 8001e10:	2105      	movs	r1, #5
 8001e12:	4618      	mov	r0, r3
 8001e14:	f001 f94e 	bl	80030b4 <HAL_RCC_ClockConfig>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e1e:	f000 f87d 	bl	8001f1c <Error_Handler>
  }
}
 8001e22:	bf00      	nop
 8001e24:	3750      	adds	r7, #80	; 0x50
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40007000 	.word	0x40007000

08001e34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08a      	sub	sp, #40	; 0x28
 8001e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]
 8001e44:	609a      	str	r2, [r3, #8]
 8001e46:	60da      	str	r2, [r3, #12]
 8001e48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	4b31      	ldr	r3, [pc, #196]	; (8001f14 <MX_GPIO_Init+0xe0>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4a30      	ldr	r2, [pc, #192]	; (8001f14 <MX_GPIO_Init+0xe0>)
 8001e54:	f043 0310 	orr.w	r3, r3, #16
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4b2e      	ldr	r3, [pc, #184]	; (8001f14 <MX_GPIO_Init+0xe0>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	4b2a      	ldr	r3, [pc, #168]	; (8001f14 <MX_GPIO_Init+0xe0>)
 8001e6c:	4a29      	ldr	r2, [pc, #164]	; (8001f14 <MX_GPIO_Init+0xe0>)
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b28      	ldr	r3, [pc, #160]	; (8001f14 <MX_GPIO_Init+0xe0>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	4b24      	ldr	r3, [pc, #144]	; (8001f14 <MX_GPIO_Init+0xe0>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	4a23      	ldr	r2, [pc, #140]	; (8001f14 <MX_GPIO_Init+0xe0>)
 8001e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8e:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <MX_GPIO_Init+0xe0>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	607b      	str	r3, [r7, #4]
 8001e9e:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <MX_GPIO_Init+0xe0>)
 8001ea0:	4a1c      	ldr	r2, [pc, #112]	; (8001f14 <MX_GPIO_Init+0xe0>)
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b1b      	ldr	r3, [pc, #108]	; (8001f14 <MX_GPIO_Init+0xe0>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eae:	607b      	str	r3, [r7, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	603b      	str	r3, [r7, #0]
 8001eb6:	4b17      	ldr	r3, [pc, #92]	; (8001f14 <MX_GPIO_Init+0xe0>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a16      	ldr	r2, [pc, #88]	; (8001f14 <MX_GPIO_Init+0xe0>)
 8001ebc:	f043 0302 	orr.w	r3, r3, #2
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <MX_GPIO_Init+0xe0>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	603b      	str	r3, [r7, #0]
 8001ecc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2140      	movs	r1, #64	; 0x40
 8001ed2:	4811      	ldr	r0, [pc, #68]	; (8001f18 <MX_GPIO_Init+0xe4>)
 8001ed4:	f000 ff8c 	bl	8002df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001ed8:	2340      	movs	r3, #64	; 0x40
 8001eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001edc:	2301      	movs	r3, #1
 8001ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	4619      	mov	r1, r3
 8001eee:	480a      	ldr	r0, [pc, #40]	; (8001f18 <MX_GPIO_Init+0xe4>)
 8001ef0:	f000 fdea 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	4619      	mov	r1, r3
 8001f06:	4804      	ldr	r0, [pc, #16]	; (8001f18 <MX_GPIO_Init+0xe4>)
 8001f08:	f000 fdde 	bl	8002ac8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f0c:	bf00      	nop
 8001f0e:	3728      	adds	r7, #40	; 0x28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40021800 	.word	0x40021800

08001f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f20:	b672      	cpsid	i
}
 8001f22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <Error_Handler+0x8>
	...

08001f28 <config_reaction>:
		INT_NUM_EXTI9_5,
		9
};

void config_reaction(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
	disable_global_irq();
 8001f2c:	f7fe fbfe 	bl	800072c <disable_global_irq>
	configure_interrupt(exti5_9_irq);
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <config_reaction+0x2c>)
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	f7fe fc0c 	bl	8000750 <configure_interrupt>
	config_exti(ir_exti_5);
 8001f38:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <config_reaction+0x30>)
 8001f3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f3e:	f7fe fdad 	bl	8000a9c <config_exti>
	disable_irq(exti5_9_irq);
 8001f42:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <config_reaction+0x2c>)
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	f7fe fc1e 	bl	8000786 <disable_irq>
	enable_global_irq();
 8001f4a:	f7fe fbf8 	bl	800073e <enable_global_irq>
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	08006208 	.word	0x08006208
 8001f58:	08006200 	.word	0x08006200

08001f5c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af02      	add	r7, sp, #8
	stop_measurement();
 8001f62:	f000 fbf3 	bl	800274c <stop_measurement>
	gEvents |= E_EXTI9_5;
 8001f66:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <EXTI9_5_IRQHandler+0x30>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f043 0302 	orr.w	r3, r3, #2
 8001f6e:	4a07      	ldr	r2, [pc, #28]	; (8001f8c <EXTI9_5_IRQHandler+0x30>)
 8001f70:	6013      	str	r3, [r2, #0]
	acknowledge_multiple_exti_events(5, 6, 7, 8, 9, UNUSED_CHANNEL);
 8001f72:	2320      	movs	r3, #32
 8001f74:	9301      	str	r3, [sp, #4]
 8001f76:	2309      	movs	r3, #9
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	2308      	movs	r3, #8
 8001f7c:	2207      	movs	r2, #7
 8001f7e:	2106      	movs	r1, #6
 8001f80:	2005      	movs	r0, #5
 8001f82:	f7fe fdbb 	bl	8000afc <acknowledge_multiple_exti_events>
}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000088 	.word	0x20000088

08001f90 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001f98:	1d39      	adds	r1, r7, #4
 8001f9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	4803      	ldr	r0, [pc, #12]	; (8001fb0 <__io_putchar+0x20>)
 8001fa2:	f002 f9e6 	bl	8004372 <HAL_UART_Transmit>

  return ch;
 8001fa6:	687b      	ldr	r3, [r7, #4]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	2000008c 	.word	0x2000008c

08001fb4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <MX_USART3_UART_Init+0x4c>)
 8001fba:	4a12      	ldr	r2, [pc, #72]	; (8002004 <MX_USART3_UART_Init+0x50>)
 8001fbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <MX_USART3_UART_Init+0x4c>)
 8001fc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <MX_USART3_UART_Init+0x4c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <MX_USART3_UART_Init+0x4c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <MX_USART3_UART_Init+0x4c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <MX_USART3_UART_Init+0x4c>)
 8001fda:	220c      	movs	r2, #12
 8001fdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fde:	4b08      	ldr	r3, [pc, #32]	; (8002000 <MX_USART3_UART_Init+0x4c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <MX_USART3_UART_Init+0x4c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fea:	4805      	ldr	r0, [pc, #20]	; (8002000 <MX_USART3_UART_Init+0x4c>)
 8001fec:	f002 f974 	bl	80042d8 <HAL_UART_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ff6:	f7ff ff91 	bl	8001f1c <Error_Handler>
  }
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	2000008c 	.word	0x2000008c
 8002004:	40004800 	.word	0x40004800

08002008 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_OTG_FS_PCD_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800200c:	4b14      	ldr	r3, [pc, #80]	; (8002060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800200e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002012:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002014:	4b12      	ldr	r3, [pc, #72]	; (8002060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002016:	2206      	movs	r2, #6
 8002018:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800201a:	4b11      	ldr	r3, [pc, #68]	; (8002060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800201c:	2202      	movs	r2, #2
 800201e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002020:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002022:	2200      	movs	r2, #0
 8002024:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002026:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002028:	2202      	movs	r2, #2
 800202a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800202e:	2201      	movs	r2, #1
 8002030:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002032:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002034:	2200      	movs	r2, #0
 8002036:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002038:	4b09      	ldr	r3, [pc, #36]	; (8002060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800203a:	2200      	movs	r2, #0
 800203c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800203e:	4b08      	ldr	r3, [pc, #32]	; (8002060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002040:	2201      	movs	r2, #1
 8002042:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002046:	2200      	movs	r2, #0
 8002048:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800204a:	4805      	ldr	r0, [pc, #20]	; (8002060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800204c:	f000 fee9 	bl	8002e22 <HAL_PCD_Init>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002056:	f7ff ff61 	bl	8001f1c <Error_Handler>
  }
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	200000d0 	.word	0x200000d0

08002064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	607b      	str	r3, [r7, #4]
 800206e:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <HAL_MspInit+0x4c>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	4a0f      	ldr	r2, [pc, #60]	; (80020b0 <HAL_MspInit+0x4c>)
 8002074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002078:	6453      	str	r3, [r2, #68]	; 0x44
 800207a:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <HAL_MspInit+0x4c>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	603b      	str	r3, [r7, #0]
 800208a:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <HAL_MspInit+0x4c>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	4a08      	ldr	r2, [pc, #32]	; (80020b0 <HAL_MspInit+0x4c>)
 8002090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002094:	6413      	str	r3, [r2, #64]	; 0x40
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_MspInit+0x4c>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40023800 	.word	0x40023800

080020b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08a      	sub	sp, #40	; 0x28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a19      	ldr	r2, [pc, #100]	; (8002138 <HAL_UART_MspInit+0x84>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d12c      	bne.n	8002130 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	4b18      	ldr	r3, [pc, #96]	; (800213c <HAL_UART_MspInit+0x88>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	4a17      	ldr	r2, [pc, #92]	; (800213c <HAL_UART_MspInit+0x88>)
 80020e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020e4:	6413      	str	r3, [r2, #64]	; 0x40
 80020e6:	4b15      	ldr	r3, [pc, #84]	; (800213c <HAL_UART_MspInit+0x88>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	4b11      	ldr	r3, [pc, #68]	; (800213c <HAL_UART_MspInit+0x88>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a10      	ldr	r2, [pc, #64]	; (800213c <HAL_UART_MspInit+0x88>)
 80020fc:	f043 0308 	orr.w	r3, r3, #8
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b0e      	ldr	r3, [pc, #56]	; (800213c <HAL_UART_MspInit+0x88>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800210e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002114:	2302      	movs	r3, #2
 8002116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211c:	2303      	movs	r3, #3
 800211e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002120:	2307      	movs	r3, #7
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	4619      	mov	r1, r3
 800212a:	4805      	ldr	r0, [pc, #20]	; (8002140 <HAL_UART_MspInit+0x8c>)
 800212c:	f000 fccc 	bl	8002ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002130:	bf00      	nop
 8002132:	3728      	adds	r7, #40	; 0x28
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40004800 	.word	0x40004800
 800213c:	40023800 	.word	0x40023800
 8002140:	40020c00 	.word	0x40020c00

08002144 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b0a0      	sub	sp, #128	; 0x80
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800215c:	f107 0310 	add.w	r3, r7, #16
 8002160:	225c      	movs	r2, #92	; 0x5c
 8002162:	2100      	movs	r1, #0
 8002164:	4618      	mov	r0, r3
 8002166:	f003 f99b 	bl	80054a0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002172:	d14e      	bne.n	8002212 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002174:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002178:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800217a:	2300      	movs	r3, #0
 800217c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800217e:	f107 0310 	add.w	r3, r7, #16
 8002182:	4618      	mov	r0, r3
 8002184:	f001 f8b0 	bl	80032e8 <HAL_RCCEx_PeriphCLKConfig>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800218e:	f7ff fec5 	bl	8001f1c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	4b21      	ldr	r3, [pc, #132]	; (800221c <HAL_PCD_MspInit+0xd8>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	4a20      	ldr	r2, [pc, #128]	; (800221c <HAL_PCD_MspInit+0xd8>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6313      	str	r3, [r2, #48]	; 0x30
 80021a2:	4b1e      	ldr	r3, [pc, #120]	; (800221c <HAL_PCD_MspInit+0xd8>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80021ae:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80021b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b4:	2302      	movs	r3, #2
 80021b6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021bc:	2303      	movs	r3, #3
 80021be:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80021c0:	230a      	movs	r3, #10
 80021c2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021c8:	4619      	mov	r1, r3
 80021ca:	4815      	ldr	r0, [pc, #84]	; (8002220 <HAL_PCD_MspInit+0xdc>)
 80021cc:	f000 fc7c 	bl	8002ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80021d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021d4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021d6:	2300      	movs	r3, #0
 80021d8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80021de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021e2:	4619      	mov	r1, r3
 80021e4:	480e      	ldr	r0, [pc, #56]	; (8002220 <HAL_PCD_MspInit+0xdc>)
 80021e6:	f000 fc6f 	bl	8002ac8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80021ea:	4b0c      	ldr	r3, [pc, #48]	; (800221c <HAL_PCD_MspInit+0xd8>)
 80021ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ee:	4a0b      	ldr	r2, [pc, #44]	; (800221c <HAL_PCD_MspInit+0xd8>)
 80021f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021f4:	6353      	str	r3, [r2, #52]	; 0x34
 80021f6:	2300      	movs	r3, #0
 80021f8:	60bb      	str	r3, [r7, #8]
 80021fa:	4b08      	ldr	r3, [pc, #32]	; (800221c <HAL_PCD_MspInit+0xd8>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	4a07      	ldr	r2, [pc, #28]	; (800221c <HAL_PCD_MspInit+0xd8>)
 8002200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002204:	6453      	str	r3, [r2, #68]	; 0x44
 8002206:	4b05      	ldr	r3, [pc, #20]	; (800221c <HAL_PCD_MspInit+0xd8>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002212:	bf00      	nop
 8002214:	3780      	adds	r7, #128	; 0x80
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40023800 	.word	0x40023800
 8002220:	40020000 	.word	0x40020000

08002224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002228:	e7fe      	b.n	8002228 <NMI_Handler+0x4>

0800222a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800222e:	e7fe      	b.n	800222e <HardFault_Handler+0x4>

08002230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <MemManage_Handler+0x4>

08002236 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800223a:	e7fe      	b.n	800223a <BusFault_Handler+0x4>

0800223c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002240:	e7fe      	b.n	8002240 <UsageFault_Handler+0x4>

08002242 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002270:	f000 fb00 	bl	8002874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}

08002278 <enable_gpio_clock>:
	RCC_BASE(RCC_APB2RSTR) &= ~1;
}

/* Peripheral clock enable */
void enable_gpio_clock(gpio_bank_t bank)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	80fb      	strh	r3, [r7, #6]
	RCC_BASE(RCC_AHB1ENR) |= 1 << (((uint32_t)bank) >> 8);
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <enable_gpio_clock+0x30>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	88fa      	ldrh	r2, [r7, #6]
 8002288:	0a12      	lsrs	r2, r2, #8
 800228a:	b292      	uxth	r2, r2
 800228c:	4611      	mov	r1, r2
 800228e:	2201      	movs	r2, #1
 8002290:	408a      	lsls	r2, r1
 8002292:	4611      	mov	r1, r2
 8002294:	4a04      	ldr	r2, [pc, #16]	; (80022a8 <enable_gpio_clock+0x30>)
 8002296:	430b      	orrs	r3, r1
 8002298:	6013      	str	r3, [r2, #0]
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40023830 	.word	0x40023830

080022ac <enable_peripheral_clock>:
{
	return (bool)(RCC_BASE(RCC_AHB1ENR) >> (((uint32_t)bank) >> 8) & 0x1);
}

void enable_peripheral_clock(uint32_t reg, uint32_t peripheral)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
	uint32_t valid_mask, offset;

	switch(reg)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	d826      	bhi.n	800230a <enable_peripheral_clock+0x5e>
 80022bc:	a201      	add	r2, pc, #4	; (adr r2, 80022c4 <enable_peripheral_clock+0x18>)
 80022be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c2:	bf00      	nop
 80022c4:	080022d9 	.word	0x080022d9
 80022c8:	080022e3 	.word	0x080022e3
 80022cc:	080022ed 	.word	0x080022ed
 80022d0:	080022f7 	.word	0x080022f7
 80022d4:	08002301 	.word	0x08002301
	{
	case 0: offset = RCC_AHB1ENR;
 80022d8:	230c      	movs	r3, #12
 80022da:	60bb      	str	r3, [r7, #8]
		valid_mask = VALID_RCC_AHB1ENR_MASK;
 80022dc:	4b1e      	ldr	r3, [pc, #120]	; (8002358 <enable_peripheral_clock+0xac>)
 80022de:	60fb      	str	r3, [r7, #12]
		break;
 80022e0:	e01a      	b.n	8002318 <enable_peripheral_clock+0x6c>
	case 1: offset = RCC_AHB2ENR;
 80022e2:	230d      	movs	r3, #13
 80022e4:	60bb      	str	r3, [r7, #8]
		valid_mask = VALID_RCC_AHB2ENR_MASK;
 80022e6:	2381      	movs	r3, #129	; 0x81
 80022e8:	60fb      	str	r3, [r7, #12]
		break;
 80022ea:	e015      	b.n	8002318 <enable_peripheral_clock+0x6c>
	case 2: offset = RCC_AHB3ENR;
 80022ec:	230e      	movs	r3, #14
 80022ee:	60bb      	str	r3, [r7, #8]
		valid_mask = VALID_RCC_AHB3ENR_MASK;
 80022f0:	2303      	movs	r3, #3
 80022f2:	60fb      	str	r3, [r7, #12]
		break;
 80022f4:	e010      	b.n	8002318 <enable_peripheral_clock+0x6c>
	case 3: offset = RCC_APB1ENR;
 80022f6:	2310      	movs	r3, #16
 80022f8:	60bb      	str	r3, [r7, #8]
		valid_mask = VALID_RCC_APB1ENR_MASK;
 80022fa:	4b18      	ldr	r3, [pc, #96]	; (800235c <enable_peripheral_clock+0xb0>)
 80022fc:	60fb      	str	r3, [r7, #12]
		break;
 80022fe:	e00b      	b.n	8002318 <enable_peripheral_clock+0x6c>
	case 4: offset = RCC_APB2ENR;
 8002300:	2311      	movs	r3, #17
 8002302:	60bb      	str	r3, [r7, #8]
		valid_mask = VALID_RCC_APB2ENR_MASK;
 8002304:	4b16      	ldr	r3, [pc, #88]	; (8002360 <enable_peripheral_clock+0xb4>)
 8002306:	60fb      	str	r3, [r7, #12]
		break;
 8002308:	e006      	b.n	8002318 <enable_peripheral_clock+0x6c>
	default: assert(0);
 800230a:	4b16      	ldr	r3, [pc, #88]	; (8002364 <enable_peripheral_clock+0xb8>)
 800230c:	4a16      	ldr	r2, [pc, #88]	; (8002368 <enable_peripheral_clock+0xbc>)
 800230e:	f240 31bf 	movw	r1, #959	; 0x3bf
 8002312:	4816      	ldr	r0, [pc, #88]	; (800236c <enable_peripheral_clock+0xc0>)
 8002314:	f002 fe9e 	bl	8005054 <__assert_func>
		break;
	}

	assert(peripheral & valid_mask);
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	4013      	ands	r3, r2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d106      	bne.n	8002330 <enable_peripheral_clock+0x84>
 8002322:	4b13      	ldr	r3, [pc, #76]	; (8002370 <enable_peripheral_clock+0xc4>)
 8002324:	4a10      	ldr	r2, [pc, #64]	; (8002368 <enable_peripheral_clock+0xbc>)
 8002326:	f240 31c3 	movw	r1, #963	; 0x3c3
 800232a:	4810      	ldr	r0, [pc, #64]	; (800236c <enable_peripheral_clock+0xc0>)
 800232c:	f002 fe92 	bl	8005054 <__assert_func>

	RCC_BASE(offset) |= peripheral;
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002338:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800233c:	6819      	ldr	r1, [r3, #0]
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002346:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	601a      	str	r2, [r3, #0]
}
 8002350:	bf00      	nop
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	00047060 	.word	0x00047060
 800235c:	3fffc9ff 	.word	0x3fffc9ff
 8002360:	00017ff7 	.word	0x00017ff7
 8002364:	0800616c 	.word	0x0800616c
 8002368:	0800620c 	.word	0x0800620c
 800236c:	08006104 	.word	0x08006104
 8002370:	08006170 	.word	0x08006170

08002374 <check_clock_flag>:
	return RCC_BASE(RCC_BDCR) & mask;
}

/* Clock control and status */
bool check_clock_flag(uint32_t clk_flag)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	return (RCC_BASE(RCC_CSR) & clk_flag) != 0;
 800237c:	4b07      	ldr	r3, [pc, #28]	; (800239c <check_clock_flag+0x28>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4013      	ands	r3, r2
 8002384:	2b00      	cmp	r3, #0
 8002386:	bf14      	ite	ne
 8002388:	2301      	movne	r3, #1
 800238a:	2300      	moveq	r3, #0
 800238c:	b2db      	uxtb	r3, r3
}
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40023874 	.word	0x40023874

080023a0 <clear_clock_flags>:

void clear_clock_flags(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
	RCC_BASE(RCC_CSR) |= UPPER16BITS(BIT8);
 80023a6:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <clear_clock_flags+0x40>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a0d      	ldr	r2, [pc, #52]	; (80023e0 <clear_clock_flags+0x40>)
 80023ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023b0:	6013      	str	r3, [r2, #0]

	for(uint32_t i = 0; i < MAX_RESET_ITERATIONS; i++);
 80023b2:	2300      	movs	r3, #0
 80023b4:	607b      	str	r3, [r7, #4]
 80023b6:	e002      	b.n	80023be <clear_clock_flags+0x1e>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3301      	adds	r3, #1
 80023bc:	607b      	str	r3, [r7, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f242 720f 	movw	r2, #9999	; 0x270f
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d9f7      	bls.n	80023b8 <clear_clock_flags+0x18>

	RCC_BASE(RCC_CSR) &= ~UPPER16BITS(BIT8);
 80023c8:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <clear_clock_flags+0x40>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a04      	ldr	r2, [pc, #16]	; (80023e0 <clear_clock_flags+0x40>)
 80023ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023d2:	6013      	str	r3, [r2, #0]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	40023874 	.word	0x40023874

080023e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return 1;
 80023e8:	2301      	movs	r3, #1
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <_kill>:

int _kill(int pid, int sig)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023fe:	f003 f89d 	bl	800553c <__errno>
 8002402:	4603      	mov	r3, r0
 8002404:	2216      	movs	r2, #22
 8002406:	601a      	str	r2, [r3, #0]
  return -1;
 8002408:	f04f 33ff 	mov.w	r3, #4294967295
}
 800240c:	4618      	mov	r0, r3
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <_exit>:

void _exit (int status)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800241c:	f04f 31ff 	mov.w	r1, #4294967295
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ffe7 	bl	80023f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002426:	e7fe      	b.n	8002426 <_exit+0x12>

08002428 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	e00a      	b.n	8002450 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800243a:	f3af 8000 	nop.w
 800243e:	4601      	mov	r1, r0
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	60ba      	str	r2, [r7, #8]
 8002446:	b2ca      	uxtb	r2, r1
 8002448:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	3301      	adds	r3, #1
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	429a      	cmp	r2, r3
 8002456:	dbf0      	blt.n	800243a <_read+0x12>
  }

  return len;
 8002458:	687b      	ldr	r3, [r7, #4]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b086      	sub	sp, #24
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	e009      	b.n	8002488 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	1c5a      	adds	r2, r3, #1
 8002478:	60ba      	str	r2, [r7, #8]
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff fd87 	bl	8001f90 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	3301      	adds	r3, #1
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	429a      	cmp	r2, r3
 800248e:	dbf1      	blt.n	8002474 <_write+0x12>
  }
  return len;
 8002490:	687b      	ldr	r3, [r7, #4]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <_close>:

int _close(int file)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
 80024ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024c2:	605a      	str	r2, [r3, #4]
  return 0;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <_isatty>:

int _isatty(int file)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024da:	2301      	movs	r3, #1
}
 80024dc:	4618      	mov	r0, r3
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <select_exti_value>:
#define SYSCFG_CFGR 7  // TODO: Write stuff

#define EXTI_MASK 0xF

static uint32_t select_exti_value(gpio_bank_t bank)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	4603      	mov	r3, r0
 800250a:	80fb      	strh	r3, [r7, #6]
	return (uint32_t)bank >> 8;
 800250c:	88fb      	ldrh	r3, [r7, #6]
 800250e:	0a1b      	lsrs	r3, r3, #8
 8002510:	b29b      	uxth	r3, r3
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <select_exti_reg>:

static uint32_t select_exti_reg(uint8_t pin, uint32_t *shift)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	6039      	str	r1, [r7, #0]
 800252a:	71fb      	strb	r3, [r7, #7]
	assert(pin < 16);
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	2b0f      	cmp	r3, #15
 8002530:	d905      	bls.n	800253e <select_exti_reg+0x1e>
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <select_exti_reg+0x3c>)
 8002534:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <select_exti_reg+0x40>)
 8002536:	2121      	movs	r1, #33	; 0x21
 8002538:	480a      	ldr	r0, [pc, #40]	; (8002564 <select_exti_reg+0x44>)
 800253a:	f002 fd8b 	bl	8005054 <__assert_func>
	*shift = ((uint32_t)pin & 0x3) << 2;
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	f003 020c 	and.w	r2, r3, #12
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	601a      	str	r2, [r3, #0]
	return (uint32_t)(pin >> 2) + SYSCFG_EXTICR1;
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	089b      	lsrs	r3, r3, #2
 800254e:	b2db      	uxtb	r3, r3
 8002550:	3302      	adds	r3, #2
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	08006188 	.word	0x08006188
 8002560:	08006224 	.word	0x08006224
 8002564:	08006194 	.word	0x08006194

08002568 <configure_exti_source>:

static void configure_exti_source(gpio_bank_t bank, uint8_t pin)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	460a      	mov	r2, r1
 8002572:	80fb      	strh	r3, [r7, #6]
 8002574:	4613      	mov	r3, r2
 8002576:	717b      	strb	r3, [r7, #5]
	uint32_t value, reg, shift;
	reg = select_exti_reg(pin, &shift);
 8002578:	f107 020c 	add.w	r2, r7, #12
 800257c:	797b      	ldrb	r3, [r7, #5]
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ffcd 	bl	8002520 <select_exti_reg>
 8002586:	6178      	str	r0, [r7, #20]
	value = select_exti_value(bank);
 8002588:	88fb      	ldrh	r3, [r7, #6]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff ffb9 	bl	8002502 <select_exti_value>
 8002590:	6138      	str	r0, [r7, #16]
	SYSCONFIG_BASE(reg) &= ~(EXTI_MASK << shift);
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800259a:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	210f      	movs	r1, #15
 80025a4:	fa01 f303 	lsl.w	r3, r1, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	4619      	mov	r1, r3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80025b4:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80025b8:	400a      	ands	r2, r1
 80025ba:	601a      	str	r2, [r3, #0]
	SYSCONFIG_BASE(reg) |= (value << shift);
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80025c4:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80025c8:	6819      	ldr	r1, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	409a      	lsls	r2, r3
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80025d8:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80025dc:	430a      	orrs	r2, r1
 80025de:	601a      	str	r2, [r3, #0]
}
 80025e0:	bf00      	nop
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <start_sysconfig>:

void start_sysconfig(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
	enable_peripheral_clock(SYSCONFIG_EN);
 80025ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025f0:	2004      	movs	r0, #4
 80025f2:	f7ff fe5b 	bl	80022ac <enable_peripheral_clock>
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}

080025fa <configure_exti_line>:

void configure_exti_line(exti_select_t config)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
	configure_exti_source(config.bank, config.pin);
 8002602:	88fb      	ldrh	r3, [r7, #6]
 8002604:	793a      	ldrb	r2, [r7, #4]
 8002606:	4611      	mov	r1, r2
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ffad 	bl	8002568 <configure_exti_source>
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002620:	4a14      	ldr	r2, [pc, #80]	; (8002674 <_sbrk+0x5c>)
 8002622:	4b15      	ldr	r3, [pc, #84]	; (8002678 <_sbrk+0x60>)
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800262c:	4b13      	ldr	r3, [pc, #76]	; (800267c <_sbrk+0x64>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d102      	bne.n	800263a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002634:	4b11      	ldr	r3, [pc, #68]	; (800267c <_sbrk+0x64>)
 8002636:	4a12      	ldr	r2, [pc, #72]	; (8002680 <_sbrk+0x68>)
 8002638:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800263a:	4b10      	ldr	r3, [pc, #64]	; (800267c <_sbrk+0x64>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4413      	add	r3, r2
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	429a      	cmp	r2, r3
 8002646:	d207      	bcs.n	8002658 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002648:	f002 ff78 	bl	800553c <__errno>
 800264c:	4603      	mov	r3, r0
 800264e:	220c      	movs	r2, #12
 8002650:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002652:	f04f 33ff 	mov.w	r3, #4294967295
 8002656:	e009      	b.n	800266c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002658:	4b08      	ldr	r3, [pc, #32]	; (800267c <_sbrk+0x64>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800265e:	4b07      	ldr	r3, [pc, #28]	; (800267c <_sbrk+0x64>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4413      	add	r3, r2
 8002666:	4a05      	ldr	r2, [pc, #20]	; (800267c <_sbrk+0x64>)
 8002668:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800266a:	68fb      	ldr	r3, [r7, #12]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20020000 	.word	0x20020000
 8002678:	00000400 	.word	0x00000400
 800267c:	200005dc 	.word	0x200005dc
 8002680:	20000740 	.word	0x20000740

08002684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <SystemInit+0x20>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268e:	4a05      	ldr	r2, [pc, #20]	; (80026a4 <SystemInit+0x20>)
 8002690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <TIM2_IRQHandler>:
static bool measure = false;
static volatile uint32_t measurement = 0;
static volatile uint32_t timems = 0;

void TIM2_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
	if (checkTimerStatus(TIMER2, UIF))
 80026ac:	2101      	movs	r1, #1
 80026ae:	2000      	movs	r0, #0
 80026b0:	f7fe fcea 	bl	8001088 <checkTimerStatus>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d011      	beq.n	80026de <TIM2_IRQHandler+0x36>
	{
		gEvents |= E_HEARTBEAT;
 80026ba:	4b0f      	ldr	r3, [pc, #60]	; (80026f8 <TIM2_IRQHandler+0x50>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	4a0d      	ldr	r2, [pc, #52]	; (80026f8 <TIM2_IRQHandler+0x50>)
 80026c4:	6013      	str	r3, [r2, #0]
		watchdog_count--;
 80026c6:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <TIM2_IRQHandler+0x54>)
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <TIM2_IRQHandler+0x54>)
 80026d2:	801a      	strh	r2, [r3, #0]
		timems++;
 80026d4:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <TIM2_IRQHandler+0x58>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	3301      	adds	r3, #1
 80026da:	4a09      	ldr	r2, [pc, #36]	; (8002700 <TIM2_IRQHandler+0x58>)
 80026dc:	6013      	str	r3, [r2, #0]
	}
	if (!watchdog_count)
 80026de:	4b07      	ldr	r3, [pc, #28]	; (80026fc <TIM2_IRQHandler+0x54>)
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <TIM2_IRQHandler+0x44>
	{
		reset_system();
 80026e8:	f7fe f85a 	bl	80007a0 <reset_system>
	}

	// Clear erroneous status
	clearTimerStatusRegister(TIMER2);
 80026ec:	2000      	movs	r0, #0
 80026ee:	f7ff f927 	bl	8001940 <clearTimerStatusRegister>
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000088 	.word	0x20000088
 80026fc:	20000004 	.word	0x20000004
 8002700:	200005e8 	.word	0x200005e8

08002704 <init_heartbeat>:

void init_heartbeat(void)
{
 8002704:	b590      	push	{r4, r7, lr}
 8002706:	b095      	sub	sp, #84	; 0x54
 8002708:	af14      	add	r7, sp, #80	; 0x50
	// Configure Heart beat
	timems = 0;
 800270a:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <init_heartbeat+0x3c>)
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
	configure_interrupt(tim2_irq);
 8002710:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <init_heartbeat+0x40>)
 8002712:	6818      	ldr	r0, [r3, #0]
 8002714:	f7fe f81c 	bl	8000750 <configure_interrupt>
	configureGeneralTimer(TIMER2, tim2);
 8002718:	4c0b      	ldr	r4, [pc, #44]	; (8002748 <init_heartbeat+0x44>)
 800271a:	4668      	mov	r0, sp
 800271c:	f104 030c 	add.w	r3, r4, #12
 8002720:	2250      	movs	r2, #80	; 0x50
 8002722:	4619      	mov	r1, r3
 8002724:	f002 ff37 	bl	8005596 <memcpy>
 8002728:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800272c:	2000      	movs	r0, #0
 800272e:	f7ff f847 	bl	80017c0 <configureGeneralTimer>
	enableTimer(TIMER2);
 8002732:	2000      	movs	r0, #0
 8002734:	f7fe fb41 	bl	8000dba <enableTimer>
}
 8002738:	bf00      	nop
 800273a:	3704      	adds	r7, #4
 800273c:	46bd      	mov	sp, r7
 800273e:	bd90      	pop	{r4, r7, pc}
 8002740:	200005e8 	.word	0x200005e8
 8002744:	080062a8 	.word	0x080062a8
 8002748:	0800624c 	.word	0x0800624c

0800274c <stop_measurement>:
	measure = true;
	enable_global_irq();
}

void stop_measurement(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
	disable_global_irq();
 8002750:	f7fd ffec 	bl	800072c <disable_global_irq>
	measurement = timems - measurement;
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <stop_measurement+0x24>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4b06      	ldr	r3, [pc, #24]	; (8002774 <stop_measurement+0x28>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	4a05      	ldr	r2, [pc, #20]	; (8002774 <stop_measurement+0x28>)
 8002760:	6013      	str	r3, [r2, #0]
	measure = false;
 8002762:	4b05      	ldr	r3, [pc, #20]	; (8002778 <stop_measurement+0x2c>)
 8002764:	2200      	movs	r2, #0
 8002766:	701a      	strb	r2, [r3, #0]
	enable_global_irq();
 8002768:	f7fd ffe9 	bl	800073e <enable_global_irq>
}
 800276c:	bf00      	nop
 800276e:	bd80      	pop	{r7, pc}
 8002770:	200005e8 	.word	0x200005e8
 8002774:	200005e4 	.word	0x200005e4
 8002778:	200005e0 	.word	0x200005e0

0800277c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800277c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002780:	480d      	ldr	r0, [pc, #52]	; (80027b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002782:	490e      	ldr	r1, [pc, #56]	; (80027bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002784:	4a0e      	ldr	r2, [pc, #56]	; (80027c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002788:	e002      	b.n	8002790 <LoopCopyDataInit>

0800278a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800278a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800278c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800278e:	3304      	adds	r3, #4

08002790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002794:	d3f9      	bcc.n	800278a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002796:	4a0b      	ldr	r2, [pc, #44]	; (80027c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002798:	4c0b      	ldr	r4, [pc, #44]	; (80027c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800279a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800279c:	e001      	b.n	80027a2 <LoopFillZerobss>

0800279e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800279e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027a0:	3204      	adds	r2, #4

080027a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027a4:	d3fb      	bcc.n	800279e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027a6:	f7ff ff6d 	bl	8002684 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027aa:	f002 fecd 	bl	8005548 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ae:	f7ff facd 	bl	8001d4c <main>
  bx  lr    
 80027b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027bc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80027c0:	0800632c 	.word	0x0800632c
  ldr r2, =_sbss
 80027c4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80027c8:	2000073c 	.word	0x2000073c

080027cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027cc:	e7fe      	b.n	80027cc <ADC_IRQHandler>
	...

080027d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027d4:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <HAL_Init+0x40>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a0d      	ldr	r2, [pc, #52]	; (8002810 <HAL_Init+0x40>)
 80027da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <HAL_Init+0x40>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a0a      	ldr	r2, [pc, #40]	; (8002810 <HAL_Init+0x40>)
 80027e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027ec:	4b08      	ldr	r3, [pc, #32]	; (8002810 <HAL_Init+0x40>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a07      	ldr	r2, [pc, #28]	; (8002810 <HAL_Init+0x40>)
 80027f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027f8:	2003      	movs	r0, #3
 80027fa:	f000 f931 	bl	8002a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027fe:	2000      	movs	r0, #0
 8002800:	f000 f808 	bl	8002814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002804:	f7ff fc2e 	bl	8002064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40023c00 	.word	0x40023c00

08002814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800281c:	4b12      	ldr	r3, [pc, #72]	; (8002868 <HAL_InitTick+0x54>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b12      	ldr	r3, [pc, #72]	; (800286c <HAL_InitTick+0x58>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	4619      	mov	r1, r3
 8002826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800282a:	fbb3 f3f1 	udiv	r3, r3, r1
 800282e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002832:	4618      	mov	r0, r3
 8002834:	f000 f93b 	bl	8002aae <HAL_SYSTICK_Config>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e00e      	b.n	8002860 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b0f      	cmp	r3, #15
 8002846:	d80a      	bhi.n	800285e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002848:	2200      	movs	r2, #0
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	f04f 30ff 	mov.w	r0, #4294967295
 8002850:	f000 f911 	bl	8002a76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002854:	4a06      	ldr	r2, [pc, #24]	; (8002870 <HAL_InitTick+0x5c>)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	e000      	b.n	8002860 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
}
 8002860:	4618      	mov	r0, r3
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	20000000 	.word	0x20000000
 800286c:	2000000c 	.word	0x2000000c
 8002870:	20000008 	.word	0x20000008

08002874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002878:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_IncTick+0x20>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_IncTick+0x24>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4413      	add	r3, r2
 8002884:	4a04      	ldr	r2, [pc, #16]	; (8002898 <HAL_IncTick+0x24>)
 8002886:	6013      	str	r3, [r2, #0]
}
 8002888:	bf00      	nop
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	2000000c 	.word	0x2000000c
 8002898:	200005ec 	.word	0x200005ec

0800289c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return uwTick;
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <HAL_GetTick+0x14>)
 80028a2:	681b      	ldr	r3, [r3, #0]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	200005ec 	.word	0x200005ec

080028b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028bc:	f7ff ffee 	bl	800289c <HAL_GetTick>
 80028c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028cc:	d005      	beq.n	80028da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ce:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <HAL_Delay+0x44>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4413      	add	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028da:	bf00      	nop
 80028dc:	f7ff ffde 	bl	800289c <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d8f7      	bhi.n	80028dc <HAL_Delay+0x28>
  {
  }
}
 80028ec:	bf00      	nop
 80028ee:	bf00      	nop
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	2000000c 	.word	0x2000000c

080028fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800290c:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <__NVIC_SetPriorityGrouping+0x44>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002918:	4013      	ands	r3, r2
 800291a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800292c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800292e:	4a04      	ldr	r2, [pc, #16]	; (8002940 <__NVIC_SetPriorityGrouping+0x44>)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	60d3      	str	r3, [r2, #12]
}
 8002934:	bf00      	nop
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002948:	4b04      	ldr	r3, [pc, #16]	; (800295c <__NVIC_GetPriorityGrouping+0x18>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	0a1b      	lsrs	r3, r3, #8
 800294e:	f003 0307 	and.w	r3, r3, #7
}
 8002952:	4618      	mov	r0, r3
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	6039      	str	r1, [r7, #0]
 800296a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800296c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002970:	2b00      	cmp	r3, #0
 8002972:	db0a      	blt.n	800298a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	b2da      	uxtb	r2, r3
 8002978:	490c      	ldr	r1, [pc, #48]	; (80029ac <__NVIC_SetPriority+0x4c>)
 800297a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297e:	0112      	lsls	r2, r2, #4
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	440b      	add	r3, r1
 8002984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002988:	e00a      	b.n	80029a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	b2da      	uxtb	r2, r3
 800298e:	4908      	ldr	r1, [pc, #32]	; (80029b0 <__NVIC_SetPriority+0x50>)
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	3b04      	subs	r3, #4
 8002998:	0112      	lsls	r2, r2, #4
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	440b      	add	r3, r1
 800299e:	761a      	strb	r2, [r3, #24]
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	e000e100 	.word	0xe000e100
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b089      	sub	sp, #36	; 0x24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f1c3 0307 	rsb	r3, r3, #7
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	bf28      	it	cs
 80029d2:	2304      	movcs	r3, #4
 80029d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	3304      	adds	r3, #4
 80029da:	2b06      	cmp	r3, #6
 80029dc:	d902      	bls.n	80029e4 <NVIC_EncodePriority+0x30>
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3b03      	subs	r3, #3
 80029e2:	e000      	b.n	80029e6 <NVIC_EncodePriority+0x32>
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e8:	f04f 32ff 	mov.w	r2, #4294967295
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43da      	mvns	r2, r3
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	401a      	ands	r2, r3
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	fa01 f303 	lsl.w	r3, r1, r3
 8002a06:	43d9      	mvns	r1, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a0c:	4313      	orrs	r3, r2
         );
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3724      	adds	r7, #36	; 0x24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
	...

08002a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a2c:	d301      	bcc.n	8002a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e00f      	b.n	8002a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a32:	4a0a      	ldr	r2, [pc, #40]	; (8002a5c <SysTick_Config+0x40>)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a3a:	210f      	movs	r1, #15
 8002a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a40:	f7ff ff8e 	bl	8002960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a44:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <SysTick_Config+0x40>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a4a:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <SysTick_Config+0x40>)
 8002a4c:	2207      	movs	r2, #7
 8002a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	e000e010 	.word	0xe000e010

08002a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff ff47 	bl	80028fc <__NVIC_SetPriorityGrouping>
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b086      	sub	sp, #24
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
 8002a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a88:	f7ff ff5c 	bl	8002944 <__NVIC_GetPriorityGrouping>
 8002a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	68b9      	ldr	r1, [r7, #8]
 8002a92:	6978      	ldr	r0, [r7, #20]
 8002a94:	f7ff ff8e 	bl	80029b4 <NVIC_EncodePriority>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff5d 	bl	8002960 <__NVIC_SetPriority>
}
 8002aa6:	bf00      	nop
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff ffb0 	bl	8002a1c <SysTick_Config>
 8002abc:	4603      	mov	r3, r0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b089      	sub	sp, #36	; 0x24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
 8002ae2:	e165      	b.n	8002db0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	4013      	ands	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	f040 8154 	bne.w	8002daa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d005      	beq.n	8002b1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d130      	bne.n	8002b7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	2203      	movs	r2, #3
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b50:	2201      	movs	r2, #1
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	091b      	lsrs	r3, r3, #4
 8002b66:	f003 0201 	and.w	r2, r3, #1
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 0303 	and.w	r3, r3, #3
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d017      	beq.n	8002bb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	2203      	movs	r2, #3
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 0303 	and.w	r3, r3, #3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d123      	bne.n	8002c0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	08da      	lsrs	r2, r3, #3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3208      	adds	r2, #8
 8002bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	220f      	movs	r2, #15
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4013      	ands	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	08da      	lsrs	r2, r3, #3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3208      	adds	r2, #8
 8002c06:	69b9      	ldr	r1, [r7, #24]
 8002c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	2203      	movs	r2, #3
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 0203 	and.w	r2, r3, #3
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 80ae 	beq.w	8002daa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	4b5d      	ldr	r3, [pc, #372]	; (8002dc8 <HAL_GPIO_Init+0x300>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	4a5c      	ldr	r2, [pc, #368]	; (8002dc8 <HAL_GPIO_Init+0x300>)
 8002c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c5e:	4b5a      	ldr	r3, [pc, #360]	; (8002dc8 <HAL_GPIO_Init+0x300>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c6a:	4a58      	ldr	r2, [pc, #352]	; (8002dcc <HAL_GPIO_Init+0x304>)
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	089b      	lsrs	r3, r3, #2
 8002c70:	3302      	adds	r3, #2
 8002c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	220f      	movs	r2, #15
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43db      	mvns	r3, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a4f      	ldr	r2, [pc, #316]	; (8002dd0 <HAL_GPIO_Init+0x308>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d025      	beq.n	8002ce2 <HAL_GPIO_Init+0x21a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a4e      	ldr	r2, [pc, #312]	; (8002dd4 <HAL_GPIO_Init+0x30c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d01f      	beq.n	8002cde <HAL_GPIO_Init+0x216>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a4d      	ldr	r2, [pc, #308]	; (8002dd8 <HAL_GPIO_Init+0x310>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d019      	beq.n	8002cda <HAL_GPIO_Init+0x212>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a4c      	ldr	r2, [pc, #304]	; (8002ddc <HAL_GPIO_Init+0x314>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d013      	beq.n	8002cd6 <HAL_GPIO_Init+0x20e>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a4b      	ldr	r2, [pc, #300]	; (8002de0 <HAL_GPIO_Init+0x318>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d00d      	beq.n	8002cd2 <HAL_GPIO_Init+0x20a>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a4a      	ldr	r2, [pc, #296]	; (8002de4 <HAL_GPIO_Init+0x31c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d007      	beq.n	8002cce <HAL_GPIO_Init+0x206>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a49      	ldr	r2, [pc, #292]	; (8002de8 <HAL_GPIO_Init+0x320>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d101      	bne.n	8002cca <HAL_GPIO_Init+0x202>
 8002cc6:	2306      	movs	r3, #6
 8002cc8:	e00c      	b.n	8002ce4 <HAL_GPIO_Init+0x21c>
 8002cca:	2307      	movs	r3, #7
 8002ccc:	e00a      	b.n	8002ce4 <HAL_GPIO_Init+0x21c>
 8002cce:	2305      	movs	r3, #5
 8002cd0:	e008      	b.n	8002ce4 <HAL_GPIO_Init+0x21c>
 8002cd2:	2304      	movs	r3, #4
 8002cd4:	e006      	b.n	8002ce4 <HAL_GPIO_Init+0x21c>
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e004      	b.n	8002ce4 <HAL_GPIO_Init+0x21c>
 8002cda:	2302      	movs	r3, #2
 8002cdc:	e002      	b.n	8002ce4 <HAL_GPIO_Init+0x21c>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <HAL_GPIO_Init+0x21c>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	69fa      	ldr	r2, [r7, #28]
 8002ce6:	f002 0203 	and.w	r2, r2, #3
 8002cea:	0092      	lsls	r2, r2, #2
 8002cec:	4093      	lsls	r3, r2
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cf4:	4935      	ldr	r1, [pc, #212]	; (8002dcc <HAL_GPIO_Init+0x304>)
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	089b      	lsrs	r3, r3, #2
 8002cfa:	3302      	adds	r3, #2
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d02:	4b3a      	ldr	r3, [pc, #232]	; (8002dec <HAL_GPIO_Init+0x324>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d26:	4a31      	ldr	r2, [pc, #196]	; (8002dec <HAL_GPIO_Init+0x324>)
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d2c:	4b2f      	ldr	r3, [pc, #188]	; (8002dec <HAL_GPIO_Init+0x324>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d50:	4a26      	ldr	r2, [pc, #152]	; (8002dec <HAL_GPIO_Init+0x324>)
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d56:	4b25      	ldr	r3, [pc, #148]	; (8002dec <HAL_GPIO_Init+0x324>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4013      	ands	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d7a:	4a1c      	ldr	r2, [pc, #112]	; (8002dec <HAL_GPIO_Init+0x324>)
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d80:	4b1a      	ldr	r3, [pc, #104]	; (8002dec <HAL_GPIO_Init+0x324>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002da4:	4a11      	ldr	r2, [pc, #68]	; (8002dec <HAL_GPIO_Init+0x324>)
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3301      	adds	r3, #1
 8002dae:	61fb      	str	r3, [r7, #28]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	2b0f      	cmp	r3, #15
 8002db4:	f67f ae96 	bls.w	8002ae4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002db8:	bf00      	nop
 8002dba:	bf00      	nop
 8002dbc:	3724      	adds	r7, #36	; 0x24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40013800 	.word	0x40013800
 8002dd0:	40020000 	.word	0x40020000
 8002dd4:	40020400 	.word	0x40020400
 8002dd8:	40020800 	.word	0x40020800
 8002ddc:	40020c00 	.word	0x40020c00
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40021400 	.word	0x40021400
 8002de8:	40021800 	.word	0x40021800
 8002dec:	40013c00 	.word	0x40013c00

08002df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	807b      	strh	r3, [r7, #2]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e00:	787b      	ldrb	r3, [r7, #1]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e06:	887a      	ldrh	r2, [r7, #2]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e0c:	e003      	b.n	8002e16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e0e:	887b      	ldrh	r3, [r7, #2]
 8002e10:	041a      	lsls	r2, r3, #16
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	619a      	str	r2, [r3, #24]
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e24:	b08f      	sub	sp, #60	; 0x3c
 8002e26:	af0a      	add	r7, sp, #40	; 0x28
 8002e28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e116      	b.n	8003062 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d106      	bne.n	8002e54 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7ff f978 	bl	8002144 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2203      	movs	r2, #3
 8002e58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d102      	bne.n	8002e6e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f001 fe53 	bl	8004b1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	603b      	str	r3, [r7, #0]
 8002e7e:	687e      	ldr	r6, [r7, #4]
 8002e80:	466d      	mov	r5, sp
 8002e82:	f106 0410 	add.w	r4, r6, #16
 8002e86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e92:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e96:	1d33      	adds	r3, r6, #4
 8002e98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e9a:	6838      	ldr	r0, [r7, #0]
 8002e9c:	f001 fdde 	bl	8004a5c <USB_CoreInit>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d005      	beq.n	8002eb2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e0d7      	b.n	8003062 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f001 fe41 	bl	8004b40 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	73fb      	strb	r3, [r7, #15]
 8002ec2:	e04a      	b.n	8002f5a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ec4:	7bfa      	ldrb	r2, [r7, #15]
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	4413      	add	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	333d      	adds	r3, #61	; 0x3d
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ed8:	7bfa      	ldrb	r2, [r7, #15]
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	333c      	adds	r3, #60	; 0x3c
 8002ee8:	7bfa      	ldrb	r2, [r7, #15]
 8002eea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002eec:	7bfa      	ldrb	r2, [r7, #15]
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
 8002ef0:	b298      	uxth	r0, r3
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	3344      	adds	r3, #68	; 0x44
 8002f00:	4602      	mov	r2, r0
 8002f02:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f04:	7bfa      	ldrb	r2, [r7, #15]
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	3340      	adds	r3, #64	; 0x40
 8002f14:	2200      	movs	r2, #0
 8002f16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f18:	7bfa      	ldrb	r2, [r7, #15]
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	3348      	adds	r3, #72	; 0x48
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f2c:	7bfa      	ldrb	r2, [r7, #15]
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	334c      	adds	r3, #76	; 0x4c
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f40:	7bfa      	ldrb	r2, [r7, #15]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	3354      	adds	r3, #84	; 0x54
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	3301      	adds	r3, #1
 8002f58:	73fb      	strb	r3, [r7, #15]
 8002f5a:	7bfa      	ldrb	r2, [r7, #15]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d3af      	bcc.n	8002ec4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f64:	2300      	movs	r3, #0
 8002f66:	73fb      	strb	r3, [r7, #15]
 8002f68:	e044      	b.n	8002ff4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f6a:	7bfa      	ldrb	r2, [r7, #15]
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	4413      	add	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f80:	7bfa      	ldrb	r2, [r7, #15]
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	4613      	mov	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	4413      	add	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002f92:	7bfa      	ldrb	r2, [r7, #15]
 8002f94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f96:	7bfa      	ldrb	r2, [r7, #15]
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002fa8:	2200      	movs	r2, #0
 8002faa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fac:	7bfa      	ldrb	r2, [r7, #15]
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002fc2:	7bfa      	ldrb	r2, [r7, #15]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4413      	add	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fd8:	7bfa      	ldrb	r2, [r7, #15]
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	73fb      	strb	r3, [r7, #15]
 8002ff4:	7bfa      	ldrb	r2, [r7, #15]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d3b5      	bcc.n	8002f6a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	687e      	ldr	r6, [r7, #4]
 8003006:	466d      	mov	r5, sp
 8003008:	f106 0410 	add.w	r4, r6, #16
 800300c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800300e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003010:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003012:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003014:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003018:	e885 0003 	stmia.w	r5, {r0, r1}
 800301c:	1d33      	adds	r3, r6, #4
 800301e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003020:	6838      	ldr	r0, [r7, #0]
 8003022:	f001 fdd9 	bl	8004bd8 <USB_DevInit>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e014      	b.n	8003062 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	2b01      	cmp	r3, #1
 800304e:	d102      	bne.n	8003056 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f80a 	bl	800306a <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f001 ff97 	bl	8004f8e <USB_DevDisconnect>

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800306a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800306a:	b480      	push	{r7}
 800306c:	b085      	sub	sp, #20
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800309c:	f043 0303 	orr.w	r3, r3, #3
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
	...

080030b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0cc      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030c8:	4b68      	ldr	r3, [pc, #416]	; (800326c <HAL_RCC_ClockConfig+0x1b8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 030f 	and.w	r3, r3, #15
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d90c      	bls.n	80030f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d6:	4b65      	ldr	r3, [pc, #404]	; (800326c <HAL_RCC_ClockConfig+0x1b8>)
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030de:	4b63      	ldr	r3, [pc, #396]	; (800326c <HAL_RCC_ClockConfig+0x1b8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0b8      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d020      	beq.n	800313e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003108:	4b59      	ldr	r3, [pc, #356]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	4a58      	ldr	r2, [pc, #352]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003112:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0308 	and.w	r3, r3, #8
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003120:	4b53      	ldr	r3, [pc, #332]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	4a52      	ldr	r2, [pc, #328]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800312a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800312c:	4b50      	ldr	r3, [pc, #320]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	494d      	ldr	r1, [pc, #308]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	4313      	orrs	r3, r2
 800313c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d044      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d107      	bne.n	8003162 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003152:	4b47      	ldr	r3, [pc, #284]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d119      	bne.n	8003192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e07f      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d003      	beq.n	8003172 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800316e:	2b03      	cmp	r3, #3
 8003170:	d107      	bne.n	8003182 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003172:	4b3f      	ldr	r3, [pc, #252]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d109      	bne.n	8003192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e06f      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003182:	4b3b      	ldr	r3, [pc, #236]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e067      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003192:	4b37      	ldr	r3, [pc, #220]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f023 0203 	bic.w	r2, r3, #3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	4934      	ldr	r1, [pc, #208]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031a4:	f7ff fb7a 	bl	800289c <HAL_GetTick>
 80031a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031aa:	e00a      	b.n	80031c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ac:	f7ff fb76 	bl	800289c <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e04f      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c2:	4b2b      	ldr	r3, [pc, #172]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 020c 	and.w	r2, r3, #12
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d1eb      	bne.n	80031ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031d4:	4b25      	ldr	r3, [pc, #148]	; (800326c <HAL_RCC_ClockConfig+0x1b8>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d20c      	bcs.n	80031fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e2:	4b22      	ldr	r3, [pc, #136]	; (800326c <HAL_RCC_ClockConfig+0x1b8>)
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ea:	4b20      	ldr	r3, [pc, #128]	; (800326c <HAL_RCC_ClockConfig+0x1b8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d001      	beq.n	80031fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e032      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	d008      	beq.n	800321a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003208:	4b19      	ldr	r3, [pc, #100]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	4916      	ldr	r1, [pc, #88]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	4313      	orrs	r3, r2
 8003218:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b00      	cmp	r3, #0
 8003224:	d009      	beq.n	800323a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003226:	4b12      	ldr	r3, [pc, #72]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	490e      	ldr	r1, [pc, #56]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	4313      	orrs	r3, r2
 8003238:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800323a:	f000 fb7f 	bl	800393c <HAL_RCC_GetSysClockFreq>
 800323e:	4602      	mov	r2, r0
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	091b      	lsrs	r3, r3, #4
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	490a      	ldr	r1, [pc, #40]	; (8003274 <HAL_RCC_ClockConfig+0x1c0>)
 800324c:	5ccb      	ldrb	r3, [r1, r3]
 800324e:	fa22 f303 	lsr.w	r3, r2, r3
 8003252:	4a09      	ldr	r2, [pc, #36]	; (8003278 <HAL_RCC_ClockConfig+0x1c4>)
 8003254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003256:	4b09      	ldr	r3, [pc, #36]	; (800327c <HAL_RCC_ClockConfig+0x1c8>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff fada 	bl	8002814 <HAL_InitTick>

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	40023c00 	.word	0x40023c00
 8003270:	40023800 	.word	0x40023800
 8003274:	08006234 	.word	0x08006234
 8003278:	20000000 	.word	0x20000000
 800327c:	20000008 	.word	0x20000008

08003280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003284:	4b03      	ldr	r3, [pc, #12]	; (8003294 <HAL_RCC_GetHCLKFreq+0x14>)
 8003286:	681b      	ldr	r3, [r3, #0]
}
 8003288:	4618      	mov	r0, r3
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	20000000 	.word	0x20000000

08003298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800329c:	f7ff fff0 	bl	8003280 <HAL_RCC_GetHCLKFreq>
 80032a0:	4602      	mov	r2, r0
 80032a2:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	0a9b      	lsrs	r3, r3, #10
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	4903      	ldr	r1, [pc, #12]	; (80032bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ae:	5ccb      	ldrb	r3, [r1, r3]
 80032b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40023800 	.word	0x40023800
 80032bc:	08006244 	.word	0x08006244

080032c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032c4:	f7ff ffdc 	bl	8003280 <HAL_RCC_GetHCLKFreq>
 80032c8:	4602      	mov	r2, r0
 80032ca:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	0b5b      	lsrs	r3, r3, #13
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	4903      	ldr	r1, [pc, #12]	; (80032e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032d6:	5ccb      	ldrb	r3, [r1, r3]
 80032d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032dc:	4618      	mov	r0, r3
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40023800 	.word	0x40023800
 80032e4:	08006244 	.word	0x08006244

080032e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08c      	sub	sp, #48	; 0x30
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003304:	2300      	movs	r3, #0
 8003306:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d010      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003320:	4b6f      	ldr	r3, [pc, #444]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003322:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003326:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332e:	496c      	ldr	r1, [pc, #432]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003330:	4313      	orrs	r3, r2
 8003332:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800333e:	2301      	movs	r3, #1
 8003340:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d010      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800334e:	4b64      	ldr	r3, [pc, #400]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003354:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335c:	4960      	ldr	r1, [pc, #384]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800335e:	4313      	orrs	r3, r2
 8003360:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800336c:	2301      	movs	r3, #1
 800336e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d017      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800337c:	4b58      	ldr	r3, [pc, #352]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800337e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003382:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	4955      	ldr	r1, [pc, #340]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800339a:	d101      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800339c:	2301      	movs	r3, #1
 800339e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80033a8:	2301      	movs	r3, #1
 80033aa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0308 	and.w	r3, r3, #8
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d017      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033b8:	4b49      	ldr	r3, [pc, #292]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c6:	4946      	ldr	r1, [pc, #280]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033d6:	d101      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80033d8:	2301      	movs	r3, #1
 80033da:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80033e4:	2301      	movs	r3, #1
 80033e6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0320 	and.w	r3, r3, #32
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 808a 	beq.w	800350a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	4b39      	ldr	r3, [pc, #228]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	4a38      	ldr	r2, [pc, #224]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003404:	6413      	str	r3, [r2, #64]	; 0x40
 8003406:	4b36      	ldr	r3, [pc, #216]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340e:	60bb      	str	r3, [r7, #8]
 8003410:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003412:	4b34      	ldr	r3, [pc, #208]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a33      	ldr	r2, [pc, #204]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800341c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800341e:	f7ff fa3d 	bl	800289c <HAL_GetTick>
 8003422:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003424:	e008      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003426:	f7ff fa39 	bl	800289c <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e278      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003438:	4b2a      	ldr	r3, [pc, #168]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0f0      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003444:	4b26      	ldr	r3, [pc, #152]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003448:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d02f      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345c:	6a3a      	ldr	r2, [r7, #32]
 800345e:	429a      	cmp	r2, r3
 8003460:	d028      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003462:	4b1f      	ldr	r3, [pc, #124]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800346a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800346c:	4b1e      	ldr	r3, [pc, #120]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800346e:	2201      	movs	r2, #1
 8003470:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003472:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003478:	4a19      	ldr	r2, [pc, #100]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800347e:	4b18      	ldr	r3, [pc, #96]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b01      	cmp	r3, #1
 8003488:	d114      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800348a:	f7ff fa07 	bl	800289c <HAL_GetTick>
 800348e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003490:	e00a      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003492:	f7ff fa03 	bl	800289c <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e240      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a8:	4b0d      	ldr	r3, [pc, #52]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0ee      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034c0:	d114      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x204>
 80034c2:	4b07      	ldr	r3, [pc, #28]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80034d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034d6:	4902      	ldr	r1, [pc, #8]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	608b      	str	r3, [r1, #8]
 80034dc:	e00c      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80034de:	bf00      	nop
 80034e0:	40023800 	.word	0x40023800
 80034e4:	40007000 	.word	0x40007000
 80034e8:	42470e40 	.word	0x42470e40
 80034ec:	4b4a      	ldr	r3, [pc, #296]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	4a49      	ldr	r2, [pc, #292]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034f2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80034f6:	6093      	str	r3, [r2, #8]
 80034f8:	4b47      	ldr	r3, [pc, #284]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003504:	4944      	ldr	r1, [pc, #272]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003506:	4313      	orrs	r3, r2
 8003508:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0310 	and.w	r3, r3, #16
 8003512:	2b00      	cmp	r3, #0
 8003514:	d004      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800351c:	4b3f      	ldr	r3, [pc, #252]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800351e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800352c:	4b3a      	ldr	r3, [pc, #232]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800352e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003532:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353a:	4937      	ldr	r1, [pc, #220]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800354e:	4b32      	ldr	r3, [pc, #200]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003550:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003554:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800355c:	492e      	ldr	r1, [pc, #184]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356c:	2b00      	cmp	r3, #0
 800356e:	d011      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003570:	4b29      	ldr	r3, [pc, #164]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003576:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357e:	4926      	ldr	r1, [pc, #152]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800358e:	d101      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003590:	2301      	movs	r3, #1
 8003592:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00a      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80035a0:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	491a      	ldr	r1, [pc, #104]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d011      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80035c2:	4b15      	ldr	r3, [pc, #84]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035c8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d0:	4911      	ldr	r1, [pc, #68]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035e0:	d101      	bne.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80035e2:	2301      	movs	r3, #1
 80035e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80035e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d005      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035f4:	f040 80ff 	bne.w	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80035f8:	4b09      	ldr	r3, [pc, #36]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80035fe:	f7ff f94d 	bl	800289c <HAL_GetTick>
 8003602:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003604:	e00e      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003606:	f7ff f949 	bl	800289c <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d907      	bls.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e188      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003618:	40023800 	.word	0x40023800
 800361c:	424711e0 	.word	0x424711e0
 8003620:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003624:	4b7e      	ldr	r3, [pc, #504]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1ea      	bne.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	2b00      	cmp	r3, #0
 8003642:	d009      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800364c:	2b00      	cmp	r3, #0
 800364e:	d028      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003654:	2b00      	cmp	r3, #0
 8003656:	d124      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003658:	4b71      	ldr	r3, [pc, #452]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800365a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800365e:	0c1b      	lsrs	r3, r3, #16
 8003660:	f003 0303 	and.w	r3, r3, #3
 8003664:	3301      	adds	r3, #1
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800366a:	4b6d      	ldr	r3, [pc, #436]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800366c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003670:	0e1b      	lsrs	r3, r3, #24
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	019b      	lsls	r3, r3, #6
 8003682:	431a      	orrs	r2, r3
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	085b      	lsrs	r3, r3, #1
 8003688:	3b01      	subs	r3, #1
 800368a:	041b      	lsls	r3, r3, #16
 800368c:	431a      	orrs	r2, r3
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	061b      	lsls	r3, r3, #24
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	071b      	lsls	r3, r3, #28
 800369a:	4961      	ldr	r1, [pc, #388]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800369c:	4313      	orrs	r3, r2
 800369e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d004      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036b6:	d00a      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d035      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036cc:	d130      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80036ce:	4b54      	ldr	r3, [pc, #336]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036d4:	0c1b      	lsrs	r3, r3, #16
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	3301      	adds	r3, #1
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036e0:	4b4f      	ldr	r3, [pc, #316]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036e6:	0f1b      	lsrs	r3, r3, #28
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	019b      	lsls	r3, r3, #6
 80036f8:	431a      	orrs	r2, r3
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	085b      	lsrs	r3, r3, #1
 80036fe:	3b01      	subs	r3, #1
 8003700:	041b      	lsls	r3, r3, #16
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	061b      	lsls	r3, r3, #24
 800370a:	431a      	orrs	r2, r3
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	071b      	lsls	r3, r3, #28
 8003710:	4943      	ldr	r1, [pc, #268]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003718:	4b41      	ldr	r3, [pc, #260]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800371a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800371e:	f023 021f 	bic.w	r2, r3, #31
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003726:	3b01      	subs	r3, #1
 8003728:	493d      	ldr	r1, [pc, #244]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003738:	2b00      	cmp	r3, #0
 800373a:	d029      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003740:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003744:	d124      	bne.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003746:	4b36      	ldr	r3, [pc, #216]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003748:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800374c:	0c1b      	lsrs	r3, r3, #16
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	3301      	adds	r3, #1
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003758:	4b31      	ldr	r3, [pc, #196]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800375a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800375e:	0f1b      	lsrs	r3, r3, #28
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	019b      	lsls	r3, r3, #6
 8003770:	431a      	orrs	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	085b      	lsrs	r3, r3, #1
 8003778:	3b01      	subs	r3, #1
 800377a:	041b      	lsls	r3, r3, #16
 800377c:	431a      	orrs	r2, r3
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	061b      	lsls	r3, r3, #24
 8003782:	431a      	orrs	r2, r3
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	071b      	lsls	r3, r3, #28
 8003788:	4925      	ldr	r1, [pc, #148]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800378a:	4313      	orrs	r3, r2
 800378c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003798:	2b00      	cmp	r3, #0
 800379a:	d016      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	019b      	lsls	r3, r3, #6
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	085b      	lsrs	r3, r3, #1
 80037ae:	3b01      	subs	r3, #1
 80037b0:	041b      	lsls	r3, r3, #16
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	061b      	lsls	r3, r3, #24
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	071b      	lsls	r3, r3, #28
 80037c2:	4917      	ldr	r1, [pc, #92]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80037ca:	4b16      	ldr	r3, [pc, #88]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80037d0:	f7ff f864 	bl	800289c <HAL_GetTick>
 80037d4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80037d8:	f7ff f860 	bl	800289c <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e09f      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037ea:	4b0d      	ldr	r3, [pc, #52]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0f0      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80037f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	f040 8095 	bne.w	8003928 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80037fe:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003804:	f7ff f84a 	bl	800289c <HAL_GetTick>
 8003808:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800380a:	e00f      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800380c:	f7ff f846 	bl	800289c <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d908      	bls.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e085      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800381e:	bf00      	nop
 8003820:	40023800 	.word	0x40023800
 8003824:	42470068 	.word	0x42470068
 8003828:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800382c:	4b41      	ldr	r3, [pc, #260]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003838:	d0e8      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	2b00      	cmp	r3, #0
 800384c:	d009      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003856:	2b00      	cmp	r3, #0
 8003858:	d02b      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385e:	2b00      	cmp	r3, #0
 8003860:	d127      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003862:	4b34      	ldr	r3, [pc, #208]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003868:	0c1b      	lsrs	r3, r3, #16
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	3301      	adds	r3, #1
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699a      	ldr	r2, [r3, #24]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	019b      	lsls	r3, r3, #6
 800387e:	431a      	orrs	r2, r3
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	085b      	lsrs	r3, r3, #1
 8003884:	3b01      	subs	r3, #1
 8003886:	041b      	lsls	r3, r3, #16
 8003888:	431a      	orrs	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	061b      	lsls	r3, r3, #24
 8003890:	4928      	ldr	r1, [pc, #160]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003898:	4b26      	ldr	r3, [pc, #152]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800389a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800389e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a6:	3b01      	subs	r3, #1
 80038a8:	021b      	lsls	r3, r3, #8
 80038aa:	4922      	ldr	r1, [pc, #136]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d01d      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x612>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038c6:	d118      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038c8:	4b1a      	ldr	r3, [pc, #104]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ce:	0e1b      	lsrs	r3, r3, #24
 80038d0:	f003 030f 	and.w	r3, r3, #15
 80038d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699a      	ldr	r2, [r3, #24]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	019b      	lsls	r3, r3, #6
 80038e0:	431a      	orrs	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	085b      	lsrs	r3, r3, #1
 80038e8:	3b01      	subs	r3, #1
 80038ea:	041b      	lsls	r3, r3, #16
 80038ec:	431a      	orrs	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	061b      	lsls	r3, r3, #24
 80038f2:	4910      	ldr	r1, [pc, #64]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80038fa:	4b0f      	ldr	r3, [pc, #60]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003900:	f7fe ffcc 	bl	800289c <HAL_GetTick>
 8003904:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003906:	e008      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003908:	f7fe ffc8 	bl	800289c <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e007      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800391a:	4b06      	ldr	r3, [pc, #24]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003922:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003926:	d1ef      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3730      	adds	r7, #48	; 0x30
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40023800 	.word	0x40023800
 8003938:	42470070 	.word	0x42470070

0800393c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800393c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003940:	b0ae      	sub	sp, #184	; 0xb8
 8003942:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003944:	2300      	movs	r3, #0
 8003946:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800394a:	2300      	movs	r3, #0
 800394c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003956:	2300      	movs	r3, #0
 8003958:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003962:	4bcb      	ldr	r3, [pc, #812]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x354>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 030c 	and.w	r3, r3, #12
 800396a:	2b0c      	cmp	r3, #12
 800396c:	f200 8206 	bhi.w	8003d7c <HAL_RCC_GetSysClockFreq+0x440>
 8003970:	a201      	add	r2, pc, #4	; (adr r2, 8003978 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003976:	bf00      	nop
 8003978:	080039ad 	.word	0x080039ad
 800397c:	08003d7d 	.word	0x08003d7d
 8003980:	08003d7d 	.word	0x08003d7d
 8003984:	08003d7d 	.word	0x08003d7d
 8003988:	080039b5 	.word	0x080039b5
 800398c:	08003d7d 	.word	0x08003d7d
 8003990:	08003d7d 	.word	0x08003d7d
 8003994:	08003d7d 	.word	0x08003d7d
 8003998:	080039bd 	.word	0x080039bd
 800399c:	08003d7d 	.word	0x08003d7d
 80039a0:	08003d7d 	.word	0x08003d7d
 80039a4:	08003d7d 	.word	0x08003d7d
 80039a8:	08003bad 	.word	0x08003bad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039ac:	4bb9      	ldr	r3, [pc, #740]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x358>)
 80039ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80039b2:	e1e7      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039b4:	4bb8      	ldr	r3, [pc, #736]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x35c>)
 80039b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80039ba:	e1e3      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039bc:	4bb4      	ldr	r3, [pc, #720]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x354>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039c8:	4bb1      	ldr	r3, [pc, #708]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x354>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d071      	beq.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039d4:	4bae      	ldr	r3, [pc, #696]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x354>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	099b      	lsrs	r3, r3, #6
 80039da:	2200      	movs	r2, #0
 80039dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039e0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80039e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039f0:	2300      	movs	r3, #0
 80039f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80039f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039fa:	4622      	mov	r2, r4
 80039fc:	462b      	mov	r3, r5
 80039fe:	f04f 0000 	mov.w	r0, #0
 8003a02:	f04f 0100 	mov.w	r1, #0
 8003a06:	0159      	lsls	r1, r3, #5
 8003a08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a0c:	0150      	lsls	r0, r2, #5
 8003a0e:	4602      	mov	r2, r0
 8003a10:	460b      	mov	r3, r1
 8003a12:	4621      	mov	r1, r4
 8003a14:	1a51      	subs	r1, r2, r1
 8003a16:	6439      	str	r1, [r7, #64]	; 0x40
 8003a18:	4629      	mov	r1, r5
 8003a1a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a1e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	f04f 0300 	mov.w	r3, #0
 8003a28:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003a2c:	4649      	mov	r1, r9
 8003a2e:	018b      	lsls	r3, r1, #6
 8003a30:	4641      	mov	r1, r8
 8003a32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a36:	4641      	mov	r1, r8
 8003a38:	018a      	lsls	r2, r1, #6
 8003a3a:	4641      	mov	r1, r8
 8003a3c:	1a51      	subs	r1, r2, r1
 8003a3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a40:	4649      	mov	r1, r9
 8003a42:	eb63 0301 	sbc.w	r3, r3, r1
 8003a46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	f04f 0300 	mov.w	r3, #0
 8003a50:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003a54:	4649      	mov	r1, r9
 8003a56:	00cb      	lsls	r3, r1, #3
 8003a58:	4641      	mov	r1, r8
 8003a5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a5e:	4641      	mov	r1, r8
 8003a60:	00ca      	lsls	r2, r1, #3
 8003a62:	4610      	mov	r0, r2
 8003a64:	4619      	mov	r1, r3
 8003a66:	4603      	mov	r3, r0
 8003a68:	4622      	mov	r2, r4
 8003a6a:	189b      	adds	r3, r3, r2
 8003a6c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a6e:	462b      	mov	r3, r5
 8003a70:	460a      	mov	r2, r1
 8003a72:	eb42 0303 	adc.w	r3, r2, r3
 8003a76:	637b      	str	r3, [r7, #52]	; 0x34
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	f04f 0300 	mov.w	r3, #0
 8003a80:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a84:	4629      	mov	r1, r5
 8003a86:	024b      	lsls	r3, r1, #9
 8003a88:	4621      	mov	r1, r4
 8003a8a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a8e:	4621      	mov	r1, r4
 8003a90:	024a      	lsls	r2, r1, #9
 8003a92:	4610      	mov	r0, r2
 8003a94:	4619      	mov	r1, r3
 8003a96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003aa0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003aa4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003aa8:	f7fc fc02 	bl	80002b0 <__aeabi_uldivmod>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ab6:	e067      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ab8:	4b75      	ldr	r3, [pc, #468]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x354>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	099b      	lsrs	r3, r3, #6
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ac4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003ac8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ad6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003ada:	4622      	mov	r2, r4
 8003adc:	462b      	mov	r3, r5
 8003ade:	f04f 0000 	mov.w	r0, #0
 8003ae2:	f04f 0100 	mov.w	r1, #0
 8003ae6:	0159      	lsls	r1, r3, #5
 8003ae8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aec:	0150      	lsls	r0, r2, #5
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	4621      	mov	r1, r4
 8003af4:	1a51      	subs	r1, r2, r1
 8003af6:	62b9      	str	r1, [r7, #40]	; 0x28
 8003af8:	4629      	mov	r1, r5
 8003afa:	eb63 0301 	sbc.w	r3, r3, r1
 8003afe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003b0c:	4649      	mov	r1, r9
 8003b0e:	018b      	lsls	r3, r1, #6
 8003b10:	4641      	mov	r1, r8
 8003b12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b16:	4641      	mov	r1, r8
 8003b18:	018a      	lsls	r2, r1, #6
 8003b1a:	4641      	mov	r1, r8
 8003b1c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b20:	4649      	mov	r1, r9
 8003b22:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b32:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b3a:	4692      	mov	sl, r2
 8003b3c:	469b      	mov	fp, r3
 8003b3e:	4623      	mov	r3, r4
 8003b40:	eb1a 0303 	adds.w	r3, sl, r3
 8003b44:	623b      	str	r3, [r7, #32]
 8003b46:	462b      	mov	r3, r5
 8003b48:	eb4b 0303 	adc.w	r3, fp, r3
 8003b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003b5a:	4629      	mov	r1, r5
 8003b5c:	028b      	lsls	r3, r1, #10
 8003b5e:	4621      	mov	r1, r4
 8003b60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b64:	4621      	mov	r1, r4
 8003b66:	028a      	lsls	r2, r1, #10
 8003b68:	4610      	mov	r0, r2
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b70:	2200      	movs	r2, #0
 8003b72:	673b      	str	r3, [r7, #112]	; 0x70
 8003b74:	677a      	str	r2, [r7, #116]	; 0x74
 8003b76:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003b7a:	f7fc fb99 	bl	80002b0 <__aeabi_uldivmod>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	4613      	mov	r3, r2
 8003b84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b88:	4b41      	ldr	r3, [pc, #260]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	0c1b      	lsrs	r3, r3, #16
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	3301      	adds	r3, #1
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003b9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003baa:	e0eb      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bac:	4b38      	ldr	r3, [pc, #224]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bb8:	4b35      	ldr	r3, [pc, #212]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d06b      	beq.n	8003c9c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bc4:	4b32      	ldr	r3, [pc, #200]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	099b      	lsrs	r3, r3, #6
 8003bca:	2200      	movs	r2, #0
 8003bcc:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003bd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd6:	663b      	str	r3, [r7, #96]	; 0x60
 8003bd8:	2300      	movs	r3, #0
 8003bda:	667b      	str	r3, [r7, #100]	; 0x64
 8003bdc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003be0:	4622      	mov	r2, r4
 8003be2:	462b      	mov	r3, r5
 8003be4:	f04f 0000 	mov.w	r0, #0
 8003be8:	f04f 0100 	mov.w	r1, #0
 8003bec:	0159      	lsls	r1, r3, #5
 8003bee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bf2:	0150      	lsls	r0, r2, #5
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	1a51      	subs	r1, r2, r1
 8003bfc:	61b9      	str	r1, [r7, #24]
 8003bfe:	4629      	mov	r1, r5
 8003c00:	eb63 0301 	sbc.w	r3, r3, r1
 8003c04:	61fb      	str	r3, [r7, #28]
 8003c06:	f04f 0200 	mov.w	r2, #0
 8003c0a:	f04f 0300 	mov.w	r3, #0
 8003c0e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003c12:	4659      	mov	r1, fp
 8003c14:	018b      	lsls	r3, r1, #6
 8003c16:	4651      	mov	r1, sl
 8003c18:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c1c:	4651      	mov	r1, sl
 8003c1e:	018a      	lsls	r2, r1, #6
 8003c20:	4651      	mov	r1, sl
 8003c22:	ebb2 0801 	subs.w	r8, r2, r1
 8003c26:	4659      	mov	r1, fp
 8003c28:	eb63 0901 	sbc.w	r9, r3, r1
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c38:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c3c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c40:	4690      	mov	r8, r2
 8003c42:	4699      	mov	r9, r3
 8003c44:	4623      	mov	r3, r4
 8003c46:	eb18 0303 	adds.w	r3, r8, r3
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	462b      	mov	r3, r5
 8003c4e:	eb49 0303 	adc.w	r3, r9, r3
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	f04f 0300 	mov.w	r3, #0
 8003c5c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003c60:	4629      	mov	r1, r5
 8003c62:	024b      	lsls	r3, r1, #9
 8003c64:	4621      	mov	r1, r4
 8003c66:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c6a:	4621      	mov	r1, r4
 8003c6c:	024a      	lsls	r2, r1, #9
 8003c6e:	4610      	mov	r0, r2
 8003c70:	4619      	mov	r1, r3
 8003c72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c76:	2200      	movs	r2, #0
 8003c78:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c7a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003c7c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c80:	f7fc fb16 	bl	80002b0 <__aeabi_uldivmod>
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4613      	mov	r3, r2
 8003c8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c8e:	e065      	b.n	8003d5c <HAL_RCC_GetSysClockFreq+0x420>
 8003c90:	40023800 	.word	0x40023800
 8003c94:	00f42400 	.word	0x00f42400
 8003c98:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c9c:	4b3d      	ldr	r3, [pc, #244]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x458>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	099b      	lsrs	r3, r3, #6
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cac:	653b      	str	r3, [r7, #80]	; 0x50
 8003cae:	2300      	movs	r3, #0
 8003cb0:	657b      	str	r3, [r7, #84]	; 0x54
 8003cb2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003cb6:	4642      	mov	r2, r8
 8003cb8:	464b      	mov	r3, r9
 8003cba:	f04f 0000 	mov.w	r0, #0
 8003cbe:	f04f 0100 	mov.w	r1, #0
 8003cc2:	0159      	lsls	r1, r3, #5
 8003cc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cc8:	0150      	lsls	r0, r2, #5
 8003cca:	4602      	mov	r2, r0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	4641      	mov	r1, r8
 8003cd0:	1a51      	subs	r1, r2, r1
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	4649      	mov	r1, r9
 8003cd6:	eb63 0301 	sbc.w	r3, r3, r1
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003ce8:	4659      	mov	r1, fp
 8003cea:	018b      	lsls	r3, r1, #6
 8003cec:	4651      	mov	r1, sl
 8003cee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cf2:	4651      	mov	r1, sl
 8003cf4:	018a      	lsls	r2, r1, #6
 8003cf6:	4651      	mov	r1, sl
 8003cf8:	1a54      	subs	r4, r2, r1
 8003cfa:	4659      	mov	r1, fp
 8003cfc:	eb63 0501 	sbc.w	r5, r3, r1
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	00eb      	lsls	r3, r5, #3
 8003d0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d0e:	00e2      	lsls	r2, r4, #3
 8003d10:	4614      	mov	r4, r2
 8003d12:	461d      	mov	r5, r3
 8003d14:	4643      	mov	r3, r8
 8003d16:	18e3      	adds	r3, r4, r3
 8003d18:	603b      	str	r3, [r7, #0]
 8003d1a:	464b      	mov	r3, r9
 8003d1c:	eb45 0303 	adc.w	r3, r5, r3
 8003d20:	607b      	str	r3, [r7, #4]
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	f04f 0300 	mov.w	r3, #0
 8003d2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d2e:	4629      	mov	r1, r5
 8003d30:	028b      	lsls	r3, r1, #10
 8003d32:	4621      	mov	r1, r4
 8003d34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d38:	4621      	mov	r1, r4
 8003d3a:	028a      	lsls	r2, r1, #10
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	4619      	mov	r1, r3
 8003d40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d44:	2200      	movs	r2, #0
 8003d46:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d48:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003d4a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d4e:	f7fc faaf 	bl	80002b0 <__aeabi_uldivmod>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	4613      	mov	r3, r2
 8003d58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003d5c:	4b0d      	ldr	r3, [pc, #52]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	0f1b      	lsrs	r3, r3, #28
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003d6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d7a:	e003      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d7c:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003d7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	37b8      	adds	r7, #184	; 0xb8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d92:	bf00      	nop
 8003d94:	40023800 	.word	0x40023800
 8003d98:	00f42400 	.word	0x00f42400

08003d9c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e28d      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 8083 	beq.w	8003ec2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003dbc:	4b94      	ldr	r3, [pc, #592]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 030c 	and.w	r3, r3, #12
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d019      	beq.n	8003dfc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003dc8:	4b91      	ldr	r3, [pc, #580]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	d106      	bne.n	8003de2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003dd4:	4b8e      	ldr	r3, [pc, #568]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ddc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003de0:	d00c      	beq.n	8003dfc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003de2:	4b8b      	ldr	r3, [pc, #556]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003dea:	2b0c      	cmp	r3, #12
 8003dec:	d112      	bne.n	8003e14 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dee:	4b88      	ldr	r3, [pc, #544]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dfa:	d10b      	bne.n	8003e14 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dfc:	4b84      	ldr	r3, [pc, #528]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d05b      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x124>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d157      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e25a      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e1c:	d106      	bne.n	8003e2c <HAL_RCC_OscConfig+0x90>
 8003e1e:	4b7c      	ldr	r3, [pc, #496]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a7b      	ldr	r2, [pc, #492]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	e01d      	b.n	8003e68 <HAL_RCC_OscConfig+0xcc>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e34:	d10c      	bne.n	8003e50 <HAL_RCC_OscConfig+0xb4>
 8003e36:	4b76      	ldr	r3, [pc, #472]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a75      	ldr	r2, [pc, #468]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	4b73      	ldr	r3, [pc, #460]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a72      	ldr	r2, [pc, #456]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	e00b      	b.n	8003e68 <HAL_RCC_OscConfig+0xcc>
 8003e50:	4b6f      	ldr	r3, [pc, #444]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a6e      	ldr	r2, [pc, #440]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	4b6c      	ldr	r3, [pc, #432]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a6b      	ldr	r2, [pc, #428]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d013      	beq.n	8003e98 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e70:	f7fe fd14 	bl	800289c <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e78:	f7fe fd10 	bl	800289c <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b64      	cmp	r3, #100	; 0x64
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e21f      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8a:	4b61      	ldr	r3, [pc, #388]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0f0      	beq.n	8003e78 <HAL_RCC_OscConfig+0xdc>
 8003e96:	e014      	b.n	8003ec2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e98:	f7fe fd00 	bl	800289c <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ea0:	f7fe fcfc 	bl	800289c <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b64      	cmp	r3, #100	; 0x64
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e20b      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eb2:	4b57      	ldr	r3, [pc, #348]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f0      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x104>
 8003ebe:	e000      	b.n	8003ec2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d06f      	beq.n	8003fae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ece:	4b50      	ldr	r3, [pc, #320]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 030c 	and.w	r3, r3, #12
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d017      	beq.n	8003f0a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003eda:	4b4d      	ldr	r3, [pc, #308]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d105      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ee6:	4b4a      	ldr	r3, [pc, #296]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00b      	beq.n	8003f0a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ef2:	4b47      	ldr	r3, [pc, #284]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003efa:	2b0c      	cmp	r3, #12
 8003efc:	d11c      	bne.n	8003f38 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003efe:	4b44      	ldr	r3, [pc, #272]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d116      	bne.n	8003f38 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f0a:	4b41      	ldr	r3, [pc, #260]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <HAL_RCC_OscConfig+0x186>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d001      	beq.n	8003f22 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e1d3      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f22:	4b3b      	ldr	r3, [pc, #236]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4937      	ldr	r1, [pc, #220]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f36:	e03a      	b.n	8003fae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d020      	beq.n	8003f82 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f40:	4b34      	ldr	r3, [pc, #208]	; (8004014 <HAL_RCC_OscConfig+0x278>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f46:	f7fe fca9 	bl	800289c <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f4e:	f7fe fca5 	bl	800289c <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e1b4      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f60:	4b2b      	ldr	r3, [pc, #172]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0f0      	beq.n	8003f4e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f6c:	4b28      	ldr	r3, [pc, #160]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	4925      	ldr	r1, [pc, #148]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	600b      	str	r3, [r1, #0]
 8003f80:	e015      	b.n	8003fae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f82:	4b24      	ldr	r3, [pc, #144]	; (8004014 <HAL_RCC_OscConfig+0x278>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f88:	f7fe fc88 	bl	800289c <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f90:	f7fe fc84 	bl	800289c <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e193      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fa2:	4b1b      	ldr	r3, [pc, #108]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d036      	beq.n	8004028 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d016      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fc2:	4b15      	ldr	r3, [pc, #84]	; (8004018 <HAL_RCC_OscConfig+0x27c>)
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc8:	f7fe fc68 	bl	800289c <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fd0:	f7fe fc64 	bl	800289c <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e173      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe2:	4b0b      	ldr	r3, [pc, #44]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x234>
 8003fee:	e01b      	b.n	8004028 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ff0:	4b09      	ldr	r3, [pc, #36]	; (8004018 <HAL_RCC_OscConfig+0x27c>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff6:	f7fe fc51 	bl	800289c <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ffc:	e00e      	b.n	800401c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ffe:	f7fe fc4d 	bl	800289c <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d907      	bls.n	800401c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e15c      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
 8004010:	40023800 	.word	0x40023800
 8004014:	42470000 	.word	0x42470000
 8004018:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800401c:	4b8a      	ldr	r3, [pc, #552]	; (8004248 <HAL_RCC_OscConfig+0x4ac>)
 800401e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1ea      	bne.n	8003ffe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 8097 	beq.w	8004164 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004036:	2300      	movs	r3, #0
 8004038:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800403a:	4b83      	ldr	r3, [pc, #524]	; (8004248 <HAL_RCC_OscConfig+0x4ac>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10f      	bne.n	8004066 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004046:	2300      	movs	r3, #0
 8004048:	60bb      	str	r3, [r7, #8]
 800404a:	4b7f      	ldr	r3, [pc, #508]	; (8004248 <HAL_RCC_OscConfig+0x4ac>)
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	4a7e      	ldr	r2, [pc, #504]	; (8004248 <HAL_RCC_OscConfig+0x4ac>)
 8004050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004054:	6413      	str	r3, [r2, #64]	; 0x40
 8004056:	4b7c      	ldr	r3, [pc, #496]	; (8004248 <HAL_RCC_OscConfig+0x4ac>)
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800405e:	60bb      	str	r3, [r7, #8]
 8004060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004062:	2301      	movs	r3, #1
 8004064:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004066:	4b79      	ldr	r3, [pc, #484]	; (800424c <HAL_RCC_OscConfig+0x4b0>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406e:	2b00      	cmp	r3, #0
 8004070:	d118      	bne.n	80040a4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004072:	4b76      	ldr	r3, [pc, #472]	; (800424c <HAL_RCC_OscConfig+0x4b0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a75      	ldr	r2, [pc, #468]	; (800424c <HAL_RCC_OscConfig+0x4b0>)
 8004078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800407c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800407e:	f7fe fc0d 	bl	800289c <HAL_GetTick>
 8004082:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004084:	e008      	b.n	8004098 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004086:	f7fe fc09 	bl	800289c <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e118      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004098:	4b6c      	ldr	r3, [pc, #432]	; (800424c <HAL_RCC_OscConfig+0x4b0>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0f0      	beq.n	8004086 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d106      	bne.n	80040ba <HAL_RCC_OscConfig+0x31e>
 80040ac:	4b66      	ldr	r3, [pc, #408]	; (8004248 <HAL_RCC_OscConfig+0x4ac>)
 80040ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b0:	4a65      	ldr	r2, [pc, #404]	; (8004248 <HAL_RCC_OscConfig+0x4ac>)
 80040b2:	f043 0301 	orr.w	r3, r3, #1
 80040b6:	6713      	str	r3, [r2, #112]	; 0x70
 80040b8:	e01c      	b.n	80040f4 <HAL_RCC_OscConfig+0x358>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	2b05      	cmp	r3, #5
 80040c0:	d10c      	bne.n	80040dc <HAL_RCC_OscConfig+0x340>
 80040c2:	4b61      	ldr	r3, [pc, #388]	; (8004248 <HAL_RCC_OscConfig+0x4ac>)
 80040c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c6:	4a60      	ldr	r2, [pc, #384]	; (8004248 <HAL_RCC_OscConfig+0x4ac>)
 80040c8:	f043 0304 	orr.w	r3, r3, #4
 80040cc:	6713      	str	r3, [r2, #112]	; 0x70
 80040ce:	4b5e      	ldr	r3, [pc, #376]	; (8004248 <HAL_RCC_OscConfig+0x4ac>)
 80040d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d2:	4a5d      	ldr	r2, [pc, #372]	; (8004248 <HAL_RCC_OscConfig+0x4ac>)
 80040d4:	f043 0301 	orr.w	r3, r3, #1
 80040d8:	6713      	str	r3, [r2, #112]	; 0x70
 80040da:	e00b      	b.n	80040f4 <HAL_RCC_OscConfig+0x358>
 80040dc:	4b5a      	ldr	r3, [pc, #360]	; (8004248 <HAL_RCC_OscConfig+0x4ac>)
 80040de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e0:	4a59      	ldr	r2, [pc, #356]	; (8004248 <HAL_RCC_OscConfig+0x4ac>)
 80040e2:	f023 0301 	bic.w	r3, r3, #1
 80040e6:	6713      	str	r3, [r2, #112]	; 0x70
 80040e8:	4b57      	ldr	r3, [pc, #348]	; (8004248 <HAL_RCC_OscConfig+0x4ac>)
 80040ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ec:	4a56      	ldr	r2, [pc, #344]	; (8004248 <HAL_RCC_OscConfig+0x4ac>)
 80040ee:	f023 0304 	bic.w	r3, r3, #4
 80040f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d015      	beq.n	8004128 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fc:	f7fe fbce 	bl	800289c <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004102:	e00a      	b.n	800411a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004104:	f7fe fbca 	bl	800289c <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004112:	4293      	cmp	r3, r2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e0d7      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800411a:	4b4b      	ldr	r3, [pc, #300]	; (8004248 <HAL_RCC_OscConfig+0x4ac>)
 800411c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0ee      	beq.n	8004104 <HAL_RCC_OscConfig+0x368>
 8004126:	e014      	b.n	8004152 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004128:	f7fe fbb8 	bl	800289c <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800412e:	e00a      	b.n	8004146 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004130:	f7fe fbb4 	bl	800289c <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	f241 3288 	movw	r2, #5000	; 0x1388
 800413e:	4293      	cmp	r3, r2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e0c1      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004146:	4b40      	ldr	r3, [pc, #256]	; (8004248 <HAL_RCC_OscConfig+0x4ac>)
 8004148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1ee      	bne.n	8004130 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004152:	7dfb      	ldrb	r3, [r7, #23]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d105      	bne.n	8004164 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004158:	4b3b      	ldr	r3, [pc, #236]	; (8004248 <HAL_RCC_OscConfig+0x4ac>)
 800415a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415c:	4a3a      	ldr	r2, [pc, #232]	; (8004248 <HAL_RCC_OscConfig+0x4ac>)
 800415e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004162:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 80ad 	beq.w	80042c8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800416e:	4b36      	ldr	r3, [pc, #216]	; (8004248 <HAL_RCC_OscConfig+0x4ac>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 030c 	and.w	r3, r3, #12
 8004176:	2b08      	cmp	r3, #8
 8004178:	d060      	beq.n	800423c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	2b02      	cmp	r3, #2
 8004180:	d145      	bne.n	800420e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004182:	4b33      	ldr	r3, [pc, #204]	; (8004250 <HAL_RCC_OscConfig+0x4b4>)
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004188:	f7fe fb88 	bl	800289c <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004190:	f7fe fb84 	bl	800289c <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e093      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a2:	4b29      	ldr	r3, [pc, #164]	; (8004248 <HAL_RCC_OscConfig+0x4ac>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1f0      	bne.n	8004190 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69da      	ldr	r2, [r3, #28]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	019b      	lsls	r3, r3, #6
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c4:	085b      	lsrs	r3, r3, #1
 80041c6:	3b01      	subs	r3, #1
 80041c8:	041b      	lsls	r3, r3, #16
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d0:	061b      	lsls	r3, r3, #24
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d8:	071b      	lsls	r3, r3, #28
 80041da:	491b      	ldr	r1, [pc, #108]	; (8004248 <HAL_RCC_OscConfig+0x4ac>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041e0:	4b1b      	ldr	r3, [pc, #108]	; (8004250 <HAL_RCC_OscConfig+0x4b4>)
 80041e2:	2201      	movs	r2, #1
 80041e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e6:	f7fe fb59 	bl	800289c <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ee:	f7fe fb55 	bl	800289c <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e064      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004200:	4b11      	ldr	r3, [pc, #68]	; (8004248 <HAL_RCC_OscConfig+0x4ac>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0f0      	beq.n	80041ee <HAL_RCC_OscConfig+0x452>
 800420c:	e05c      	b.n	80042c8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800420e:	4b10      	ldr	r3, [pc, #64]	; (8004250 <HAL_RCC_OscConfig+0x4b4>)
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004214:	f7fe fb42 	bl	800289c <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800421c:	f7fe fb3e 	bl	800289c <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e04d      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422e:	4b06      	ldr	r3, [pc, #24]	; (8004248 <HAL_RCC_OscConfig+0x4ac>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f0      	bne.n	800421c <HAL_RCC_OscConfig+0x480>
 800423a:	e045      	b.n	80042c8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d107      	bne.n	8004254 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e040      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
 8004248:	40023800 	.word	0x40023800
 800424c:	40007000 	.word	0x40007000
 8004250:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004254:	4b1f      	ldr	r3, [pc, #124]	; (80042d4 <HAL_RCC_OscConfig+0x538>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d030      	beq.n	80042c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800426c:	429a      	cmp	r2, r3
 800426e:	d129      	bne.n	80042c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800427a:	429a      	cmp	r2, r3
 800427c:	d122      	bne.n	80042c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004284:	4013      	ands	r3, r2
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800428a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800428c:	4293      	cmp	r3, r2
 800428e:	d119      	bne.n	80042c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429a:	085b      	lsrs	r3, r3, #1
 800429c:	3b01      	subs	r3, #1
 800429e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d10f      	bne.n	80042c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d107      	bne.n	80042c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d001      	beq.n	80042c8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e000      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40023800 	.word	0x40023800

080042d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e03f      	b.n	800436a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d106      	bne.n	8004304 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7fd fed8 	bl	80020b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2224      	movs	r2, #36	; 0x24
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800431a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f929 	bl	8004574 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	691a      	ldr	r2, [r3, #16]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004330:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695a      	ldr	r2, [r3, #20]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004340:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68da      	ldr	r2, [r3, #12]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004350:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b08a      	sub	sp, #40	; 0x28
 8004376:	af02      	add	r7, sp, #8
 8004378:	60f8      	str	r0, [r7, #12]
 800437a:	60b9      	str	r1, [r7, #8]
 800437c:	603b      	str	r3, [r7, #0]
 800437e:	4613      	mov	r3, r2
 8004380:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004382:	2300      	movs	r3, #0
 8004384:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b20      	cmp	r3, #32
 8004390:	d17c      	bne.n	800448c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <HAL_UART_Transmit+0x2c>
 8004398:	88fb      	ldrh	r3, [r7, #6]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e075      	b.n	800448e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d101      	bne.n	80043b0 <HAL_UART_Transmit+0x3e>
 80043ac:	2302      	movs	r3, #2
 80043ae:	e06e      	b.n	800448e <HAL_UART_Transmit+0x11c>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2221      	movs	r2, #33	; 0x21
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043c6:	f7fe fa69 	bl	800289c <HAL_GetTick>
 80043ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	88fa      	ldrh	r2, [r7, #6]
 80043d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	88fa      	ldrh	r2, [r7, #6]
 80043d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e0:	d108      	bne.n	80043f4 <HAL_UART_Transmit+0x82>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d104      	bne.n	80043f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80043ea:	2300      	movs	r3, #0
 80043ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	61bb      	str	r3, [r7, #24]
 80043f2:	e003      	b.n	80043fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043f8:	2300      	movs	r3, #0
 80043fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004404:	e02a      	b.n	800445c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2200      	movs	r2, #0
 800440e:	2180      	movs	r1, #128	; 0x80
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 f840 	bl	8004496 <UART_WaitOnFlagUntilTimeout>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e036      	b.n	800448e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10b      	bne.n	800443e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	461a      	mov	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004434:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	3302      	adds	r3, #2
 800443a:	61bb      	str	r3, [r7, #24]
 800443c:	e007      	b.n	800444e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	781a      	ldrb	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	3301      	adds	r3, #1
 800444c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004452:	b29b      	uxth	r3, r3
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1cf      	bne.n	8004406 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2200      	movs	r2, #0
 800446e:	2140      	movs	r1, #64	; 0x40
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 f810 	bl	8004496 <UART_WaitOnFlagUntilTimeout>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e006      	b.n	800448e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2220      	movs	r2, #32
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004488:	2300      	movs	r3, #0
 800448a:	e000      	b.n	800448e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800448c:	2302      	movs	r3, #2
  }
}
 800448e:	4618      	mov	r0, r3
 8004490:	3720      	adds	r7, #32
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b090      	sub	sp, #64	; 0x40
 800449a:	af00      	add	r7, sp, #0
 800449c:	60f8      	str	r0, [r7, #12]
 800449e:	60b9      	str	r1, [r7, #8]
 80044a0:	603b      	str	r3, [r7, #0]
 80044a2:	4613      	mov	r3, r2
 80044a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044a6:	e050      	b.n	800454a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ae:	d04c      	beq.n	800454a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d007      	beq.n	80044c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80044b6:	f7fe f9f1 	bl	800289c <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d241      	bcs.n	800454a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	330c      	adds	r3, #12
 80044cc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d0:	e853 3f00 	ldrex	r3, [r3]
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	330c      	adds	r3, #12
 80044e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044e6:	637a      	str	r2, [r7, #52]	; 0x34
 80044e8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044ee:	e841 2300 	strex	r3, r2, [r1]
 80044f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1e5      	bne.n	80044c6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3314      	adds	r3, #20
 8004500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	e853 3f00 	ldrex	r3, [r3]
 8004508:	613b      	str	r3, [r7, #16]
   return(result);
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f023 0301 	bic.w	r3, r3, #1
 8004510:	63bb      	str	r3, [r7, #56]	; 0x38
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	3314      	adds	r3, #20
 8004518:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800451a:	623a      	str	r2, [r7, #32]
 800451c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451e:	69f9      	ldr	r1, [r7, #28]
 8004520:	6a3a      	ldr	r2, [r7, #32]
 8004522:	e841 2300 	strex	r3, r2, [r1]
 8004526:	61bb      	str	r3, [r7, #24]
   return(result);
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1e5      	bne.n	80044fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2220      	movs	r2, #32
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2220      	movs	r2, #32
 800453a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e00f      	b.n	800456a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4013      	ands	r3, r2
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	429a      	cmp	r2, r3
 8004558:	bf0c      	ite	eq
 800455a:	2301      	moveq	r3, #1
 800455c:	2300      	movne	r3, #0
 800455e:	b2db      	uxtb	r3, r3
 8004560:	461a      	mov	r2, r3
 8004562:	79fb      	ldrb	r3, [r7, #7]
 8004564:	429a      	cmp	r2, r3
 8004566:	d09f      	beq.n	80044a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3740      	adds	r7, #64	; 0x40
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004578:	b0c0      	sub	sp, #256	; 0x100
 800457a:	af00      	add	r7, sp, #0
 800457c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800458c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004590:	68d9      	ldr	r1, [r3, #12]
 8004592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	ea40 0301 	orr.w	r3, r0, r1
 800459c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800459e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	431a      	orrs	r2, r3
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	431a      	orrs	r2, r3
 80045b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045cc:	f021 010c 	bic.w	r1, r1, #12
 80045d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045da:	430b      	orrs	r3, r1
 80045dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ee:	6999      	ldr	r1, [r3, #24]
 80045f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	ea40 0301 	orr.w	r3, r0, r1
 80045fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	4b8f      	ldr	r3, [pc, #572]	; (8004840 <UART_SetConfig+0x2cc>)
 8004604:	429a      	cmp	r2, r3
 8004606:	d005      	beq.n	8004614 <UART_SetConfig+0xa0>
 8004608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	4b8d      	ldr	r3, [pc, #564]	; (8004844 <UART_SetConfig+0x2d0>)
 8004610:	429a      	cmp	r2, r3
 8004612:	d104      	bne.n	800461e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004614:	f7fe fe54 	bl	80032c0 <HAL_RCC_GetPCLK2Freq>
 8004618:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800461c:	e003      	b.n	8004626 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800461e:	f7fe fe3b 	bl	8003298 <HAL_RCC_GetPCLK1Freq>
 8004622:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004630:	f040 810c 	bne.w	800484c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004634:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004638:	2200      	movs	r2, #0
 800463a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800463e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004642:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004646:	4622      	mov	r2, r4
 8004648:	462b      	mov	r3, r5
 800464a:	1891      	adds	r1, r2, r2
 800464c:	65b9      	str	r1, [r7, #88]	; 0x58
 800464e:	415b      	adcs	r3, r3
 8004650:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004652:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004656:	4621      	mov	r1, r4
 8004658:	eb12 0801 	adds.w	r8, r2, r1
 800465c:	4629      	mov	r1, r5
 800465e:	eb43 0901 	adc.w	r9, r3, r1
 8004662:	f04f 0200 	mov.w	r2, #0
 8004666:	f04f 0300 	mov.w	r3, #0
 800466a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800466e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004672:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004676:	4690      	mov	r8, r2
 8004678:	4699      	mov	r9, r3
 800467a:	4623      	mov	r3, r4
 800467c:	eb18 0303 	adds.w	r3, r8, r3
 8004680:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004684:	462b      	mov	r3, r5
 8004686:	eb49 0303 	adc.w	r3, r9, r3
 800468a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800468e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800469a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800469e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80046a2:	460b      	mov	r3, r1
 80046a4:	18db      	adds	r3, r3, r3
 80046a6:	653b      	str	r3, [r7, #80]	; 0x50
 80046a8:	4613      	mov	r3, r2
 80046aa:	eb42 0303 	adc.w	r3, r2, r3
 80046ae:	657b      	str	r3, [r7, #84]	; 0x54
 80046b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80046b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80046b8:	f7fb fdfa 	bl	80002b0 <__aeabi_uldivmod>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4b61      	ldr	r3, [pc, #388]	; (8004848 <UART_SetConfig+0x2d4>)
 80046c2:	fba3 2302 	umull	r2, r3, r3, r2
 80046c6:	095b      	lsrs	r3, r3, #5
 80046c8:	011c      	lsls	r4, r3, #4
 80046ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046ce:	2200      	movs	r2, #0
 80046d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80046d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80046dc:	4642      	mov	r2, r8
 80046de:	464b      	mov	r3, r9
 80046e0:	1891      	adds	r1, r2, r2
 80046e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80046e4:	415b      	adcs	r3, r3
 80046e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046ec:	4641      	mov	r1, r8
 80046ee:	eb12 0a01 	adds.w	sl, r2, r1
 80046f2:	4649      	mov	r1, r9
 80046f4:	eb43 0b01 	adc.w	fp, r3, r1
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004704:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004708:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800470c:	4692      	mov	sl, r2
 800470e:	469b      	mov	fp, r3
 8004710:	4643      	mov	r3, r8
 8004712:	eb1a 0303 	adds.w	r3, sl, r3
 8004716:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800471a:	464b      	mov	r3, r9
 800471c:	eb4b 0303 	adc.w	r3, fp, r3
 8004720:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004730:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004734:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004738:	460b      	mov	r3, r1
 800473a:	18db      	adds	r3, r3, r3
 800473c:	643b      	str	r3, [r7, #64]	; 0x40
 800473e:	4613      	mov	r3, r2
 8004740:	eb42 0303 	adc.w	r3, r2, r3
 8004744:	647b      	str	r3, [r7, #68]	; 0x44
 8004746:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800474a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800474e:	f7fb fdaf 	bl	80002b0 <__aeabi_uldivmod>
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
 8004756:	4611      	mov	r1, r2
 8004758:	4b3b      	ldr	r3, [pc, #236]	; (8004848 <UART_SetConfig+0x2d4>)
 800475a:	fba3 2301 	umull	r2, r3, r3, r1
 800475e:	095b      	lsrs	r3, r3, #5
 8004760:	2264      	movs	r2, #100	; 0x64
 8004762:	fb02 f303 	mul.w	r3, r2, r3
 8004766:	1acb      	subs	r3, r1, r3
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800476e:	4b36      	ldr	r3, [pc, #216]	; (8004848 <UART_SetConfig+0x2d4>)
 8004770:	fba3 2302 	umull	r2, r3, r3, r2
 8004774:	095b      	lsrs	r3, r3, #5
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800477c:	441c      	add	r4, r3
 800477e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004782:	2200      	movs	r2, #0
 8004784:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004788:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800478c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004790:	4642      	mov	r2, r8
 8004792:	464b      	mov	r3, r9
 8004794:	1891      	adds	r1, r2, r2
 8004796:	63b9      	str	r1, [r7, #56]	; 0x38
 8004798:	415b      	adcs	r3, r3
 800479a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800479c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047a0:	4641      	mov	r1, r8
 80047a2:	1851      	adds	r1, r2, r1
 80047a4:	6339      	str	r1, [r7, #48]	; 0x30
 80047a6:	4649      	mov	r1, r9
 80047a8:	414b      	adcs	r3, r1
 80047aa:	637b      	str	r3, [r7, #52]	; 0x34
 80047ac:	f04f 0200 	mov.w	r2, #0
 80047b0:	f04f 0300 	mov.w	r3, #0
 80047b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80047b8:	4659      	mov	r1, fp
 80047ba:	00cb      	lsls	r3, r1, #3
 80047bc:	4651      	mov	r1, sl
 80047be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047c2:	4651      	mov	r1, sl
 80047c4:	00ca      	lsls	r2, r1, #3
 80047c6:	4610      	mov	r0, r2
 80047c8:	4619      	mov	r1, r3
 80047ca:	4603      	mov	r3, r0
 80047cc:	4642      	mov	r2, r8
 80047ce:	189b      	adds	r3, r3, r2
 80047d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047d4:	464b      	mov	r3, r9
 80047d6:	460a      	mov	r2, r1
 80047d8:	eb42 0303 	adc.w	r3, r2, r3
 80047dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80047ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80047f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80047f4:	460b      	mov	r3, r1
 80047f6:	18db      	adds	r3, r3, r3
 80047f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80047fa:	4613      	mov	r3, r2
 80047fc:	eb42 0303 	adc.w	r3, r2, r3
 8004800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004802:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004806:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800480a:	f7fb fd51 	bl	80002b0 <__aeabi_uldivmod>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	4b0d      	ldr	r3, [pc, #52]	; (8004848 <UART_SetConfig+0x2d4>)
 8004814:	fba3 1302 	umull	r1, r3, r3, r2
 8004818:	095b      	lsrs	r3, r3, #5
 800481a:	2164      	movs	r1, #100	; 0x64
 800481c:	fb01 f303 	mul.w	r3, r1, r3
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	3332      	adds	r3, #50	; 0x32
 8004826:	4a08      	ldr	r2, [pc, #32]	; (8004848 <UART_SetConfig+0x2d4>)
 8004828:	fba2 2303 	umull	r2, r3, r2, r3
 800482c:	095b      	lsrs	r3, r3, #5
 800482e:	f003 0207 	and.w	r2, r3, #7
 8004832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4422      	add	r2, r4
 800483a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800483c:	e106      	b.n	8004a4c <UART_SetConfig+0x4d8>
 800483e:	bf00      	nop
 8004840:	40011000 	.word	0x40011000
 8004844:	40011400 	.word	0x40011400
 8004848:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800484c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004850:	2200      	movs	r2, #0
 8004852:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004856:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800485a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800485e:	4642      	mov	r2, r8
 8004860:	464b      	mov	r3, r9
 8004862:	1891      	adds	r1, r2, r2
 8004864:	6239      	str	r1, [r7, #32]
 8004866:	415b      	adcs	r3, r3
 8004868:	627b      	str	r3, [r7, #36]	; 0x24
 800486a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800486e:	4641      	mov	r1, r8
 8004870:	1854      	adds	r4, r2, r1
 8004872:	4649      	mov	r1, r9
 8004874:	eb43 0501 	adc.w	r5, r3, r1
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	00eb      	lsls	r3, r5, #3
 8004882:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004886:	00e2      	lsls	r2, r4, #3
 8004888:	4614      	mov	r4, r2
 800488a:	461d      	mov	r5, r3
 800488c:	4643      	mov	r3, r8
 800488e:	18e3      	adds	r3, r4, r3
 8004890:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004894:	464b      	mov	r3, r9
 8004896:	eb45 0303 	adc.w	r3, r5, r3
 800489a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800489e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80048aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	f04f 0300 	mov.w	r3, #0
 80048b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80048ba:	4629      	mov	r1, r5
 80048bc:	008b      	lsls	r3, r1, #2
 80048be:	4621      	mov	r1, r4
 80048c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048c4:	4621      	mov	r1, r4
 80048c6:	008a      	lsls	r2, r1, #2
 80048c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80048cc:	f7fb fcf0 	bl	80002b0 <__aeabi_uldivmod>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	4b60      	ldr	r3, [pc, #384]	; (8004a58 <UART_SetConfig+0x4e4>)
 80048d6:	fba3 2302 	umull	r2, r3, r3, r2
 80048da:	095b      	lsrs	r3, r3, #5
 80048dc:	011c      	lsls	r4, r3, #4
 80048de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048e2:	2200      	movs	r2, #0
 80048e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80048f0:	4642      	mov	r2, r8
 80048f2:	464b      	mov	r3, r9
 80048f4:	1891      	adds	r1, r2, r2
 80048f6:	61b9      	str	r1, [r7, #24]
 80048f8:	415b      	adcs	r3, r3
 80048fa:	61fb      	str	r3, [r7, #28]
 80048fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004900:	4641      	mov	r1, r8
 8004902:	1851      	adds	r1, r2, r1
 8004904:	6139      	str	r1, [r7, #16]
 8004906:	4649      	mov	r1, r9
 8004908:	414b      	adcs	r3, r1
 800490a:	617b      	str	r3, [r7, #20]
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	f04f 0300 	mov.w	r3, #0
 8004914:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004918:	4659      	mov	r1, fp
 800491a:	00cb      	lsls	r3, r1, #3
 800491c:	4651      	mov	r1, sl
 800491e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004922:	4651      	mov	r1, sl
 8004924:	00ca      	lsls	r2, r1, #3
 8004926:	4610      	mov	r0, r2
 8004928:	4619      	mov	r1, r3
 800492a:	4603      	mov	r3, r0
 800492c:	4642      	mov	r2, r8
 800492e:	189b      	adds	r3, r3, r2
 8004930:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004934:	464b      	mov	r3, r9
 8004936:	460a      	mov	r2, r1
 8004938:	eb42 0303 	adc.w	r3, r2, r3
 800493c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	67bb      	str	r3, [r7, #120]	; 0x78
 800494a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800494c:	f04f 0200 	mov.w	r2, #0
 8004950:	f04f 0300 	mov.w	r3, #0
 8004954:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004958:	4649      	mov	r1, r9
 800495a:	008b      	lsls	r3, r1, #2
 800495c:	4641      	mov	r1, r8
 800495e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004962:	4641      	mov	r1, r8
 8004964:	008a      	lsls	r2, r1, #2
 8004966:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800496a:	f7fb fca1 	bl	80002b0 <__aeabi_uldivmod>
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	4611      	mov	r1, r2
 8004974:	4b38      	ldr	r3, [pc, #224]	; (8004a58 <UART_SetConfig+0x4e4>)
 8004976:	fba3 2301 	umull	r2, r3, r3, r1
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	2264      	movs	r2, #100	; 0x64
 800497e:	fb02 f303 	mul.w	r3, r2, r3
 8004982:	1acb      	subs	r3, r1, r3
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	3332      	adds	r3, #50	; 0x32
 8004988:	4a33      	ldr	r2, [pc, #204]	; (8004a58 <UART_SetConfig+0x4e4>)
 800498a:	fba2 2303 	umull	r2, r3, r2, r3
 800498e:	095b      	lsrs	r3, r3, #5
 8004990:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004994:	441c      	add	r4, r3
 8004996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800499a:	2200      	movs	r2, #0
 800499c:	673b      	str	r3, [r7, #112]	; 0x70
 800499e:	677a      	str	r2, [r7, #116]	; 0x74
 80049a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80049a4:	4642      	mov	r2, r8
 80049a6:	464b      	mov	r3, r9
 80049a8:	1891      	adds	r1, r2, r2
 80049aa:	60b9      	str	r1, [r7, #8]
 80049ac:	415b      	adcs	r3, r3
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049b4:	4641      	mov	r1, r8
 80049b6:	1851      	adds	r1, r2, r1
 80049b8:	6039      	str	r1, [r7, #0]
 80049ba:	4649      	mov	r1, r9
 80049bc:	414b      	adcs	r3, r1
 80049be:	607b      	str	r3, [r7, #4]
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	f04f 0300 	mov.w	r3, #0
 80049c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049cc:	4659      	mov	r1, fp
 80049ce:	00cb      	lsls	r3, r1, #3
 80049d0:	4651      	mov	r1, sl
 80049d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049d6:	4651      	mov	r1, sl
 80049d8:	00ca      	lsls	r2, r1, #3
 80049da:	4610      	mov	r0, r2
 80049dc:	4619      	mov	r1, r3
 80049de:	4603      	mov	r3, r0
 80049e0:	4642      	mov	r2, r8
 80049e2:	189b      	adds	r3, r3, r2
 80049e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80049e6:	464b      	mov	r3, r9
 80049e8:	460a      	mov	r2, r1
 80049ea:	eb42 0303 	adc.w	r3, r2, r3
 80049ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	663b      	str	r3, [r7, #96]	; 0x60
 80049fa:	667a      	str	r2, [r7, #100]	; 0x64
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a08:	4649      	mov	r1, r9
 8004a0a:	008b      	lsls	r3, r1, #2
 8004a0c:	4641      	mov	r1, r8
 8004a0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a12:	4641      	mov	r1, r8
 8004a14:	008a      	lsls	r2, r1, #2
 8004a16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a1a:	f7fb fc49 	bl	80002b0 <__aeabi_uldivmod>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	460b      	mov	r3, r1
 8004a22:	4b0d      	ldr	r3, [pc, #52]	; (8004a58 <UART_SetConfig+0x4e4>)
 8004a24:	fba3 1302 	umull	r1, r3, r3, r2
 8004a28:	095b      	lsrs	r3, r3, #5
 8004a2a:	2164      	movs	r1, #100	; 0x64
 8004a2c:	fb01 f303 	mul.w	r3, r1, r3
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	3332      	adds	r3, #50	; 0x32
 8004a36:	4a08      	ldr	r2, [pc, #32]	; (8004a58 <UART_SetConfig+0x4e4>)
 8004a38:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3c:	095b      	lsrs	r3, r3, #5
 8004a3e:	f003 020f 	and.w	r2, r3, #15
 8004a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4422      	add	r2, r4
 8004a4a:	609a      	str	r2, [r3, #8]
}
 8004a4c:	bf00      	nop
 8004a4e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a52:	46bd      	mov	sp, r7
 8004a54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a58:	51eb851f 	.word	0x51eb851f

08004a5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a5c:	b084      	sub	sp, #16
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b084      	sub	sp, #16
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
 8004a66:	f107 001c 	add.w	r0, r7, #28
 8004a6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d122      	bne.n	8004aba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d105      	bne.n	8004aae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 fa9c 	bl	8004fec <USB_CoreReset>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	73fb      	strb	r3, [r7, #15]
 8004ab8:	e01a      	b.n	8004af0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 fa90 	bl	8004fec <USB_CoreReset>
 8004acc:	4603      	mov	r3, r0
 8004ace:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d106      	bne.n	8004ae4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ada:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	639a      	str	r2, [r3, #56]	; 0x38
 8004ae2:	e005      	b.n	8004af0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d10b      	bne.n	8004b0e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f043 0206 	orr.w	r2, r3, #6
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f043 0220 	orr.w	r2, r3, #32
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b1a:	b004      	add	sp, #16
 8004b1c:	4770      	bx	lr

08004b1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f023 0201 	bic.w	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b5c:	78fb      	ldrb	r3, [r7, #3]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d115      	bne.n	8004b8e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b6e:	2001      	movs	r0, #1
 8004b70:	f7fd fea0 	bl	80028b4 <HAL_Delay>
      ms++;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	3301      	adds	r3, #1
 8004b78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 fa28 	bl	8004fd0 <USB_GetMode>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d01e      	beq.n	8004bc4 <USB_SetCurrentMode+0x84>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2b31      	cmp	r3, #49	; 0x31
 8004b8a:	d9f0      	bls.n	8004b6e <USB_SetCurrentMode+0x2e>
 8004b8c:	e01a      	b.n	8004bc4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b8e:	78fb      	ldrb	r3, [r7, #3]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d115      	bne.n	8004bc0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ba0:	2001      	movs	r0, #1
 8004ba2:	f7fd fe87 	bl	80028b4 <HAL_Delay>
      ms++;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 fa0f 	bl	8004fd0 <USB_GetMode>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d005      	beq.n	8004bc4 <USB_SetCurrentMode+0x84>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2b31      	cmp	r3, #49	; 0x31
 8004bbc:	d9f0      	bls.n	8004ba0 <USB_SetCurrentMode+0x60>
 8004bbe:	e001      	b.n	8004bc4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e005      	b.n	8004bd0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2b32      	cmp	r3, #50	; 0x32
 8004bc8:	d101      	bne.n	8004bce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e000      	b.n	8004bd0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bd8:	b084      	sub	sp, #16
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b086      	sub	sp, #24
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004be6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	613b      	str	r3, [r7, #16]
 8004bf6:	e009      	b.n	8004c0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	3340      	adds	r3, #64	; 0x40
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	2200      	movs	r2, #0
 8004c04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	613b      	str	r3, [r7, #16]
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	2b0e      	cmp	r3, #14
 8004c10:	d9f2      	bls.n	8004bf8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d11c      	bne.n	8004c52 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c26:	f043 0302 	orr.w	r3, r3, #2
 8004c2a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c30:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	e005      	b.n	8004c5e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c64:	461a      	mov	r2, r3
 8004c66:	2300      	movs	r3, #0
 8004c68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c70:	4619      	mov	r1, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c78:	461a      	mov	r2, r3
 8004c7a:	680b      	ldr	r3, [r1, #0]
 8004c7c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d10c      	bne.n	8004c9e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d104      	bne.n	8004c94 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 f965 	bl	8004f5c <USB_SetDevSpeed>
 8004c92:	e008      	b.n	8004ca6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004c94:	2101      	movs	r1, #1
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f960 	bl	8004f5c <USB_SetDevSpeed>
 8004c9c:	e003      	b.n	8004ca6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c9e:	2103      	movs	r1, #3
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f95b 	bl	8004f5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ca6:	2110      	movs	r1, #16
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 f8f3 	bl	8004e94 <USB_FlushTxFifo>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f91f 	bl	8004efc <USB_FlushRxFifo>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cce:	461a      	mov	r2, r3
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cda:	461a      	mov	r2, r3
 8004cdc:	2300      	movs	r3, #0
 8004cde:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	2300      	movs	r3, #0
 8004cea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cec:	2300      	movs	r3, #0
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	e043      	b.n	8004d7a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d08:	d118      	bne.n	8004d3c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10a      	bne.n	8004d26 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d22:	6013      	str	r3, [r2, #0]
 8004d24:	e013      	b.n	8004d4e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d32:	461a      	mov	r2, r3
 8004d34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	e008      	b.n	8004d4e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d48:	461a      	mov	r2, r3
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	3301      	adds	r3, #1
 8004d78:	613b      	str	r3, [r7, #16]
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d3b7      	bcc.n	8004cf2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d82:	2300      	movs	r3, #0
 8004d84:	613b      	str	r3, [r7, #16]
 8004d86:	e043      	b.n	8004e10 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d9e:	d118      	bne.n	8004dd2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10a      	bne.n	8004dbc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db2:	461a      	mov	r2, r3
 8004db4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	e013      	b.n	8004de4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc8:	461a      	mov	r2, r3
 8004dca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004dce:	6013      	str	r3, [r2, #0]
 8004dd0:	e008      	b.n	8004de4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dde:	461a      	mov	r2, r3
 8004de0:	2300      	movs	r3, #0
 8004de2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df0:	461a      	mov	r2, r3
 8004df2:	2300      	movs	r3, #0
 8004df4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e02:	461a      	mov	r2, r3
 8004e04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	613b      	str	r3, [r7, #16]
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d3b7      	bcc.n	8004d88 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e2a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004e38:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d105      	bne.n	8004e4c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	f043 0210 	orr.w	r2, r3, #16
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	699a      	ldr	r2, [r3, #24]
 8004e50:	4b0f      	ldr	r3, [pc, #60]	; (8004e90 <USB_DevInit+0x2b8>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d005      	beq.n	8004e6a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	f043 0208 	orr.w	r2, r3, #8
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d107      	bne.n	8004e80 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e78:	f043 0304 	orr.w	r3, r3, #4
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3718      	adds	r7, #24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e8c:	b004      	add	sp, #16
 8004e8e:	4770      	bx	lr
 8004e90:	803c3800 	.word	0x803c3800

08004e94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4a13      	ldr	r2, [pc, #76]	; (8004ef8 <USB_FlushTxFifo+0x64>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d901      	bls.n	8004eb4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e01b      	b.n	8004eec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	daf2      	bge.n	8004ea2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	019b      	lsls	r3, r3, #6
 8004ec4:	f043 0220 	orr.w	r2, r3, #32
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	4a08      	ldr	r2, [pc, #32]	; (8004ef8 <USB_FlushTxFifo+0x64>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d901      	bls.n	8004ede <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e006      	b.n	8004eec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	f003 0320 	and.w	r3, r3, #32
 8004ee6:	2b20      	cmp	r3, #32
 8004ee8:	d0f0      	beq.n	8004ecc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	00030d40 	.word	0x00030d40

08004efc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	4a11      	ldr	r2, [pc, #68]	; (8004f58 <USB_FlushRxFifo+0x5c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d901      	bls.n	8004f1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e018      	b.n	8004f4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	daf2      	bge.n	8004f08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2210      	movs	r2, #16
 8004f2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	4a08      	ldr	r2, [pc, #32]	; (8004f58 <USB_FlushRxFifo+0x5c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d901      	bls.n	8004f3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e006      	b.n	8004f4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	f003 0310 	and.w	r3, r3, #16
 8004f46:	2b10      	cmp	r3, #16
 8004f48:	d0f0      	beq.n	8004f2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3714      	adds	r7, #20
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	00030d40 	.word	0x00030d40

08004f5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	460b      	mov	r3, r1
 8004f66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	78fb      	ldrb	r3, [r7, #3]
 8004f76:	68f9      	ldr	r1, [r7, #12]
 8004f78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b085      	sub	sp, #20
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004fa8:	f023 0303 	bic.w	r3, r3, #3
 8004fac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fbc:	f043 0302 	orr.w	r3, r3, #2
 8004fc0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	f003 0301 	and.w	r3, r3, #1
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	4a13      	ldr	r2, [pc, #76]	; (8005050 <USB_CoreReset+0x64>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d901      	bls.n	800500a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e01b      	b.n	8005042 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	2b00      	cmp	r3, #0
 8005010:	daf2      	bge.n	8004ff8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005012:	2300      	movs	r3, #0
 8005014:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	f043 0201 	orr.w	r2, r3, #1
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	3301      	adds	r3, #1
 8005026:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4a09      	ldr	r2, [pc, #36]	; (8005050 <USB_CoreReset+0x64>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d901      	bls.n	8005034 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e006      	b.n	8005042 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b01      	cmp	r3, #1
 800503e:	d0f0      	beq.n	8005022 <USB_CoreReset+0x36>

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	00030d40 	.word	0x00030d40

08005054 <__assert_func>:
 8005054:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005056:	4614      	mov	r4, r2
 8005058:	461a      	mov	r2, r3
 800505a:	4b09      	ldr	r3, [pc, #36]	; (8005080 <__assert_func+0x2c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4605      	mov	r5, r0
 8005060:	68d8      	ldr	r0, [r3, #12]
 8005062:	b14c      	cbz	r4, 8005078 <__assert_func+0x24>
 8005064:	4b07      	ldr	r3, [pc, #28]	; (8005084 <__assert_func+0x30>)
 8005066:	9100      	str	r1, [sp, #0]
 8005068:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800506c:	4906      	ldr	r1, [pc, #24]	; (8005088 <__assert_func+0x34>)
 800506e:	462b      	mov	r3, r5
 8005070:	f000 f8b2 	bl	80051d8 <fiprintf>
 8005074:	f000 fa9d 	bl	80055b2 <abort>
 8005078:	4b04      	ldr	r3, [pc, #16]	; (800508c <__assert_func+0x38>)
 800507a:	461c      	mov	r4, r3
 800507c:	e7f3      	b.n	8005066 <__assert_func+0x12>
 800507e:	bf00      	nop
 8005080:	20000068 	.word	0x20000068
 8005084:	080062aa 	.word	0x080062aa
 8005088:	080062b7 	.word	0x080062b7
 800508c:	080062e5 	.word	0x080062e5

08005090 <std>:
 8005090:	2300      	movs	r3, #0
 8005092:	b510      	push	{r4, lr}
 8005094:	4604      	mov	r4, r0
 8005096:	e9c0 3300 	strd	r3, r3, [r0]
 800509a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800509e:	6083      	str	r3, [r0, #8]
 80050a0:	8181      	strh	r1, [r0, #12]
 80050a2:	6643      	str	r3, [r0, #100]	; 0x64
 80050a4:	81c2      	strh	r2, [r0, #14]
 80050a6:	6183      	str	r3, [r0, #24]
 80050a8:	4619      	mov	r1, r3
 80050aa:	2208      	movs	r2, #8
 80050ac:	305c      	adds	r0, #92	; 0x5c
 80050ae:	f000 f9f7 	bl	80054a0 <memset>
 80050b2:	4b0d      	ldr	r3, [pc, #52]	; (80050e8 <std+0x58>)
 80050b4:	6263      	str	r3, [r4, #36]	; 0x24
 80050b6:	4b0d      	ldr	r3, [pc, #52]	; (80050ec <std+0x5c>)
 80050b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80050ba:	4b0d      	ldr	r3, [pc, #52]	; (80050f0 <std+0x60>)
 80050bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050be:	4b0d      	ldr	r3, [pc, #52]	; (80050f4 <std+0x64>)
 80050c0:	6323      	str	r3, [r4, #48]	; 0x30
 80050c2:	4b0d      	ldr	r3, [pc, #52]	; (80050f8 <std+0x68>)
 80050c4:	6224      	str	r4, [r4, #32]
 80050c6:	429c      	cmp	r4, r3
 80050c8:	d006      	beq.n	80050d8 <std+0x48>
 80050ca:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80050ce:	4294      	cmp	r4, r2
 80050d0:	d002      	beq.n	80050d8 <std+0x48>
 80050d2:	33d0      	adds	r3, #208	; 0xd0
 80050d4:	429c      	cmp	r4, r3
 80050d6:	d105      	bne.n	80050e4 <std+0x54>
 80050d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80050dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050e0:	f000 ba56 	b.w	8005590 <__retarget_lock_init_recursive>
 80050e4:	bd10      	pop	{r4, pc}
 80050e6:	bf00      	nop
 80050e8:	080052f1 	.word	0x080052f1
 80050ec:	08005313 	.word	0x08005313
 80050f0:	0800534b 	.word	0x0800534b
 80050f4:	0800536f 	.word	0x0800536f
 80050f8:	200005f0 	.word	0x200005f0

080050fc <stdio_exit_handler>:
 80050fc:	4a02      	ldr	r2, [pc, #8]	; (8005108 <stdio_exit_handler+0xc>)
 80050fe:	4903      	ldr	r1, [pc, #12]	; (800510c <stdio_exit_handler+0x10>)
 8005100:	4803      	ldr	r0, [pc, #12]	; (8005110 <stdio_exit_handler+0x14>)
 8005102:	f000 b87b 	b.w	80051fc <_fwalk_sglue>
 8005106:	bf00      	nop
 8005108:	20000010 	.word	0x20000010
 800510c:	08005e65 	.word	0x08005e65
 8005110:	2000001c 	.word	0x2000001c

08005114 <cleanup_stdio>:
 8005114:	6841      	ldr	r1, [r0, #4]
 8005116:	4b0c      	ldr	r3, [pc, #48]	; (8005148 <cleanup_stdio+0x34>)
 8005118:	4299      	cmp	r1, r3
 800511a:	b510      	push	{r4, lr}
 800511c:	4604      	mov	r4, r0
 800511e:	d001      	beq.n	8005124 <cleanup_stdio+0x10>
 8005120:	f000 fea0 	bl	8005e64 <_fflush_r>
 8005124:	68a1      	ldr	r1, [r4, #8]
 8005126:	4b09      	ldr	r3, [pc, #36]	; (800514c <cleanup_stdio+0x38>)
 8005128:	4299      	cmp	r1, r3
 800512a:	d002      	beq.n	8005132 <cleanup_stdio+0x1e>
 800512c:	4620      	mov	r0, r4
 800512e:	f000 fe99 	bl	8005e64 <_fflush_r>
 8005132:	68e1      	ldr	r1, [r4, #12]
 8005134:	4b06      	ldr	r3, [pc, #24]	; (8005150 <cleanup_stdio+0x3c>)
 8005136:	4299      	cmp	r1, r3
 8005138:	d004      	beq.n	8005144 <cleanup_stdio+0x30>
 800513a:	4620      	mov	r0, r4
 800513c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005140:	f000 be90 	b.w	8005e64 <_fflush_r>
 8005144:	bd10      	pop	{r4, pc}
 8005146:	bf00      	nop
 8005148:	200005f0 	.word	0x200005f0
 800514c:	20000658 	.word	0x20000658
 8005150:	200006c0 	.word	0x200006c0

08005154 <global_stdio_init.part.0>:
 8005154:	b510      	push	{r4, lr}
 8005156:	4b0b      	ldr	r3, [pc, #44]	; (8005184 <global_stdio_init.part.0+0x30>)
 8005158:	4c0b      	ldr	r4, [pc, #44]	; (8005188 <global_stdio_init.part.0+0x34>)
 800515a:	4a0c      	ldr	r2, [pc, #48]	; (800518c <global_stdio_init.part.0+0x38>)
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	4620      	mov	r0, r4
 8005160:	2200      	movs	r2, #0
 8005162:	2104      	movs	r1, #4
 8005164:	f7ff ff94 	bl	8005090 <std>
 8005168:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800516c:	2201      	movs	r2, #1
 800516e:	2109      	movs	r1, #9
 8005170:	f7ff ff8e 	bl	8005090 <std>
 8005174:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005178:	2202      	movs	r2, #2
 800517a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800517e:	2112      	movs	r1, #18
 8005180:	f7ff bf86 	b.w	8005090 <std>
 8005184:	20000728 	.word	0x20000728
 8005188:	200005f0 	.word	0x200005f0
 800518c:	080050fd 	.word	0x080050fd

08005190 <__sfp_lock_acquire>:
 8005190:	4801      	ldr	r0, [pc, #4]	; (8005198 <__sfp_lock_acquire+0x8>)
 8005192:	f000 b9fe 	b.w	8005592 <__retarget_lock_acquire_recursive>
 8005196:	bf00      	nop
 8005198:	20000731 	.word	0x20000731

0800519c <__sfp_lock_release>:
 800519c:	4801      	ldr	r0, [pc, #4]	; (80051a4 <__sfp_lock_release+0x8>)
 800519e:	f000 b9f9 	b.w	8005594 <__retarget_lock_release_recursive>
 80051a2:	bf00      	nop
 80051a4:	20000731 	.word	0x20000731

080051a8 <__sinit>:
 80051a8:	b510      	push	{r4, lr}
 80051aa:	4604      	mov	r4, r0
 80051ac:	f7ff fff0 	bl	8005190 <__sfp_lock_acquire>
 80051b0:	6a23      	ldr	r3, [r4, #32]
 80051b2:	b11b      	cbz	r3, 80051bc <__sinit+0x14>
 80051b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051b8:	f7ff bff0 	b.w	800519c <__sfp_lock_release>
 80051bc:	4b04      	ldr	r3, [pc, #16]	; (80051d0 <__sinit+0x28>)
 80051be:	6223      	str	r3, [r4, #32]
 80051c0:	4b04      	ldr	r3, [pc, #16]	; (80051d4 <__sinit+0x2c>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1f5      	bne.n	80051b4 <__sinit+0xc>
 80051c8:	f7ff ffc4 	bl	8005154 <global_stdio_init.part.0>
 80051cc:	e7f2      	b.n	80051b4 <__sinit+0xc>
 80051ce:	bf00      	nop
 80051d0:	08005115 	.word	0x08005115
 80051d4:	20000728 	.word	0x20000728

080051d8 <fiprintf>:
 80051d8:	b40e      	push	{r1, r2, r3}
 80051da:	b503      	push	{r0, r1, lr}
 80051dc:	4601      	mov	r1, r0
 80051de:	ab03      	add	r3, sp, #12
 80051e0:	4805      	ldr	r0, [pc, #20]	; (80051f8 <fiprintf+0x20>)
 80051e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80051e6:	6800      	ldr	r0, [r0, #0]
 80051e8:	9301      	str	r3, [sp, #4]
 80051ea:	f000 fb0b 	bl	8005804 <_vfiprintf_r>
 80051ee:	b002      	add	sp, #8
 80051f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80051f4:	b003      	add	sp, #12
 80051f6:	4770      	bx	lr
 80051f8:	20000068 	.word	0x20000068

080051fc <_fwalk_sglue>:
 80051fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005200:	4607      	mov	r7, r0
 8005202:	4688      	mov	r8, r1
 8005204:	4614      	mov	r4, r2
 8005206:	2600      	movs	r6, #0
 8005208:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800520c:	f1b9 0901 	subs.w	r9, r9, #1
 8005210:	d505      	bpl.n	800521e <_fwalk_sglue+0x22>
 8005212:	6824      	ldr	r4, [r4, #0]
 8005214:	2c00      	cmp	r4, #0
 8005216:	d1f7      	bne.n	8005208 <_fwalk_sglue+0xc>
 8005218:	4630      	mov	r0, r6
 800521a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800521e:	89ab      	ldrh	r3, [r5, #12]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d907      	bls.n	8005234 <_fwalk_sglue+0x38>
 8005224:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005228:	3301      	adds	r3, #1
 800522a:	d003      	beq.n	8005234 <_fwalk_sglue+0x38>
 800522c:	4629      	mov	r1, r5
 800522e:	4638      	mov	r0, r7
 8005230:	47c0      	blx	r8
 8005232:	4306      	orrs	r6, r0
 8005234:	3568      	adds	r5, #104	; 0x68
 8005236:	e7e9      	b.n	800520c <_fwalk_sglue+0x10>

08005238 <_puts_r>:
 8005238:	6a03      	ldr	r3, [r0, #32]
 800523a:	b570      	push	{r4, r5, r6, lr}
 800523c:	6884      	ldr	r4, [r0, #8]
 800523e:	4605      	mov	r5, r0
 8005240:	460e      	mov	r6, r1
 8005242:	b90b      	cbnz	r3, 8005248 <_puts_r+0x10>
 8005244:	f7ff ffb0 	bl	80051a8 <__sinit>
 8005248:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800524a:	07db      	lsls	r3, r3, #31
 800524c:	d405      	bmi.n	800525a <_puts_r+0x22>
 800524e:	89a3      	ldrh	r3, [r4, #12]
 8005250:	0598      	lsls	r0, r3, #22
 8005252:	d402      	bmi.n	800525a <_puts_r+0x22>
 8005254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005256:	f000 f99c 	bl	8005592 <__retarget_lock_acquire_recursive>
 800525a:	89a3      	ldrh	r3, [r4, #12]
 800525c:	0719      	lsls	r1, r3, #28
 800525e:	d513      	bpl.n	8005288 <_puts_r+0x50>
 8005260:	6923      	ldr	r3, [r4, #16]
 8005262:	b18b      	cbz	r3, 8005288 <_puts_r+0x50>
 8005264:	3e01      	subs	r6, #1
 8005266:	68a3      	ldr	r3, [r4, #8]
 8005268:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800526c:	3b01      	subs	r3, #1
 800526e:	60a3      	str	r3, [r4, #8]
 8005270:	b9e9      	cbnz	r1, 80052ae <_puts_r+0x76>
 8005272:	2b00      	cmp	r3, #0
 8005274:	da2e      	bge.n	80052d4 <_puts_r+0x9c>
 8005276:	4622      	mov	r2, r4
 8005278:	210a      	movs	r1, #10
 800527a:	4628      	mov	r0, r5
 800527c:	f000 f87b 	bl	8005376 <__swbuf_r>
 8005280:	3001      	adds	r0, #1
 8005282:	d007      	beq.n	8005294 <_puts_r+0x5c>
 8005284:	250a      	movs	r5, #10
 8005286:	e007      	b.n	8005298 <_puts_r+0x60>
 8005288:	4621      	mov	r1, r4
 800528a:	4628      	mov	r0, r5
 800528c:	f000 f8b0 	bl	80053f0 <__swsetup_r>
 8005290:	2800      	cmp	r0, #0
 8005292:	d0e7      	beq.n	8005264 <_puts_r+0x2c>
 8005294:	f04f 35ff 	mov.w	r5, #4294967295
 8005298:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800529a:	07da      	lsls	r2, r3, #31
 800529c:	d405      	bmi.n	80052aa <_puts_r+0x72>
 800529e:	89a3      	ldrh	r3, [r4, #12]
 80052a0:	059b      	lsls	r3, r3, #22
 80052a2:	d402      	bmi.n	80052aa <_puts_r+0x72>
 80052a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052a6:	f000 f975 	bl	8005594 <__retarget_lock_release_recursive>
 80052aa:	4628      	mov	r0, r5
 80052ac:	bd70      	pop	{r4, r5, r6, pc}
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	da04      	bge.n	80052bc <_puts_r+0x84>
 80052b2:	69a2      	ldr	r2, [r4, #24]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	dc06      	bgt.n	80052c6 <_puts_r+0x8e>
 80052b8:	290a      	cmp	r1, #10
 80052ba:	d004      	beq.n	80052c6 <_puts_r+0x8e>
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	6022      	str	r2, [r4, #0]
 80052c2:	7019      	strb	r1, [r3, #0]
 80052c4:	e7cf      	b.n	8005266 <_puts_r+0x2e>
 80052c6:	4622      	mov	r2, r4
 80052c8:	4628      	mov	r0, r5
 80052ca:	f000 f854 	bl	8005376 <__swbuf_r>
 80052ce:	3001      	adds	r0, #1
 80052d0:	d1c9      	bne.n	8005266 <_puts_r+0x2e>
 80052d2:	e7df      	b.n	8005294 <_puts_r+0x5c>
 80052d4:	6823      	ldr	r3, [r4, #0]
 80052d6:	250a      	movs	r5, #10
 80052d8:	1c5a      	adds	r2, r3, #1
 80052da:	6022      	str	r2, [r4, #0]
 80052dc:	701d      	strb	r5, [r3, #0]
 80052de:	e7db      	b.n	8005298 <_puts_r+0x60>

080052e0 <puts>:
 80052e0:	4b02      	ldr	r3, [pc, #8]	; (80052ec <puts+0xc>)
 80052e2:	4601      	mov	r1, r0
 80052e4:	6818      	ldr	r0, [r3, #0]
 80052e6:	f7ff bfa7 	b.w	8005238 <_puts_r>
 80052ea:	bf00      	nop
 80052ec:	20000068 	.word	0x20000068

080052f0 <__sread>:
 80052f0:	b510      	push	{r4, lr}
 80052f2:	460c      	mov	r4, r1
 80052f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052f8:	f000 f8fc 	bl	80054f4 <_read_r>
 80052fc:	2800      	cmp	r0, #0
 80052fe:	bfab      	itete	ge
 8005300:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005302:	89a3      	ldrhlt	r3, [r4, #12]
 8005304:	181b      	addge	r3, r3, r0
 8005306:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800530a:	bfac      	ite	ge
 800530c:	6563      	strge	r3, [r4, #84]	; 0x54
 800530e:	81a3      	strhlt	r3, [r4, #12]
 8005310:	bd10      	pop	{r4, pc}

08005312 <__swrite>:
 8005312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005316:	461f      	mov	r7, r3
 8005318:	898b      	ldrh	r3, [r1, #12]
 800531a:	05db      	lsls	r3, r3, #23
 800531c:	4605      	mov	r5, r0
 800531e:	460c      	mov	r4, r1
 8005320:	4616      	mov	r6, r2
 8005322:	d505      	bpl.n	8005330 <__swrite+0x1e>
 8005324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005328:	2302      	movs	r3, #2
 800532a:	2200      	movs	r2, #0
 800532c:	f000 f8d0 	bl	80054d0 <_lseek_r>
 8005330:	89a3      	ldrh	r3, [r4, #12]
 8005332:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005336:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800533a:	81a3      	strh	r3, [r4, #12]
 800533c:	4632      	mov	r2, r6
 800533e:	463b      	mov	r3, r7
 8005340:	4628      	mov	r0, r5
 8005342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005346:	f000 b8e7 	b.w	8005518 <_write_r>

0800534a <__sseek>:
 800534a:	b510      	push	{r4, lr}
 800534c:	460c      	mov	r4, r1
 800534e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005352:	f000 f8bd 	bl	80054d0 <_lseek_r>
 8005356:	1c43      	adds	r3, r0, #1
 8005358:	89a3      	ldrh	r3, [r4, #12]
 800535a:	bf15      	itete	ne
 800535c:	6560      	strne	r0, [r4, #84]	; 0x54
 800535e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005362:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005366:	81a3      	strheq	r3, [r4, #12]
 8005368:	bf18      	it	ne
 800536a:	81a3      	strhne	r3, [r4, #12]
 800536c:	bd10      	pop	{r4, pc}

0800536e <__sclose>:
 800536e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005372:	f000 b89d 	b.w	80054b0 <_close_r>

08005376 <__swbuf_r>:
 8005376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005378:	460e      	mov	r6, r1
 800537a:	4614      	mov	r4, r2
 800537c:	4605      	mov	r5, r0
 800537e:	b118      	cbz	r0, 8005388 <__swbuf_r+0x12>
 8005380:	6a03      	ldr	r3, [r0, #32]
 8005382:	b90b      	cbnz	r3, 8005388 <__swbuf_r+0x12>
 8005384:	f7ff ff10 	bl	80051a8 <__sinit>
 8005388:	69a3      	ldr	r3, [r4, #24]
 800538a:	60a3      	str	r3, [r4, #8]
 800538c:	89a3      	ldrh	r3, [r4, #12]
 800538e:	071a      	lsls	r2, r3, #28
 8005390:	d525      	bpl.n	80053de <__swbuf_r+0x68>
 8005392:	6923      	ldr	r3, [r4, #16]
 8005394:	b31b      	cbz	r3, 80053de <__swbuf_r+0x68>
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	6922      	ldr	r2, [r4, #16]
 800539a:	1a98      	subs	r0, r3, r2
 800539c:	6963      	ldr	r3, [r4, #20]
 800539e:	b2f6      	uxtb	r6, r6
 80053a0:	4283      	cmp	r3, r0
 80053a2:	4637      	mov	r7, r6
 80053a4:	dc04      	bgt.n	80053b0 <__swbuf_r+0x3a>
 80053a6:	4621      	mov	r1, r4
 80053a8:	4628      	mov	r0, r5
 80053aa:	f000 fd5b 	bl	8005e64 <_fflush_r>
 80053ae:	b9e0      	cbnz	r0, 80053ea <__swbuf_r+0x74>
 80053b0:	68a3      	ldr	r3, [r4, #8]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	60a3      	str	r3, [r4, #8]
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	6022      	str	r2, [r4, #0]
 80053bc:	701e      	strb	r6, [r3, #0]
 80053be:	6962      	ldr	r2, [r4, #20]
 80053c0:	1c43      	adds	r3, r0, #1
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d004      	beq.n	80053d0 <__swbuf_r+0x5a>
 80053c6:	89a3      	ldrh	r3, [r4, #12]
 80053c8:	07db      	lsls	r3, r3, #31
 80053ca:	d506      	bpl.n	80053da <__swbuf_r+0x64>
 80053cc:	2e0a      	cmp	r6, #10
 80053ce:	d104      	bne.n	80053da <__swbuf_r+0x64>
 80053d0:	4621      	mov	r1, r4
 80053d2:	4628      	mov	r0, r5
 80053d4:	f000 fd46 	bl	8005e64 <_fflush_r>
 80053d8:	b938      	cbnz	r0, 80053ea <__swbuf_r+0x74>
 80053da:	4638      	mov	r0, r7
 80053dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053de:	4621      	mov	r1, r4
 80053e0:	4628      	mov	r0, r5
 80053e2:	f000 f805 	bl	80053f0 <__swsetup_r>
 80053e6:	2800      	cmp	r0, #0
 80053e8:	d0d5      	beq.n	8005396 <__swbuf_r+0x20>
 80053ea:	f04f 37ff 	mov.w	r7, #4294967295
 80053ee:	e7f4      	b.n	80053da <__swbuf_r+0x64>

080053f0 <__swsetup_r>:
 80053f0:	b538      	push	{r3, r4, r5, lr}
 80053f2:	4b2a      	ldr	r3, [pc, #168]	; (800549c <__swsetup_r+0xac>)
 80053f4:	4605      	mov	r5, r0
 80053f6:	6818      	ldr	r0, [r3, #0]
 80053f8:	460c      	mov	r4, r1
 80053fa:	b118      	cbz	r0, 8005404 <__swsetup_r+0x14>
 80053fc:	6a03      	ldr	r3, [r0, #32]
 80053fe:	b90b      	cbnz	r3, 8005404 <__swsetup_r+0x14>
 8005400:	f7ff fed2 	bl	80051a8 <__sinit>
 8005404:	89a3      	ldrh	r3, [r4, #12]
 8005406:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800540a:	0718      	lsls	r0, r3, #28
 800540c:	d422      	bmi.n	8005454 <__swsetup_r+0x64>
 800540e:	06d9      	lsls	r1, r3, #27
 8005410:	d407      	bmi.n	8005422 <__swsetup_r+0x32>
 8005412:	2309      	movs	r3, #9
 8005414:	602b      	str	r3, [r5, #0]
 8005416:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800541a:	81a3      	strh	r3, [r4, #12]
 800541c:	f04f 30ff 	mov.w	r0, #4294967295
 8005420:	e034      	b.n	800548c <__swsetup_r+0x9c>
 8005422:	0758      	lsls	r0, r3, #29
 8005424:	d512      	bpl.n	800544c <__swsetup_r+0x5c>
 8005426:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005428:	b141      	cbz	r1, 800543c <__swsetup_r+0x4c>
 800542a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800542e:	4299      	cmp	r1, r3
 8005430:	d002      	beq.n	8005438 <__swsetup_r+0x48>
 8005432:	4628      	mov	r0, r5
 8005434:	f000 f8c4 	bl	80055c0 <_free_r>
 8005438:	2300      	movs	r3, #0
 800543a:	6363      	str	r3, [r4, #52]	; 0x34
 800543c:	89a3      	ldrh	r3, [r4, #12]
 800543e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005442:	81a3      	strh	r3, [r4, #12]
 8005444:	2300      	movs	r3, #0
 8005446:	6063      	str	r3, [r4, #4]
 8005448:	6923      	ldr	r3, [r4, #16]
 800544a:	6023      	str	r3, [r4, #0]
 800544c:	89a3      	ldrh	r3, [r4, #12]
 800544e:	f043 0308 	orr.w	r3, r3, #8
 8005452:	81a3      	strh	r3, [r4, #12]
 8005454:	6923      	ldr	r3, [r4, #16]
 8005456:	b94b      	cbnz	r3, 800546c <__swsetup_r+0x7c>
 8005458:	89a3      	ldrh	r3, [r4, #12]
 800545a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800545e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005462:	d003      	beq.n	800546c <__swsetup_r+0x7c>
 8005464:	4621      	mov	r1, r4
 8005466:	4628      	mov	r0, r5
 8005468:	f000 fd4a 	bl	8005f00 <__smakebuf_r>
 800546c:	89a0      	ldrh	r0, [r4, #12]
 800546e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005472:	f010 0301 	ands.w	r3, r0, #1
 8005476:	d00a      	beq.n	800548e <__swsetup_r+0x9e>
 8005478:	2300      	movs	r3, #0
 800547a:	60a3      	str	r3, [r4, #8]
 800547c:	6963      	ldr	r3, [r4, #20]
 800547e:	425b      	negs	r3, r3
 8005480:	61a3      	str	r3, [r4, #24]
 8005482:	6923      	ldr	r3, [r4, #16]
 8005484:	b943      	cbnz	r3, 8005498 <__swsetup_r+0xa8>
 8005486:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800548a:	d1c4      	bne.n	8005416 <__swsetup_r+0x26>
 800548c:	bd38      	pop	{r3, r4, r5, pc}
 800548e:	0781      	lsls	r1, r0, #30
 8005490:	bf58      	it	pl
 8005492:	6963      	ldrpl	r3, [r4, #20]
 8005494:	60a3      	str	r3, [r4, #8]
 8005496:	e7f4      	b.n	8005482 <__swsetup_r+0x92>
 8005498:	2000      	movs	r0, #0
 800549a:	e7f7      	b.n	800548c <__swsetup_r+0x9c>
 800549c:	20000068 	.word	0x20000068

080054a0 <memset>:
 80054a0:	4402      	add	r2, r0
 80054a2:	4603      	mov	r3, r0
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d100      	bne.n	80054aa <memset+0xa>
 80054a8:	4770      	bx	lr
 80054aa:	f803 1b01 	strb.w	r1, [r3], #1
 80054ae:	e7f9      	b.n	80054a4 <memset+0x4>

080054b0 <_close_r>:
 80054b0:	b538      	push	{r3, r4, r5, lr}
 80054b2:	4d06      	ldr	r5, [pc, #24]	; (80054cc <_close_r+0x1c>)
 80054b4:	2300      	movs	r3, #0
 80054b6:	4604      	mov	r4, r0
 80054b8:	4608      	mov	r0, r1
 80054ba:	602b      	str	r3, [r5, #0]
 80054bc:	f7fc ffed 	bl	800249a <_close>
 80054c0:	1c43      	adds	r3, r0, #1
 80054c2:	d102      	bne.n	80054ca <_close_r+0x1a>
 80054c4:	682b      	ldr	r3, [r5, #0]
 80054c6:	b103      	cbz	r3, 80054ca <_close_r+0x1a>
 80054c8:	6023      	str	r3, [r4, #0]
 80054ca:	bd38      	pop	{r3, r4, r5, pc}
 80054cc:	2000072c 	.word	0x2000072c

080054d0 <_lseek_r>:
 80054d0:	b538      	push	{r3, r4, r5, lr}
 80054d2:	4d07      	ldr	r5, [pc, #28]	; (80054f0 <_lseek_r+0x20>)
 80054d4:	4604      	mov	r4, r0
 80054d6:	4608      	mov	r0, r1
 80054d8:	4611      	mov	r1, r2
 80054da:	2200      	movs	r2, #0
 80054dc:	602a      	str	r2, [r5, #0]
 80054de:	461a      	mov	r2, r3
 80054e0:	f7fd f802 	bl	80024e8 <_lseek>
 80054e4:	1c43      	adds	r3, r0, #1
 80054e6:	d102      	bne.n	80054ee <_lseek_r+0x1e>
 80054e8:	682b      	ldr	r3, [r5, #0]
 80054ea:	b103      	cbz	r3, 80054ee <_lseek_r+0x1e>
 80054ec:	6023      	str	r3, [r4, #0]
 80054ee:	bd38      	pop	{r3, r4, r5, pc}
 80054f0:	2000072c 	.word	0x2000072c

080054f4 <_read_r>:
 80054f4:	b538      	push	{r3, r4, r5, lr}
 80054f6:	4d07      	ldr	r5, [pc, #28]	; (8005514 <_read_r+0x20>)
 80054f8:	4604      	mov	r4, r0
 80054fa:	4608      	mov	r0, r1
 80054fc:	4611      	mov	r1, r2
 80054fe:	2200      	movs	r2, #0
 8005500:	602a      	str	r2, [r5, #0]
 8005502:	461a      	mov	r2, r3
 8005504:	f7fc ff90 	bl	8002428 <_read>
 8005508:	1c43      	adds	r3, r0, #1
 800550a:	d102      	bne.n	8005512 <_read_r+0x1e>
 800550c:	682b      	ldr	r3, [r5, #0]
 800550e:	b103      	cbz	r3, 8005512 <_read_r+0x1e>
 8005510:	6023      	str	r3, [r4, #0]
 8005512:	bd38      	pop	{r3, r4, r5, pc}
 8005514:	2000072c 	.word	0x2000072c

08005518 <_write_r>:
 8005518:	b538      	push	{r3, r4, r5, lr}
 800551a:	4d07      	ldr	r5, [pc, #28]	; (8005538 <_write_r+0x20>)
 800551c:	4604      	mov	r4, r0
 800551e:	4608      	mov	r0, r1
 8005520:	4611      	mov	r1, r2
 8005522:	2200      	movs	r2, #0
 8005524:	602a      	str	r2, [r5, #0]
 8005526:	461a      	mov	r2, r3
 8005528:	f7fc ff9b 	bl	8002462 <_write>
 800552c:	1c43      	adds	r3, r0, #1
 800552e:	d102      	bne.n	8005536 <_write_r+0x1e>
 8005530:	682b      	ldr	r3, [r5, #0]
 8005532:	b103      	cbz	r3, 8005536 <_write_r+0x1e>
 8005534:	6023      	str	r3, [r4, #0]
 8005536:	bd38      	pop	{r3, r4, r5, pc}
 8005538:	2000072c 	.word	0x2000072c

0800553c <__errno>:
 800553c:	4b01      	ldr	r3, [pc, #4]	; (8005544 <__errno+0x8>)
 800553e:	6818      	ldr	r0, [r3, #0]
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	20000068 	.word	0x20000068

08005548 <__libc_init_array>:
 8005548:	b570      	push	{r4, r5, r6, lr}
 800554a:	4d0d      	ldr	r5, [pc, #52]	; (8005580 <__libc_init_array+0x38>)
 800554c:	4c0d      	ldr	r4, [pc, #52]	; (8005584 <__libc_init_array+0x3c>)
 800554e:	1b64      	subs	r4, r4, r5
 8005550:	10a4      	asrs	r4, r4, #2
 8005552:	2600      	movs	r6, #0
 8005554:	42a6      	cmp	r6, r4
 8005556:	d109      	bne.n	800556c <__libc_init_array+0x24>
 8005558:	4d0b      	ldr	r5, [pc, #44]	; (8005588 <__libc_init_array+0x40>)
 800555a:	4c0c      	ldr	r4, [pc, #48]	; (800558c <__libc_init_array+0x44>)
 800555c:	f000 fd82 	bl	8006064 <_init>
 8005560:	1b64      	subs	r4, r4, r5
 8005562:	10a4      	asrs	r4, r4, #2
 8005564:	2600      	movs	r6, #0
 8005566:	42a6      	cmp	r6, r4
 8005568:	d105      	bne.n	8005576 <__libc_init_array+0x2e>
 800556a:	bd70      	pop	{r4, r5, r6, pc}
 800556c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005570:	4798      	blx	r3
 8005572:	3601      	adds	r6, #1
 8005574:	e7ee      	b.n	8005554 <__libc_init_array+0xc>
 8005576:	f855 3b04 	ldr.w	r3, [r5], #4
 800557a:	4798      	blx	r3
 800557c:	3601      	adds	r6, #1
 800557e:	e7f2      	b.n	8005566 <__libc_init_array+0x1e>
 8005580:	08006324 	.word	0x08006324
 8005584:	08006324 	.word	0x08006324
 8005588:	08006324 	.word	0x08006324
 800558c:	08006328 	.word	0x08006328

08005590 <__retarget_lock_init_recursive>:
 8005590:	4770      	bx	lr

08005592 <__retarget_lock_acquire_recursive>:
 8005592:	4770      	bx	lr

08005594 <__retarget_lock_release_recursive>:
 8005594:	4770      	bx	lr

08005596 <memcpy>:
 8005596:	440a      	add	r2, r1
 8005598:	4291      	cmp	r1, r2
 800559a:	f100 33ff 	add.w	r3, r0, #4294967295
 800559e:	d100      	bne.n	80055a2 <memcpy+0xc>
 80055a0:	4770      	bx	lr
 80055a2:	b510      	push	{r4, lr}
 80055a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055ac:	4291      	cmp	r1, r2
 80055ae:	d1f9      	bne.n	80055a4 <memcpy+0xe>
 80055b0:	bd10      	pop	{r4, pc}

080055b2 <abort>:
 80055b2:	b508      	push	{r3, lr}
 80055b4:	2006      	movs	r0, #6
 80055b6:	f000 fd07 	bl	8005fc8 <raise>
 80055ba:	2001      	movs	r0, #1
 80055bc:	f7fc ff2a 	bl	8002414 <_exit>

080055c0 <_free_r>:
 80055c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055c2:	2900      	cmp	r1, #0
 80055c4:	d044      	beq.n	8005650 <_free_r+0x90>
 80055c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055ca:	9001      	str	r0, [sp, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f1a1 0404 	sub.w	r4, r1, #4
 80055d2:	bfb8      	it	lt
 80055d4:	18e4      	addlt	r4, r4, r3
 80055d6:	f000 f8df 	bl	8005798 <__malloc_lock>
 80055da:	4a1e      	ldr	r2, [pc, #120]	; (8005654 <_free_r+0x94>)
 80055dc:	9801      	ldr	r0, [sp, #4]
 80055de:	6813      	ldr	r3, [r2, #0]
 80055e0:	b933      	cbnz	r3, 80055f0 <_free_r+0x30>
 80055e2:	6063      	str	r3, [r4, #4]
 80055e4:	6014      	str	r4, [r2, #0]
 80055e6:	b003      	add	sp, #12
 80055e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055ec:	f000 b8da 	b.w	80057a4 <__malloc_unlock>
 80055f0:	42a3      	cmp	r3, r4
 80055f2:	d908      	bls.n	8005606 <_free_r+0x46>
 80055f4:	6825      	ldr	r5, [r4, #0]
 80055f6:	1961      	adds	r1, r4, r5
 80055f8:	428b      	cmp	r3, r1
 80055fa:	bf01      	itttt	eq
 80055fc:	6819      	ldreq	r1, [r3, #0]
 80055fe:	685b      	ldreq	r3, [r3, #4]
 8005600:	1949      	addeq	r1, r1, r5
 8005602:	6021      	streq	r1, [r4, #0]
 8005604:	e7ed      	b.n	80055e2 <_free_r+0x22>
 8005606:	461a      	mov	r2, r3
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	b10b      	cbz	r3, 8005610 <_free_r+0x50>
 800560c:	42a3      	cmp	r3, r4
 800560e:	d9fa      	bls.n	8005606 <_free_r+0x46>
 8005610:	6811      	ldr	r1, [r2, #0]
 8005612:	1855      	adds	r5, r2, r1
 8005614:	42a5      	cmp	r5, r4
 8005616:	d10b      	bne.n	8005630 <_free_r+0x70>
 8005618:	6824      	ldr	r4, [r4, #0]
 800561a:	4421      	add	r1, r4
 800561c:	1854      	adds	r4, r2, r1
 800561e:	42a3      	cmp	r3, r4
 8005620:	6011      	str	r1, [r2, #0]
 8005622:	d1e0      	bne.n	80055e6 <_free_r+0x26>
 8005624:	681c      	ldr	r4, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	6053      	str	r3, [r2, #4]
 800562a:	440c      	add	r4, r1
 800562c:	6014      	str	r4, [r2, #0]
 800562e:	e7da      	b.n	80055e6 <_free_r+0x26>
 8005630:	d902      	bls.n	8005638 <_free_r+0x78>
 8005632:	230c      	movs	r3, #12
 8005634:	6003      	str	r3, [r0, #0]
 8005636:	e7d6      	b.n	80055e6 <_free_r+0x26>
 8005638:	6825      	ldr	r5, [r4, #0]
 800563a:	1961      	adds	r1, r4, r5
 800563c:	428b      	cmp	r3, r1
 800563e:	bf04      	itt	eq
 8005640:	6819      	ldreq	r1, [r3, #0]
 8005642:	685b      	ldreq	r3, [r3, #4]
 8005644:	6063      	str	r3, [r4, #4]
 8005646:	bf04      	itt	eq
 8005648:	1949      	addeq	r1, r1, r5
 800564a:	6021      	streq	r1, [r4, #0]
 800564c:	6054      	str	r4, [r2, #4]
 800564e:	e7ca      	b.n	80055e6 <_free_r+0x26>
 8005650:	b003      	add	sp, #12
 8005652:	bd30      	pop	{r4, r5, pc}
 8005654:	20000734 	.word	0x20000734

08005658 <sbrk_aligned>:
 8005658:	b570      	push	{r4, r5, r6, lr}
 800565a:	4e0e      	ldr	r6, [pc, #56]	; (8005694 <sbrk_aligned+0x3c>)
 800565c:	460c      	mov	r4, r1
 800565e:	6831      	ldr	r1, [r6, #0]
 8005660:	4605      	mov	r5, r0
 8005662:	b911      	cbnz	r1, 800566a <sbrk_aligned+0x12>
 8005664:	f000 fcee 	bl	8006044 <_sbrk_r>
 8005668:	6030      	str	r0, [r6, #0]
 800566a:	4621      	mov	r1, r4
 800566c:	4628      	mov	r0, r5
 800566e:	f000 fce9 	bl	8006044 <_sbrk_r>
 8005672:	1c43      	adds	r3, r0, #1
 8005674:	d00a      	beq.n	800568c <sbrk_aligned+0x34>
 8005676:	1cc4      	adds	r4, r0, #3
 8005678:	f024 0403 	bic.w	r4, r4, #3
 800567c:	42a0      	cmp	r0, r4
 800567e:	d007      	beq.n	8005690 <sbrk_aligned+0x38>
 8005680:	1a21      	subs	r1, r4, r0
 8005682:	4628      	mov	r0, r5
 8005684:	f000 fcde 	bl	8006044 <_sbrk_r>
 8005688:	3001      	adds	r0, #1
 800568a:	d101      	bne.n	8005690 <sbrk_aligned+0x38>
 800568c:	f04f 34ff 	mov.w	r4, #4294967295
 8005690:	4620      	mov	r0, r4
 8005692:	bd70      	pop	{r4, r5, r6, pc}
 8005694:	20000738 	.word	0x20000738

08005698 <_malloc_r>:
 8005698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800569c:	1ccd      	adds	r5, r1, #3
 800569e:	f025 0503 	bic.w	r5, r5, #3
 80056a2:	3508      	adds	r5, #8
 80056a4:	2d0c      	cmp	r5, #12
 80056a6:	bf38      	it	cc
 80056a8:	250c      	movcc	r5, #12
 80056aa:	2d00      	cmp	r5, #0
 80056ac:	4607      	mov	r7, r0
 80056ae:	db01      	blt.n	80056b4 <_malloc_r+0x1c>
 80056b0:	42a9      	cmp	r1, r5
 80056b2:	d905      	bls.n	80056c0 <_malloc_r+0x28>
 80056b4:	230c      	movs	r3, #12
 80056b6:	603b      	str	r3, [r7, #0]
 80056b8:	2600      	movs	r6, #0
 80056ba:	4630      	mov	r0, r6
 80056bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005794 <_malloc_r+0xfc>
 80056c4:	f000 f868 	bl	8005798 <__malloc_lock>
 80056c8:	f8d8 3000 	ldr.w	r3, [r8]
 80056cc:	461c      	mov	r4, r3
 80056ce:	bb5c      	cbnz	r4, 8005728 <_malloc_r+0x90>
 80056d0:	4629      	mov	r1, r5
 80056d2:	4638      	mov	r0, r7
 80056d4:	f7ff ffc0 	bl	8005658 <sbrk_aligned>
 80056d8:	1c43      	adds	r3, r0, #1
 80056da:	4604      	mov	r4, r0
 80056dc:	d155      	bne.n	800578a <_malloc_r+0xf2>
 80056de:	f8d8 4000 	ldr.w	r4, [r8]
 80056e2:	4626      	mov	r6, r4
 80056e4:	2e00      	cmp	r6, #0
 80056e6:	d145      	bne.n	8005774 <_malloc_r+0xdc>
 80056e8:	2c00      	cmp	r4, #0
 80056ea:	d048      	beq.n	800577e <_malloc_r+0xe6>
 80056ec:	6823      	ldr	r3, [r4, #0]
 80056ee:	4631      	mov	r1, r6
 80056f0:	4638      	mov	r0, r7
 80056f2:	eb04 0903 	add.w	r9, r4, r3
 80056f6:	f000 fca5 	bl	8006044 <_sbrk_r>
 80056fa:	4581      	cmp	r9, r0
 80056fc:	d13f      	bne.n	800577e <_malloc_r+0xe6>
 80056fe:	6821      	ldr	r1, [r4, #0]
 8005700:	1a6d      	subs	r5, r5, r1
 8005702:	4629      	mov	r1, r5
 8005704:	4638      	mov	r0, r7
 8005706:	f7ff ffa7 	bl	8005658 <sbrk_aligned>
 800570a:	3001      	adds	r0, #1
 800570c:	d037      	beq.n	800577e <_malloc_r+0xe6>
 800570e:	6823      	ldr	r3, [r4, #0]
 8005710:	442b      	add	r3, r5
 8005712:	6023      	str	r3, [r4, #0]
 8005714:	f8d8 3000 	ldr.w	r3, [r8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d038      	beq.n	800578e <_malloc_r+0xf6>
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	42a2      	cmp	r2, r4
 8005720:	d12b      	bne.n	800577a <_malloc_r+0xe2>
 8005722:	2200      	movs	r2, #0
 8005724:	605a      	str	r2, [r3, #4]
 8005726:	e00f      	b.n	8005748 <_malloc_r+0xb0>
 8005728:	6822      	ldr	r2, [r4, #0]
 800572a:	1b52      	subs	r2, r2, r5
 800572c:	d41f      	bmi.n	800576e <_malloc_r+0xd6>
 800572e:	2a0b      	cmp	r2, #11
 8005730:	d917      	bls.n	8005762 <_malloc_r+0xca>
 8005732:	1961      	adds	r1, r4, r5
 8005734:	42a3      	cmp	r3, r4
 8005736:	6025      	str	r5, [r4, #0]
 8005738:	bf18      	it	ne
 800573a:	6059      	strne	r1, [r3, #4]
 800573c:	6863      	ldr	r3, [r4, #4]
 800573e:	bf08      	it	eq
 8005740:	f8c8 1000 	streq.w	r1, [r8]
 8005744:	5162      	str	r2, [r4, r5]
 8005746:	604b      	str	r3, [r1, #4]
 8005748:	4638      	mov	r0, r7
 800574a:	f104 060b 	add.w	r6, r4, #11
 800574e:	f000 f829 	bl	80057a4 <__malloc_unlock>
 8005752:	f026 0607 	bic.w	r6, r6, #7
 8005756:	1d23      	adds	r3, r4, #4
 8005758:	1af2      	subs	r2, r6, r3
 800575a:	d0ae      	beq.n	80056ba <_malloc_r+0x22>
 800575c:	1b9b      	subs	r3, r3, r6
 800575e:	50a3      	str	r3, [r4, r2]
 8005760:	e7ab      	b.n	80056ba <_malloc_r+0x22>
 8005762:	42a3      	cmp	r3, r4
 8005764:	6862      	ldr	r2, [r4, #4]
 8005766:	d1dd      	bne.n	8005724 <_malloc_r+0x8c>
 8005768:	f8c8 2000 	str.w	r2, [r8]
 800576c:	e7ec      	b.n	8005748 <_malloc_r+0xb0>
 800576e:	4623      	mov	r3, r4
 8005770:	6864      	ldr	r4, [r4, #4]
 8005772:	e7ac      	b.n	80056ce <_malloc_r+0x36>
 8005774:	4634      	mov	r4, r6
 8005776:	6876      	ldr	r6, [r6, #4]
 8005778:	e7b4      	b.n	80056e4 <_malloc_r+0x4c>
 800577a:	4613      	mov	r3, r2
 800577c:	e7cc      	b.n	8005718 <_malloc_r+0x80>
 800577e:	230c      	movs	r3, #12
 8005780:	603b      	str	r3, [r7, #0]
 8005782:	4638      	mov	r0, r7
 8005784:	f000 f80e 	bl	80057a4 <__malloc_unlock>
 8005788:	e797      	b.n	80056ba <_malloc_r+0x22>
 800578a:	6025      	str	r5, [r4, #0]
 800578c:	e7dc      	b.n	8005748 <_malloc_r+0xb0>
 800578e:	605b      	str	r3, [r3, #4]
 8005790:	deff      	udf	#255	; 0xff
 8005792:	bf00      	nop
 8005794:	20000734 	.word	0x20000734

08005798 <__malloc_lock>:
 8005798:	4801      	ldr	r0, [pc, #4]	; (80057a0 <__malloc_lock+0x8>)
 800579a:	f7ff befa 	b.w	8005592 <__retarget_lock_acquire_recursive>
 800579e:	bf00      	nop
 80057a0:	20000730 	.word	0x20000730

080057a4 <__malloc_unlock>:
 80057a4:	4801      	ldr	r0, [pc, #4]	; (80057ac <__malloc_unlock+0x8>)
 80057a6:	f7ff bef5 	b.w	8005594 <__retarget_lock_release_recursive>
 80057aa:	bf00      	nop
 80057ac:	20000730 	.word	0x20000730

080057b0 <__sfputc_r>:
 80057b0:	6893      	ldr	r3, [r2, #8]
 80057b2:	3b01      	subs	r3, #1
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	b410      	push	{r4}
 80057b8:	6093      	str	r3, [r2, #8]
 80057ba:	da08      	bge.n	80057ce <__sfputc_r+0x1e>
 80057bc:	6994      	ldr	r4, [r2, #24]
 80057be:	42a3      	cmp	r3, r4
 80057c0:	db01      	blt.n	80057c6 <__sfputc_r+0x16>
 80057c2:	290a      	cmp	r1, #10
 80057c4:	d103      	bne.n	80057ce <__sfputc_r+0x1e>
 80057c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057ca:	f7ff bdd4 	b.w	8005376 <__swbuf_r>
 80057ce:	6813      	ldr	r3, [r2, #0]
 80057d0:	1c58      	adds	r0, r3, #1
 80057d2:	6010      	str	r0, [r2, #0]
 80057d4:	7019      	strb	r1, [r3, #0]
 80057d6:	4608      	mov	r0, r1
 80057d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057dc:	4770      	bx	lr

080057de <__sfputs_r>:
 80057de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e0:	4606      	mov	r6, r0
 80057e2:	460f      	mov	r7, r1
 80057e4:	4614      	mov	r4, r2
 80057e6:	18d5      	adds	r5, r2, r3
 80057e8:	42ac      	cmp	r4, r5
 80057ea:	d101      	bne.n	80057f0 <__sfputs_r+0x12>
 80057ec:	2000      	movs	r0, #0
 80057ee:	e007      	b.n	8005800 <__sfputs_r+0x22>
 80057f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057f4:	463a      	mov	r2, r7
 80057f6:	4630      	mov	r0, r6
 80057f8:	f7ff ffda 	bl	80057b0 <__sfputc_r>
 80057fc:	1c43      	adds	r3, r0, #1
 80057fe:	d1f3      	bne.n	80057e8 <__sfputs_r+0xa>
 8005800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005804 <_vfiprintf_r>:
 8005804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005808:	460d      	mov	r5, r1
 800580a:	b09d      	sub	sp, #116	; 0x74
 800580c:	4614      	mov	r4, r2
 800580e:	4698      	mov	r8, r3
 8005810:	4606      	mov	r6, r0
 8005812:	b118      	cbz	r0, 800581c <_vfiprintf_r+0x18>
 8005814:	6a03      	ldr	r3, [r0, #32]
 8005816:	b90b      	cbnz	r3, 800581c <_vfiprintf_r+0x18>
 8005818:	f7ff fcc6 	bl	80051a8 <__sinit>
 800581c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800581e:	07d9      	lsls	r1, r3, #31
 8005820:	d405      	bmi.n	800582e <_vfiprintf_r+0x2a>
 8005822:	89ab      	ldrh	r3, [r5, #12]
 8005824:	059a      	lsls	r2, r3, #22
 8005826:	d402      	bmi.n	800582e <_vfiprintf_r+0x2a>
 8005828:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800582a:	f7ff feb2 	bl	8005592 <__retarget_lock_acquire_recursive>
 800582e:	89ab      	ldrh	r3, [r5, #12]
 8005830:	071b      	lsls	r3, r3, #28
 8005832:	d501      	bpl.n	8005838 <_vfiprintf_r+0x34>
 8005834:	692b      	ldr	r3, [r5, #16]
 8005836:	b99b      	cbnz	r3, 8005860 <_vfiprintf_r+0x5c>
 8005838:	4629      	mov	r1, r5
 800583a:	4630      	mov	r0, r6
 800583c:	f7ff fdd8 	bl	80053f0 <__swsetup_r>
 8005840:	b170      	cbz	r0, 8005860 <_vfiprintf_r+0x5c>
 8005842:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005844:	07dc      	lsls	r4, r3, #31
 8005846:	d504      	bpl.n	8005852 <_vfiprintf_r+0x4e>
 8005848:	f04f 30ff 	mov.w	r0, #4294967295
 800584c:	b01d      	add	sp, #116	; 0x74
 800584e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005852:	89ab      	ldrh	r3, [r5, #12]
 8005854:	0598      	lsls	r0, r3, #22
 8005856:	d4f7      	bmi.n	8005848 <_vfiprintf_r+0x44>
 8005858:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800585a:	f7ff fe9b 	bl	8005594 <__retarget_lock_release_recursive>
 800585e:	e7f3      	b.n	8005848 <_vfiprintf_r+0x44>
 8005860:	2300      	movs	r3, #0
 8005862:	9309      	str	r3, [sp, #36]	; 0x24
 8005864:	2320      	movs	r3, #32
 8005866:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800586a:	f8cd 800c 	str.w	r8, [sp, #12]
 800586e:	2330      	movs	r3, #48	; 0x30
 8005870:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005a24 <_vfiprintf_r+0x220>
 8005874:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005878:	f04f 0901 	mov.w	r9, #1
 800587c:	4623      	mov	r3, r4
 800587e:	469a      	mov	sl, r3
 8005880:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005884:	b10a      	cbz	r2, 800588a <_vfiprintf_r+0x86>
 8005886:	2a25      	cmp	r2, #37	; 0x25
 8005888:	d1f9      	bne.n	800587e <_vfiprintf_r+0x7a>
 800588a:	ebba 0b04 	subs.w	fp, sl, r4
 800588e:	d00b      	beq.n	80058a8 <_vfiprintf_r+0xa4>
 8005890:	465b      	mov	r3, fp
 8005892:	4622      	mov	r2, r4
 8005894:	4629      	mov	r1, r5
 8005896:	4630      	mov	r0, r6
 8005898:	f7ff ffa1 	bl	80057de <__sfputs_r>
 800589c:	3001      	adds	r0, #1
 800589e:	f000 80a9 	beq.w	80059f4 <_vfiprintf_r+0x1f0>
 80058a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058a4:	445a      	add	r2, fp
 80058a6:	9209      	str	r2, [sp, #36]	; 0x24
 80058a8:	f89a 3000 	ldrb.w	r3, [sl]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 80a1 	beq.w	80059f4 <_vfiprintf_r+0x1f0>
 80058b2:	2300      	movs	r3, #0
 80058b4:	f04f 32ff 	mov.w	r2, #4294967295
 80058b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058bc:	f10a 0a01 	add.w	sl, sl, #1
 80058c0:	9304      	str	r3, [sp, #16]
 80058c2:	9307      	str	r3, [sp, #28]
 80058c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058c8:	931a      	str	r3, [sp, #104]	; 0x68
 80058ca:	4654      	mov	r4, sl
 80058cc:	2205      	movs	r2, #5
 80058ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058d2:	4854      	ldr	r0, [pc, #336]	; (8005a24 <_vfiprintf_r+0x220>)
 80058d4:	f7fa fc9c 	bl	8000210 <memchr>
 80058d8:	9a04      	ldr	r2, [sp, #16]
 80058da:	b9d8      	cbnz	r0, 8005914 <_vfiprintf_r+0x110>
 80058dc:	06d1      	lsls	r1, r2, #27
 80058de:	bf44      	itt	mi
 80058e0:	2320      	movmi	r3, #32
 80058e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058e6:	0713      	lsls	r3, r2, #28
 80058e8:	bf44      	itt	mi
 80058ea:	232b      	movmi	r3, #43	; 0x2b
 80058ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058f0:	f89a 3000 	ldrb.w	r3, [sl]
 80058f4:	2b2a      	cmp	r3, #42	; 0x2a
 80058f6:	d015      	beq.n	8005924 <_vfiprintf_r+0x120>
 80058f8:	9a07      	ldr	r2, [sp, #28]
 80058fa:	4654      	mov	r4, sl
 80058fc:	2000      	movs	r0, #0
 80058fe:	f04f 0c0a 	mov.w	ip, #10
 8005902:	4621      	mov	r1, r4
 8005904:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005908:	3b30      	subs	r3, #48	; 0x30
 800590a:	2b09      	cmp	r3, #9
 800590c:	d94d      	bls.n	80059aa <_vfiprintf_r+0x1a6>
 800590e:	b1b0      	cbz	r0, 800593e <_vfiprintf_r+0x13a>
 8005910:	9207      	str	r2, [sp, #28]
 8005912:	e014      	b.n	800593e <_vfiprintf_r+0x13a>
 8005914:	eba0 0308 	sub.w	r3, r0, r8
 8005918:	fa09 f303 	lsl.w	r3, r9, r3
 800591c:	4313      	orrs	r3, r2
 800591e:	9304      	str	r3, [sp, #16]
 8005920:	46a2      	mov	sl, r4
 8005922:	e7d2      	b.n	80058ca <_vfiprintf_r+0xc6>
 8005924:	9b03      	ldr	r3, [sp, #12]
 8005926:	1d19      	adds	r1, r3, #4
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	9103      	str	r1, [sp, #12]
 800592c:	2b00      	cmp	r3, #0
 800592e:	bfbb      	ittet	lt
 8005930:	425b      	neglt	r3, r3
 8005932:	f042 0202 	orrlt.w	r2, r2, #2
 8005936:	9307      	strge	r3, [sp, #28]
 8005938:	9307      	strlt	r3, [sp, #28]
 800593a:	bfb8      	it	lt
 800593c:	9204      	strlt	r2, [sp, #16]
 800593e:	7823      	ldrb	r3, [r4, #0]
 8005940:	2b2e      	cmp	r3, #46	; 0x2e
 8005942:	d10c      	bne.n	800595e <_vfiprintf_r+0x15a>
 8005944:	7863      	ldrb	r3, [r4, #1]
 8005946:	2b2a      	cmp	r3, #42	; 0x2a
 8005948:	d134      	bne.n	80059b4 <_vfiprintf_r+0x1b0>
 800594a:	9b03      	ldr	r3, [sp, #12]
 800594c:	1d1a      	adds	r2, r3, #4
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	9203      	str	r2, [sp, #12]
 8005952:	2b00      	cmp	r3, #0
 8005954:	bfb8      	it	lt
 8005956:	f04f 33ff 	movlt.w	r3, #4294967295
 800595a:	3402      	adds	r4, #2
 800595c:	9305      	str	r3, [sp, #20]
 800595e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005a34 <_vfiprintf_r+0x230>
 8005962:	7821      	ldrb	r1, [r4, #0]
 8005964:	2203      	movs	r2, #3
 8005966:	4650      	mov	r0, sl
 8005968:	f7fa fc52 	bl	8000210 <memchr>
 800596c:	b138      	cbz	r0, 800597e <_vfiprintf_r+0x17a>
 800596e:	9b04      	ldr	r3, [sp, #16]
 8005970:	eba0 000a 	sub.w	r0, r0, sl
 8005974:	2240      	movs	r2, #64	; 0x40
 8005976:	4082      	lsls	r2, r0
 8005978:	4313      	orrs	r3, r2
 800597a:	3401      	adds	r4, #1
 800597c:	9304      	str	r3, [sp, #16]
 800597e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005982:	4829      	ldr	r0, [pc, #164]	; (8005a28 <_vfiprintf_r+0x224>)
 8005984:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005988:	2206      	movs	r2, #6
 800598a:	f7fa fc41 	bl	8000210 <memchr>
 800598e:	2800      	cmp	r0, #0
 8005990:	d03f      	beq.n	8005a12 <_vfiprintf_r+0x20e>
 8005992:	4b26      	ldr	r3, [pc, #152]	; (8005a2c <_vfiprintf_r+0x228>)
 8005994:	bb1b      	cbnz	r3, 80059de <_vfiprintf_r+0x1da>
 8005996:	9b03      	ldr	r3, [sp, #12]
 8005998:	3307      	adds	r3, #7
 800599a:	f023 0307 	bic.w	r3, r3, #7
 800599e:	3308      	adds	r3, #8
 80059a0:	9303      	str	r3, [sp, #12]
 80059a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059a4:	443b      	add	r3, r7
 80059a6:	9309      	str	r3, [sp, #36]	; 0x24
 80059a8:	e768      	b.n	800587c <_vfiprintf_r+0x78>
 80059aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80059ae:	460c      	mov	r4, r1
 80059b0:	2001      	movs	r0, #1
 80059b2:	e7a6      	b.n	8005902 <_vfiprintf_r+0xfe>
 80059b4:	2300      	movs	r3, #0
 80059b6:	3401      	adds	r4, #1
 80059b8:	9305      	str	r3, [sp, #20]
 80059ba:	4619      	mov	r1, r3
 80059bc:	f04f 0c0a 	mov.w	ip, #10
 80059c0:	4620      	mov	r0, r4
 80059c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059c6:	3a30      	subs	r2, #48	; 0x30
 80059c8:	2a09      	cmp	r2, #9
 80059ca:	d903      	bls.n	80059d4 <_vfiprintf_r+0x1d0>
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d0c6      	beq.n	800595e <_vfiprintf_r+0x15a>
 80059d0:	9105      	str	r1, [sp, #20]
 80059d2:	e7c4      	b.n	800595e <_vfiprintf_r+0x15a>
 80059d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80059d8:	4604      	mov	r4, r0
 80059da:	2301      	movs	r3, #1
 80059dc:	e7f0      	b.n	80059c0 <_vfiprintf_r+0x1bc>
 80059de:	ab03      	add	r3, sp, #12
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	462a      	mov	r2, r5
 80059e4:	4b12      	ldr	r3, [pc, #72]	; (8005a30 <_vfiprintf_r+0x22c>)
 80059e6:	a904      	add	r1, sp, #16
 80059e8:	4630      	mov	r0, r6
 80059ea:	f3af 8000 	nop.w
 80059ee:	4607      	mov	r7, r0
 80059f0:	1c78      	adds	r0, r7, #1
 80059f2:	d1d6      	bne.n	80059a2 <_vfiprintf_r+0x19e>
 80059f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059f6:	07d9      	lsls	r1, r3, #31
 80059f8:	d405      	bmi.n	8005a06 <_vfiprintf_r+0x202>
 80059fa:	89ab      	ldrh	r3, [r5, #12]
 80059fc:	059a      	lsls	r2, r3, #22
 80059fe:	d402      	bmi.n	8005a06 <_vfiprintf_r+0x202>
 8005a00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a02:	f7ff fdc7 	bl	8005594 <__retarget_lock_release_recursive>
 8005a06:	89ab      	ldrh	r3, [r5, #12]
 8005a08:	065b      	lsls	r3, r3, #25
 8005a0a:	f53f af1d 	bmi.w	8005848 <_vfiprintf_r+0x44>
 8005a0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a10:	e71c      	b.n	800584c <_vfiprintf_r+0x48>
 8005a12:	ab03      	add	r3, sp, #12
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	462a      	mov	r2, r5
 8005a18:	4b05      	ldr	r3, [pc, #20]	; (8005a30 <_vfiprintf_r+0x22c>)
 8005a1a:	a904      	add	r1, sp, #16
 8005a1c:	4630      	mov	r0, r6
 8005a1e:	f000 f879 	bl	8005b14 <_printf_i>
 8005a22:	e7e4      	b.n	80059ee <_vfiprintf_r+0x1ea>
 8005a24:	080062e6 	.word	0x080062e6
 8005a28:	080062f0 	.word	0x080062f0
 8005a2c:	00000000 	.word	0x00000000
 8005a30:	080057df 	.word	0x080057df
 8005a34:	080062ec 	.word	0x080062ec

08005a38 <_printf_common>:
 8005a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a3c:	4616      	mov	r6, r2
 8005a3e:	4699      	mov	r9, r3
 8005a40:	688a      	ldr	r2, [r1, #8]
 8005a42:	690b      	ldr	r3, [r1, #16]
 8005a44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	bfb8      	it	lt
 8005a4c:	4613      	movlt	r3, r2
 8005a4e:	6033      	str	r3, [r6, #0]
 8005a50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a54:	4607      	mov	r7, r0
 8005a56:	460c      	mov	r4, r1
 8005a58:	b10a      	cbz	r2, 8005a5e <_printf_common+0x26>
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	6033      	str	r3, [r6, #0]
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	0699      	lsls	r1, r3, #26
 8005a62:	bf42      	ittt	mi
 8005a64:	6833      	ldrmi	r3, [r6, #0]
 8005a66:	3302      	addmi	r3, #2
 8005a68:	6033      	strmi	r3, [r6, #0]
 8005a6a:	6825      	ldr	r5, [r4, #0]
 8005a6c:	f015 0506 	ands.w	r5, r5, #6
 8005a70:	d106      	bne.n	8005a80 <_printf_common+0x48>
 8005a72:	f104 0a19 	add.w	sl, r4, #25
 8005a76:	68e3      	ldr	r3, [r4, #12]
 8005a78:	6832      	ldr	r2, [r6, #0]
 8005a7a:	1a9b      	subs	r3, r3, r2
 8005a7c:	42ab      	cmp	r3, r5
 8005a7e:	dc26      	bgt.n	8005ace <_printf_common+0x96>
 8005a80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a84:	1e13      	subs	r3, r2, #0
 8005a86:	6822      	ldr	r2, [r4, #0]
 8005a88:	bf18      	it	ne
 8005a8a:	2301      	movne	r3, #1
 8005a8c:	0692      	lsls	r2, r2, #26
 8005a8e:	d42b      	bmi.n	8005ae8 <_printf_common+0xb0>
 8005a90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a94:	4649      	mov	r1, r9
 8005a96:	4638      	mov	r0, r7
 8005a98:	47c0      	blx	r8
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	d01e      	beq.n	8005adc <_printf_common+0xa4>
 8005a9e:	6823      	ldr	r3, [r4, #0]
 8005aa0:	6922      	ldr	r2, [r4, #16]
 8005aa2:	f003 0306 	and.w	r3, r3, #6
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	bf02      	ittt	eq
 8005aaa:	68e5      	ldreq	r5, [r4, #12]
 8005aac:	6833      	ldreq	r3, [r6, #0]
 8005aae:	1aed      	subeq	r5, r5, r3
 8005ab0:	68a3      	ldr	r3, [r4, #8]
 8005ab2:	bf0c      	ite	eq
 8005ab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ab8:	2500      	movne	r5, #0
 8005aba:	4293      	cmp	r3, r2
 8005abc:	bfc4      	itt	gt
 8005abe:	1a9b      	subgt	r3, r3, r2
 8005ac0:	18ed      	addgt	r5, r5, r3
 8005ac2:	2600      	movs	r6, #0
 8005ac4:	341a      	adds	r4, #26
 8005ac6:	42b5      	cmp	r5, r6
 8005ac8:	d11a      	bne.n	8005b00 <_printf_common+0xc8>
 8005aca:	2000      	movs	r0, #0
 8005acc:	e008      	b.n	8005ae0 <_printf_common+0xa8>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	4652      	mov	r2, sl
 8005ad2:	4649      	mov	r1, r9
 8005ad4:	4638      	mov	r0, r7
 8005ad6:	47c0      	blx	r8
 8005ad8:	3001      	adds	r0, #1
 8005ada:	d103      	bne.n	8005ae4 <_printf_common+0xac>
 8005adc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae4:	3501      	adds	r5, #1
 8005ae6:	e7c6      	b.n	8005a76 <_printf_common+0x3e>
 8005ae8:	18e1      	adds	r1, r4, r3
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	2030      	movs	r0, #48	; 0x30
 8005aee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005af2:	4422      	add	r2, r4
 8005af4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005af8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005afc:	3302      	adds	r3, #2
 8005afe:	e7c7      	b.n	8005a90 <_printf_common+0x58>
 8005b00:	2301      	movs	r3, #1
 8005b02:	4622      	mov	r2, r4
 8005b04:	4649      	mov	r1, r9
 8005b06:	4638      	mov	r0, r7
 8005b08:	47c0      	blx	r8
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	d0e6      	beq.n	8005adc <_printf_common+0xa4>
 8005b0e:	3601      	adds	r6, #1
 8005b10:	e7d9      	b.n	8005ac6 <_printf_common+0x8e>
	...

08005b14 <_printf_i>:
 8005b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b18:	7e0f      	ldrb	r7, [r1, #24]
 8005b1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b1c:	2f78      	cmp	r7, #120	; 0x78
 8005b1e:	4691      	mov	r9, r2
 8005b20:	4680      	mov	r8, r0
 8005b22:	460c      	mov	r4, r1
 8005b24:	469a      	mov	sl, r3
 8005b26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b2a:	d807      	bhi.n	8005b3c <_printf_i+0x28>
 8005b2c:	2f62      	cmp	r7, #98	; 0x62
 8005b2e:	d80a      	bhi.n	8005b46 <_printf_i+0x32>
 8005b30:	2f00      	cmp	r7, #0
 8005b32:	f000 80d4 	beq.w	8005cde <_printf_i+0x1ca>
 8005b36:	2f58      	cmp	r7, #88	; 0x58
 8005b38:	f000 80c0 	beq.w	8005cbc <_printf_i+0x1a8>
 8005b3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b44:	e03a      	b.n	8005bbc <_printf_i+0xa8>
 8005b46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b4a:	2b15      	cmp	r3, #21
 8005b4c:	d8f6      	bhi.n	8005b3c <_printf_i+0x28>
 8005b4e:	a101      	add	r1, pc, #4	; (adr r1, 8005b54 <_printf_i+0x40>)
 8005b50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b54:	08005bad 	.word	0x08005bad
 8005b58:	08005bc1 	.word	0x08005bc1
 8005b5c:	08005b3d 	.word	0x08005b3d
 8005b60:	08005b3d 	.word	0x08005b3d
 8005b64:	08005b3d 	.word	0x08005b3d
 8005b68:	08005b3d 	.word	0x08005b3d
 8005b6c:	08005bc1 	.word	0x08005bc1
 8005b70:	08005b3d 	.word	0x08005b3d
 8005b74:	08005b3d 	.word	0x08005b3d
 8005b78:	08005b3d 	.word	0x08005b3d
 8005b7c:	08005b3d 	.word	0x08005b3d
 8005b80:	08005cc5 	.word	0x08005cc5
 8005b84:	08005bed 	.word	0x08005bed
 8005b88:	08005c7f 	.word	0x08005c7f
 8005b8c:	08005b3d 	.word	0x08005b3d
 8005b90:	08005b3d 	.word	0x08005b3d
 8005b94:	08005ce7 	.word	0x08005ce7
 8005b98:	08005b3d 	.word	0x08005b3d
 8005b9c:	08005bed 	.word	0x08005bed
 8005ba0:	08005b3d 	.word	0x08005b3d
 8005ba4:	08005b3d 	.word	0x08005b3d
 8005ba8:	08005c87 	.word	0x08005c87
 8005bac:	682b      	ldr	r3, [r5, #0]
 8005bae:	1d1a      	adds	r2, r3, #4
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	602a      	str	r2, [r5, #0]
 8005bb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e09f      	b.n	8005d00 <_printf_i+0x1ec>
 8005bc0:	6820      	ldr	r0, [r4, #0]
 8005bc2:	682b      	ldr	r3, [r5, #0]
 8005bc4:	0607      	lsls	r7, r0, #24
 8005bc6:	f103 0104 	add.w	r1, r3, #4
 8005bca:	6029      	str	r1, [r5, #0]
 8005bcc:	d501      	bpl.n	8005bd2 <_printf_i+0xbe>
 8005bce:	681e      	ldr	r6, [r3, #0]
 8005bd0:	e003      	b.n	8005bda <_printf_i+0xc6>
 8005bd2:	0646      	lsls	r6, r0, #25
 8005bd4:	d5fb      	bpl.n	8005bce <_printf_i+0xba>
 8005bd6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005bda:	2e00      	cmp	r6, #0
 8005bdc:	da03      	bge.n	8005be6 <_printf_i+0xd2>
 8005bde:	232d      	movs	r3, #45	; 0x2d
 8005be0:	4276      	negs	r6, r6
 8005be2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005be6:	485a      	ldr	r0, [pc, #360]	; (8005d50 <_printf_i+0x23c>)
 8005be8:	230a      	movs	r3, #10
 8005bea:	e012      	b.n	8005c12 <_printf_i+0xfe>
 8005bec:	682b      	ldr	r3, [r5, #0]
 8005bee:	6820      	ldr	r0, [r4, #0]
 8005bf0:	1d19      	adds	r1, r3, #4
 8005bf2:	6029      	str	r1, [r5, #0]
 8005bf4:	0605      	lsls	r5, r0, #24
 8005bf6:	d501      	bpl.n	8005bfc <_printf_i+0xe8>
 8005bf8:	681e      	ldr	r6, [r3, #0]
 8005bfa:	e002      	b.n	8005c02 <_printf_i+0xee>
 8005bfc:	0641      	lsls	r1, r0, #25
 8005bfe:	d5fb      	bpl.n	8005bf8 <_printf_i+0xe4>
 8005c00:	881e      	ldrh	r6, [r3, #0]
 8005c02:	4853      	ldr	r0, [pc, #332]	; (8005d50 <_printf_i+0x23c>)
 8005c04:	2f6f      	cmp	r7, #111	; 0x6f
 8005c06:	bf0c      	ite	eq
 8005c08:	2308      	moveq	r3, #8
 8005c0a:	230a      	movne	r3, #10
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c12:	6865      	ldr	r5, [r4, #4]
 8005c14:	60a5      	str	r5, [r4, #8]
 8005c16:	2d00      	cmp	r5, #0
 8005c18:	bfa2      	ittt	ge
 8005c1a:	6821      	ldrge	r1, [r4, #0]
 8005c1c:	f021 0104 	bicge.w	r1, r1, #4
 8005c20:	6021      	strge	r1, [r4, #0]
 8005c22:	b90e      	cbnz	r6, 8005c28 <_printf_i+0x114>
 8005c24:	2d00      	cmp	r5, #0
 8005c26:	d04b      	beq.n	8005cc0 <_printf_i+0x1ac>
 8005c28:	4615      	mov	r5, r2
 8005c2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c2e:	fb03 6711 	mls	r7, r3, r1, r6
 8005c32:	5dc7      	ldrb	r7, [r0, r7]
 8005c34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c38:	4637      	mov	r7, r6
 8005c3a:	42bb      	cmp	r3, r7
 8005c3c:	460e      	mov	r6, r1
 8005c3e:	d9f4      	bls.n	8005c2a <_printf_i+0x116>
 8005c40:	2b08      	cmp	r3, #8
 8005c42:	d10b      	bne.n	8005c5c <_printf_i+0x148>
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	07de      	lsls	r6, r3, #31
 8005c48:	d508      	bpl.n	8005c5c <_printf_i+0x148>
 8005c4a:	6923      	ldr	r3, [r4, #16]
 8005c4c:	6861      	ldr	r1, [r4, #4]
 8005c4e:	4299      	cmp	r1, r3
 8005c50:	bfde      	ittt	le
 8005c52:	2330      	movle	r3, #48	; 0x30
 8005c54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c5c:	1b52      	subs	r2, r2, r5
 8005c5e:	6122      	str	r2, [r4, #16]
 8005c60:	f8cd a000 	str.w	sl, [sp]
 8005c64:	464b      	mov	r3, r9
 8005c66:	aa03      	add	r2, sp, #12
 8005c68:	4621      	mov	r1, r4
 8005c6a:	4640      	mov	r0, r8
 8005c6c:	f7ff fee4 	bl	8005a38 <_printf_common>
 8005c70:	3001      	adds	r0, #1
 8005c72:	d14a      	bne.n	8005d0a <_printf_i+0x1f6>
 8005c74:	f04f 30ff 	mov.w	r0, #4294967295
 8005c78:	b004      	add	sp, #16
 8005c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c7e:	6823      	ldr	r3, [r4, #0]
 8005c80:	f043 0320 	orr.w	r3, r3, #32
 8005c84:	6023      	str	r3, [r4, #0]
 8005c86:	4833      	ldr	r0, [pc, #204]	; (8005d54 <_printf_i+0x240>)
 8005c88:	2778      	movs	r7, #120	; 0x78
 8005c8a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	6829      	ldr	r1, [r5, #0]
 8005c92:	061f      	lsls	r7, r3, #24
 8005c94:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c98:	d402      	bmi.n	8005ca0 <_printf_i+0x18c>
 8005c9a:	065f      	lsls	r7, r3, #25
 8005c9c:	bf48      	it	mi
 8005c9e:	b2b6      	uxthmi	r6, r6
 8005ca0:	07df      	lsls	r7, r3, #31
 8005ca2:	bf48      	it	mi
 8005ca4:	f043 0320 	orrmi.w	r3, r3, #32
 8005ca8:	6029      	str	r1, [r5, #0]
 8005caa:	bf48      	it	mi
 8005cac:	6023      	strmi	r3, [r4, #0]
 8005cae:	b91e      	cbnz	r6, 8005cb8 <_printf_i+0x1a4>
 8005cb0:	6823      	ldr	r3, [r4, #0]
 8005cb2:	f023 0320 	bic.w	r3, r3, #32
 8005cb6:	6023      	str	r3, [r4, #0]
 8005cb8:	2310      	movs	r3, #16
 8005cba:	e7a7      	b.n	8005c0c <_printf_i+0xf8>
 8005cbc:	4824      	ldr	r0, [pc, #144]	; (8005d50 <_printf_i+0x23c>)
 8005cbe:	e7e4      	b.n	8005c8a <_printf_i+0x176>
 8005cc0:	4615      	mov	r5, r2
 8005cc2:	e7bd      	b.n	8005c40 <_printf_i+0x12c>
 8005cc4:	682b      	ldr	r3, [r5, #0]
 8005cc6:	6826      	ldr	r6, [r4, #0]
 8005cc8:	6961      	ldr	r1, [r4, #20]
 8005cca:	1d18      	adds	r0, r3, #4
 8005ccc:	6028      	str	r0, [r5, #0]
 8005cce:	0635      	lsls	r5, r6, #24
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	d501      	bpl.n	8005cd8 <_printf_i+0x1c4>
 8005cd4:	6019      	str	r1, [r3, #0]
 8005cd6:	e002      	b.n	8005cde <_printf_i+0x1ca>
 8005cd8:	0670      	lsls	r0, r6, #25
 8005cda:	d5fb      	bpl.n	8005cd4 <_printf_i+0x1c0>
 8005cdc:	8019      	strh	r1, [r3, #0]
 8005cde:	2300      	movs	r3, #0
 8005ce0:	6123      	str	r3, [r4, #16]
 8005ce2:	4615      	mov	r5, r2
 8005ce4:	e7bc      	b.n	8005c60 <_printf_i+0x14c>
 8005ce6:	682b      	ldr	r3, [r5, #0]
 8005ce8:	1d1a      	adds	r2, r3, #4
 8005cea:	602a      	str	r2, [r5, #0]
 8005cec:	681d      	ldr	r5, [r3, #0]
 8005cee:	6862      	ldr	r2, [r4, #4]
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	f7fa fa8c 	bl	8000210 <memchr>
 8005cf8:	b108      	cbz	r0, 8005cfe <_printf_i+0x1ea>
 8005cfa:	1b40      	subs	r0, r0, r5
 8005cfc:	6060      	str	r0, [r4, #4]
 8005cfe:	6863      	ldr	r3, [r4, #4]
 8005d00:	6123      	str	r3, [r4, #16]
 8005d02:	2300      	movs	r3, #0
 8005d04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d08:	e7aa      	b.n	8005c60 <_printf_i+0x14c>
 8005d0a:	6923      	ldr	r3, [r4, #16]
 8005d0c:	462a      	mov	r2, r5
 8005d0e:	4649      	mov	r1, r9
 8005d10:	4640      	mov	r0, r8
 8005d12:	47d0      	blx	sl
 8005d14:	3001      	adds	r0, #1
 8005d16:	d0ad      	beq.n	8005c74 <_printf_i+0x160>
 8005d18:	6823      	ldr	r3, [r4, #0]
 8005d1a:	079b      	lsls	r3, r3, #30
 8005d1c:	d413      	bmi.n	8005d46 <_printf_i+0x232>
 8005d1e:	68e0      	ldr	r0, [r4, #12]
 8005d20:	9b03      	ldr	r3, [sp, #12]
 8005d22:	4298      	cmp	r0, r3
 8005d24:	bfb8      	it	lt
 8005d26:	4618      	movlt	r0, r3
 8005d28:	e7a6      	b.n	8005c78 <_printf_i+0x164>
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	4632      	mov	r2, r6
 8005d2e:	4649      	mov	r1, r9
 8005d30:	4640      	mov	r0, r8
 8005d32:	47d0      	blx	sl
 8005d34:	3001      	adds	r0, #1
 8005d36:	d09d      	beq.n	8005c74 <_printf_i+0x160>
 8005d38:	3501      	adds	r5, #1
 8005d3a:	68e3      	ldr	r3, [r4, #12]
 8005d3c:	9903      	ldr	r1, [sp, #12]
 8005d3e:	1a5b      	subs	r3, r3, r1
 8005d40:	42ab      	cmp	r3, r5
 8005d42:	dcf2      	bgt.n	8005d2a <_printf_i+0x216>
 8005d44:	e7eb      	b.n	8005d1e <_printf_i+0x20a>
 8005d46:	2500      	movs	r5, #0
 8005d48:	f104 0619 	add.w	r6, r4, #25
 8005d4c:	e7f5      	b.n	8005d3a <_printf_i+0x226>
 8005d4e:	bf00      	nop
 8005d50:	080062f7 	.word	0x080062f7
 8005d54:	08006308 	.word	0x08006308

08005d58 <__sflush_r>:
 8005d58:	898a      	ldrh	r2, [r1, #12]
 8005d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d5e:	4605      	mov	r5, r0
 8005d60:	0710      	lsls	r0, r2, #28
 8005d62:	460c      	mov	r4, r1
 8005d64:	d458      	bmi.n	8005e18 <__sflush_r+0xc0>
 8005d66:	684b      	ldr	r3, [r1, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	dc05      	bgt.n	8005d78 <__sflush_r+0x20>
 8005d6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	dc02      	bgt.n	8005d78 <__sflush_r+0x20>
 8005d72:	2000      	movs	r0, #0
 8005d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d7a:	2e00      	cmp	r6, #0
 8005d7c:	d0f9      	beq.n	8005d72 <__sflush_r+0x1a>
 8005d7e:	2300      	movs	r3, #0
 8005d80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d84:	682f      	ldr	r7, [r5, #0]
 8005d86:	6a21      	ldr	r1, [r4, #32]
 8005d88:	602b      	str	r3, [r5, #0]
 8005d8a:	d032      	beq.n	8005df2 <__sflush_r+0x9a>
 8005d8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d8e:	89a3      	ldrh	r3, [r4, #12]
 8005d90:	075a      	lsls	r2, r3, #29
 8005d92:	d505      	bpl.n	8005da0 <__sflush_r+0x48>
 8005d94:	6863      	ldr	r3, [r4, #4]
 8005d96:	1ac0      	subs	r0, r0, r3
 8005d98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d9a:	b10b      	cbz	r3, 8005da0 <__sflush_r+0x48>
 8005d9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d9e:	1ac0      	subs	r0, r0, r3
 8005da0:	2300      	movs	r3, #0
 8005da2:	4602      	mov	r2, r0
 8005da4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005da6:	6a21      	ldr	r1, [r4, #32]
 8005da8:	4628      	mov	r0, r5
 8005daa:	47b0      	blx	r6
 8005dac:	1c43      	adds	r3, r0, #1
 8005dae:	89a3      	ldrh	r3, [r4, #12]
 8005db0:	d106      	bne.n	8005dc0 <__sflush_r+0x68>
 8005db2:	6829      	ldr	r1, [r5, #0]
 8005db4:	291d      	cmp	r1, #29
 8005db6:	d82b      	bhi.n	8005e10 <__sflush_r+0xb8>
 8005db8:	4a29      	ldr	r2, [pc, #164]	; (8005e60 <__sflush_r+0x108>)
 8005dba:	410a      	asrs	r2, r1
 8005dbc:	07d6      	lsls	r6, r2, #31
 8005dbe:	d427      	bmi.n	8005e10 <__sflush_r+0xb8>
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	6062      	str	r2, [r4, #4]
 8005dc4:	04d9      	lsls	r1, r3, #19
 8005dc6:	6922      	ldr	r2, [r4, #16]
 8005dc8:	6022      	str	r2, [r4, #0]
 8005dca:	d504      	bpl.n	8005dd6 <__sflush_r+0x7e>
 8005dcc:	1c42      	adds	r2, r0, #1
 8005dce:	d101      	bne.n	8005dd4 <__sflush_r+0x7c>
 8005dd0:	682b      	ldr	r3, [r5, #0]
 8005dd2:	b903      	cbnz	r3, 8005dd6 <__sflush_r+0x7e>
 8005dd4:	6560      	str	r0, [r4, #84]	; 0x54
 8005dd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dd8:	602f      	str	r7, [r5, #0]
 8005dda:	2900      	cmp	r1, #0
 8005ddc:	d0c9      	beq.n	8005d72 <__sflush_r+0x1a>
 8005dde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005de2:	4299      	cmp	r1, r3
 8005de4:	d002      	beq.n	8005dec <__sflush_r+0x94>
 8005de6:	4628      	mov	r0, r5
 8005de8:	f7ff fbea 	bl	80055c0 <_free_r>
 8005dec:	2000      	movs	r0, #0
 8005dee:	6360      	str	r0, [r4, #52]	; 0x34
 8005df0:	e7c0      	b.n	8005d74 <__sflush_r+0x1c>
 8005df2:	2301      	movs	r3, #1
 8005df4:	4628      	mov	r0, r5
 8005df6:	47b0      	blx	r6
 8005df8:	1c41      	adds	r1, r0, #1
 8005dfa:	d1c8      	bne.n	8005d8e <__sflush_r+0x36>
 8005dfc:	682b      	ldr	r3, [r5, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d0c5      	beq.n	8005d8e <__sflush_r+0x36>
 8005e02:	2b1d      	cmp	r3, #29
 8005e04:	d001      	beq.n	8005e0a <__sflush_r+0xb2>
 8005e06:	2b16      	cmp	r3, #22
 8005e08:	d101      	bne.n	8005e0e <__sflush_r+0xb6>
 8005e0a:	602f      	str	r7, [r5, #0]
 8005e0c:	e7b1      	b.n	8005d72 <__sflush_r+0x1a>
 8005e0e:	89a3      	ldrh	r3, [r4, #12]
 8005e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e14:	81a3      	strh	r3, [r4, #12]
 8005e16:	e7ad      	b.n	8005d74 <__sflush_r+0x1c>
 8005e18:	690f      	ldr	r7, [r1, #16]
 8005e1a:	2f00      	cmp	r7, #0
 8005e1c:	d0a9      	beq.n	8005d72 <__sflush_r+0x1a>
 8005e1e:	0793      	lsls	r3, r2, #30
 8005e20:	680e      	ldr	r6, [r1, #0]
 8005e22:	bf08      	it	eq
 8005e24:	694b      	ldreq	r3, [r1, #20]
 8005e26:	600f      	str	r7, [r1, #0]
 8005e28:	bf18      	it	ne
 8005e2a:	2300      	movne	r3, #0
 8005e2c:	eba6 0807 	sub.w	r8, r6, r7
 8005e30:	608b      	str	r3, [r1, #8]
 8005e32:	f1b8 0f00 	cmp.w	r8, #0
 8005e36:	dd9c      	ble.n	8005d72 <__sflush_r+0x1a>
 8005e38:	6a21      	ldr	r1, [r4, #32]
 8005e3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e3c:	4643      	mov	r3, r8
 8005e3e:	463a      	mov	r2, r7
 8005e40:	4628      	mov	r0, r5
 8005e42:	47b0      	blx	r6
 8005e44:	2800      	cmp	r0, #0
 8005e46:	dc06      	bgt.n	8005e56 <__sflush_r+0xfe>
 8005e48:	89a3      	ldrh	r3, [r4, #12]
 8005e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e4e:	81a3      	strh	r3, [r4, #12]
 8005e50:	f04f 30ff 	mov.w	r0, #4294967295
 8005e54:	e78e      	b.n	8005d74 <__sflush_r+0x1c>
 8005e56:	4407      	add	r7, r0
 8005e58:	eba8 0800 	sub.w	r8, r8, r0
 8005e5c:	e7e9      	b.n	8005e32 <__sflush_r+0xda>
 8005e5e:	bf00      	nop
 8005e60:	dfbffffe 	.word	0xdfbffffe

08005e64 <_fflush_r>:
 8005e64:	b538      	push	{r3, r4, r5, lr}
 8005e66:	690b      	ldr	r3, [r1, #16]
 8005e68:	4605      	mov	r5, r0
 8005e6a:	460c      	mov	r4, r1
 8005e6c:	b913      	cbnz	r3, 8005e74 <_fflush_r+0x10>
 8005e6e:	2500      	movs	r5, #0
 8005e70:	4628      	mov	r0, r5
 8005e72:	bd38      	pop	{r3, r4, r5, pc}
 8005e74:	b118      	cbz	r0, 8005e7e <_fflush_r+0x1a>
 8005e76:	6a03      	ldr	r3, [r0, #32]
 8005e78:	b90b      	cbnz	r3, 8005e7e <_fflush_r+0x1a>
 8005e7a:	f7ff f995 	bl	80051a8 <__sinit>
 8005e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d0f3      	beq.n	8005e6e <_fflush_r+0xa>
 8005e86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e88:	07d0      	lsls	r0, r2, #31
 8005e8a:	d404      	bmi.n	8005e96 <_fflush_r+0x32>
 8005e8c:	0599      	lsls	r1, r3, #22
 8005e8e:	d402      	bmi.n	8005e96 <_fflush_r+0x32>
 8005e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e92:	f7ff fb7e 	bl	8005592 <__retarget_lock_acquire_recursive>
 8005e96:	4628      	mov	r0, r5
 8005e98:	4621      	mov	r1, r4
 8005e9a:	f7ff ff5d 	bl	8005d58 <__sflush_r>
 8005e9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ea0:	07da      	lsls	r2, r3, #31
 8005ea2:	4605      	mov	r5, r0
 8005ea4:	d4e4      	bmi.n	8005e70 <_fflush_r+0xc>
 8005ea6:	89a3      	ldrh	r3, [r4, #12]
 8005ea8:	059b      	lsls	r3, r3, #22
 8005eaa:	d4e1      	bmi.n	8005e70 <_fflush_r+0xc>
 8005eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eae:	f7ff fb71 	bl	8005594 <__retarget_lock_release_recursive>
 8005eb2:	e7dd      	b.n	8005e70 <_fflush_r+0xc>

08005eb4 <__swhatbuf_r>:
 8005eb4:	b570      	push	{r4, r5, r6, lr}
 8005eb6:	460c      	mov	r4, r1
 8005eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ebc:	2900      	cmp	r1, #0
 8005ebe:	b096      	sub	sp, #88	; 0x58
 8005ec0:	4615      	mov	r5, r2
 8005ec2:	461e      	mov	r6, r3
 8005ec4:	da0d      	bge.n	8005ee2 <__swhatbuf_r+0x2e>
 8005ec6:	89a3      	ldrh	r3, [r4, #12]
 8005ec8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005ecc:	f04f 0100 	mov.w	r1, #0
 8005ed0:	bf0c      	ite	eq
 8005ed2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005ed6:	2340      	movne	r3, #64	; 0x40
 8005ed8:	2000      	movs	r0, #0
 8005eda:	6031      	str	r1, [r6, #0]
 8005edc:	602b      	str	r3, [r5, #0]
 8005ede:	b016      	add	sp, #88	; 0x58
 8005ee0:	bd70      	pop	{r4, r5, r6, pc}
 8005ee2:	466a      	mov	r2, sp
 8005ee4:	f000 f878 	bl	8005fd8 <_fstat_r>
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	dbec      	blt.n	8005ec6 <__swhatbuf_r+0x12>
 8005eec:	9901      	ldr	r1, [sp, #4]
 8005eee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005ef2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005ef6:	4259      	negs	r1, r3
 8005ef8:	4159      	adcs	r1, r3
 8005efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005efe:	e7eb      	b.n	8005ed8 <__swhatbuf_r+0x24>

08005f00 <__smakebuf_r>:
 8005f00:	898b      	ldrh	r3, [r1, #12]
 8005f02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f04:	079d      	lsls	r5, r3, #30
 8005f06:	4606      	mov	r6, r0
 8005f08:	460c      	mov	r4, r1
 8005f0a:	d507      	bpl.n	8005f1c <__smakebuf_r+0x1c>
 8005f0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f10:	6023      	str	r3, [r4, #0]
 8005f12:	6123      	str	r3, [r4, #16]
 8005f14:	2301      	movs	r3, #1
 8005f16:	6163      	str	r3, [r4, #20]
 8005f18:	b002      	add	sp, #8
 8005f1a:	bd70      	pop	{r4, r5, r6, pc}
 8005f1c:	ab01      	add	r3, sp, #4
 8005f1e:	466a      	mov	r2, sp
 8005f20:	f7ff ffc8 	bl	8005eb4 <__swhatbuf_r>
 8005f24:	9900      	ldr	r1, [sp, #0]
 8005f26:	4605      	mov	r5, r0
 8005f28:	4630      	mov	r0, r6
 8005f2a:	f7ff fbb5 	bl	8005698 <_malloc_r>
 8005f2e:	b948      	cbnz	r0, 8005f44 <__smakebuf_r+0x44>
 8005f30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f34:	059a      	lsls	r2, r3, #22
 8005f36:	d4ef      	bmi.n	8005f18 <__smakebuf_r+0x18>
 8005f38:	f023 0303 	bic.w	r3, r3, #3
 8005f3c:	f043 0302 	orr.w	r3, r3, #2
 8005f40:	81a3      	strh	r3, [r4, #12]
 8005f42:	e7e3      	b.n	8005f0c <__smakebuf_r+0xc>
 8005f44:	89a3      	ldrh	r3, [r4, #12]
 8005f46:	6020      	str	r0, [r4, #0]
 8005f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f4c:	81a3      	strh	r3, [r4, #12]
 8005f4e:	9b00      	ldr	r3, [sp, #0]
 8005f50:	6163      	str	r3, [r4, #20]
 8005f52:	9b01      	ldr	r3, [sp, #4]
 8005f54:	6120      	str	r0, [r4, #16]
 8005f56:	b15b      	cbz	r3, 8005f70 <__smakebuf_r+0x70>
 8005f58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f5c:	4630      	mov	r0, r6
 8005f5e:	f000 f84d 	bl	8005ffc <_isatty_r>
 8005f62:	b128      	cbz	r0, 8005f70 <__smakebuf_r+0x70>
 8005f64:	89a3      	ldrh	r3, [r4, #12]
 8005f66:	f023 0303 	bic.w	r3, r3, #3
 8005f6a:	f043 0301 	orr.w	r3, r3, #1
 8005f6e:	81a3      	strh	r3, [r4, #12]
 8005f70:	89a3      	ldrh	r3, [r4, #12]
 8005f72:	431d      	orrs	r5, r3
 8005f74:	81a5      	strh	r5, [r4, #12]
 8005f76:	e7cf      	b.n	8005f18 <__smakebuf_r+0x18>

08005f78 <_raise_r>:
 8005f78:	291f      	cmp	r1, #31
 8005f7a:	b538      	push	{r3, r4, r5, lr}
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	460d      	mov	r5, r1
 8005f80:	d904      	bls.n	8005f8c <_raise_r+0x14>
 8005f82:	2316      	movs	r3, #22
 8005f84:	6003      	str	r3, [r0, #0]
 8005f86:	f04f 30ff 	mov.w	r0, #4294967295
 8005f8a:	bd38      	pop	{r3, r4, r5, pc}
 8005f8c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005f8e:	b112      	cbz	r2, 8005f96 <_raise_r+0x1e>
 8005f90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005f94:	b94b      	cbnz	r3, 8005faa <_raise_r+0x32>
 8005f96:	4620      	mov	r0, r4
 8005f98:	f000 f852 	bl	8006040 <_getpid_r>
 8005f9c:	462a      	mov	r2, r5
 8005f9e:	4601      	mov	r1, r0
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fa6:	f000 b839 	b.w	800601c <_kill_r>
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d00a      	beq.n	8005fc4 <_raise_r+0x4c>
 8005fae:	1c59      	adds	r1, r3, #1
 8005fb0:	d103      	bne.n	8005fba <_raise_r+0x42>
 8005fb2:	2316      	movs	r3, #22
 8005fb4:	6003      	str	r3, [r0, #0]
 8005fb6:	2001      	movs	r0, #1
 8005fb8:	e7e7      	b.n	8005f8a <_raise_r+0x12>
 8005fba:	2400      	movs	r4, #0
 8005fbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	4798      	blx	r3
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	e7e0      	b.n	8005f8a <_raise_r+0x12>

08005fc8 <raise>:
 8005fc8:	4b02      	ldr	r3, [pc, #8]	; (8005fd4 <raise+0xc>)
 8005fca:	4601      	mov	r1, r0
 8005fcc:	6818      	ldr	r0, [r3, #0]
 8005fce:	f7ff bfd3 	b.w	8005f78 <_raise_r>
 8005fd2:	bf00      	nop
 8005fd4:	20000068 	.word	0x20000068

08005fd8 <_fstat_r>:
 8005fd8:	b538      	push	{r3, r4, r5, lr}
 8005fda:	4d07      	ldr	r5, [pc, #28]	; (8005ff8 <_fstat_r+0x20>)
 8005fdc:	2300      	movs	r3, #0
 8005fde:	4604      	mov	r4, r0
 8005fe0:	4608      	mov	r0, r1
 8005fe2:	4611      	mov	r1, r2
 8005fe4:	602b      	str	r3, [r5, #0]
 8005fe6:	f7fc fa64 	bl	80024b2 <_fstat>
 8005fea:	1c43      	adds	r3, r0, #1
 8005fec:	d102      	bne.n	8005ff4 <_fstat_r+0x1c>
 8005fee:	682b      	ldr	r3, [r5, #0]
 8005ff0:	b103      	cbz	r3, 8005ff4 <_fstat_r+0x1c>
 8005ff2:	6023      	str	r3, [r4, #0]
 8005ff4:	bd38      	pop	{r3, r4, r5, pc}
 8005ff6:	bf00      	nop
 8005ff8:	2000072c 	.word	0x2000072c

08005ffc <_isatty_r>:
 8005ffc:	b538      	push	{r3, r4, r5, lr}
 8005ffe:	4d06      	ldr	r5, [pc, #24]	; (8006018 <_isatty_r+0x1c>)
 8006000:	2300      	movs	r3, #0
 8006002:	4604      	mov	r4, r0
 8006004:	4608      	mov	r0, r1
 8006006:	602b      	str	r3, [r5, #0]
 8006008:	f7fc fa63 	bl	80024d2 <_isatty>
 800600c:	1c43      	adds	r3, r0, #1
 800600e:	d102      	bne.n	8006016 <_isatty_r+0x1a>
 8006010:	682b      	ldr	r3, [r5, #0]
 8006012:	b103      	cbz	r3, 8006016 <_isatty_r+0x1a>
 8006014:	6023      	str	r3, [r4, #0]
 8006016:	bd38      	pop	{r3, r4, r5, pc}
 8006018:	2000072c 	.word	0x2000072c

0800601c <_kill_r>:
 800601c:	b538      	push	{r3, r4, r5, lr}
 800601e:	4d07      	ldr	r5, [pc, #28]	; (800603c <_kill_r+0x20>)
 8006020:	2300      	movs	r3, #0
 8006022:	4604      	mov	r4, r0
 8006024:	4608      	mov	r0, r1
 8006026:	4611      	mov	r1, r2
 8006028:	602b      	str	r3, [r5, #0]
 800602a:	f7fc f9e3 	bl	80023f4 <_kill>
 800602e:	1c43      	adds	r3, r0, #1
 8006030:	d102      	bne.n	8006038 <_kill_r+0x1c>
 8006032:	682b      	ldr	r3, [r5, #0]
 8006034:	b103      	cbz	r3, 8006038 <_kill_r+0x1c>
 8006036:	6023      	str	r3, [r4, #0]
 8006038:	bd38      	pop	{r3, r4, r5, pc}
 800603a:	bf00      	nop
 800603c:	2000072c 	.word	0x2000072c

08006040 <_getpid_r>:
 8006040:	f7fc b9d0 	b.w	80023e4 <_getpid>

08006044 <_sbrk_r>:
 8006044:	b538      	push	{r3, r4, r5, lr}
 8006046:	4d06      	ldr	r5, [pc, #24]	; (8006060 <_sbrk_r+0x1c>)
 8006048:	2300      	movs	r3, #0
 800604a:	4604      	mov	r4, r0
 800604c:	4608      	mov	r0, r1
 800604e:	602b      	str	r3, [r5, #0]
 8006050:	f7fc fae2 	bl	8002618 <_sbrk>
 8006054:	1c43      	adds	r3, r0, #1
 8006056:	d102      	bne.n	800605e <_sbrk_r+0x1a>
 8006058:	682b      	ldr	r3, [r5, #0]
 800605a:	b103      	cbz	r3, 800605e <_sbrk_r+0x1a>
 800605c:	6023      	str	r3, [r4, #0]
 800605e:	bd38      	pop	{r3, r4, r5, pc}
 8006060:	2000072c 	.word	0x2000072c

08006064 <_init>:
 8006064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006066:	bf00      	nop
 8006068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800606a:	bc08      	pop	{r3}
 800606c:	469e      	mov	lr, r3
 800606e:	4770      	bx	lr

08006070 <_fini>:
 8006070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006072:	bf00      	nop
 8006074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006076:	bc08      	pop	{r3}
 8006078:	469e      	mov	lr, r3
 800607a:	4770      	bx	lr
